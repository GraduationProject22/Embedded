
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003ee0  08003ee0  00013ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004058  08004058  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004058  08004058  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000078  080040d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  080040d8  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007889  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a9  00000000  00000000  0002792a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  000291d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00029878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f66  00000000  00000000  00029ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000781e  00000000  00000000  00040e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d2d  00000000  00000000  0004862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d7c  00000000  00000000  000ca3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ec4 	.word	0x08003ec4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003ec4 	.word	0x08003ec4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000adc:	b08c      	sub	sp, #48	; 0x30
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000ae4:	4b5b      	ldr	r3, [pc, #364]	; (8000c54 <decodeGGA+0x17c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000aee:	e004      	b.n	8000afa <decodeGGA+0x22>
 8000af0:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <decodeGGA+0x17c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a57      	ldr	r2, [pc, #348]	; (8000c54 <decodeGGA+0x17c>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <decodeGGA+0x17c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b2c      	cmp	r3, #44	; 0x2c
 8000b08:	d1f2      	bne.n	8000af0 <decodeGGA+0x18>
	inx++;
 8000b0a:	4b52      	ldr	r3, [pc, #328]	; (8000c54 <decodeGGA+0x17c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a50      	ldr	r2, [pc, #320]	; (8000c54 <decodeGGA+0x17c>)
 8000b12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000b14:	e004      	b.n	8000b20 <decodeGGA+0x48>
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <decodeGGA+0x17c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	4a4d      	ldr	r2, [pc, #308]	; (8000c54 <decodeGGA+0x17c>)
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <decodeGGA+0x17c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b2c      	cmp	r3, #44	; 0x2c
 8000b2e:	d1f2      	bne.n	8000b16 <decodeGGA+0x3e>
	inx++;
 8000b30:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <decodeGGA+0x17c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a47      	ldr	r2, [pc, #284]	; (8000c54 <decodeGGA+0x17c>)
 8000b38:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000b3a:	e004      	b.n	8000b46 <decodeGGA+0x6e>
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <decodeGGA+0x17c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a44      	ldr	r2, [pc, #272]	; (8000c54 <decodeGGA+0x17c>)
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <decodeGGA+0x17c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b2c      	cmp	r3, #44	; 0x2c
 8000b54:	d1f2      	bne.n	8000b3c <decodeGGA+0x64>
	inx++;
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <decodeGGA+0x17c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <decodeGGA+0x17c>)
 8000b5e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000b60:	e004      	b.n	8000b6c <decodeGGA+0x94>
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <decodeGGA+0x17c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <decodeGGA+0x17c>)
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <decodeGGA+0x17c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b2c      	cmp	r3, #44	; 0x2c
 8000b7a:	d1f2      	bne.n	8000b62 <decodeGGA+0x8a>
	inx++;
 8000b7c:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <decodeGGA+0x17c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <decodeGGA+0x17c>)
 8000b84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000b86:	e004      	b.n	8000b92 <decodeGGA+0xba>
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <decodeGGA+0x17c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <decodeGGA+0x17c>)
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <decodeGGA+0x17c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8000ba0:	d1f2      	bne.n	8000b88 <decodeGGA+0xb0>
	inx++;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <decodeGGA+0x17c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	; (8000c54 <decodeGGA+0x17c>)
 8000baa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000bac:	e004      	b.n	8000bb8 <decodeGGA+0xe0>
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <decodeGGA+0x17c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <decodeGGA+0x17c>)
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <decodeGGA+0x17c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b2c      	cmp	r3, #44	; 0x2c
 8000bc6:	d1f2      	bne.n	8000bae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <decodeGGA+0x17c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <decodeGGA+0x17c>)
 8000bd0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <decodeGGA+0x17c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b31      	cmp	r3, #49	; 0x31
 8000be0:	d00f      	beq.n	8000c02 <decodeGGA+0x12a>
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <decodeGGA+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b32      	cmp	r3, #50	; 0x32
 8000bf0:	d007      	beq.n	8000c02 <decodeGGA+0x12a>
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <decodeGGA+0x17c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b36      	cmp	r3, #54	; 0x36
 8000c00:	d106      	bne.n	8000c10 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <decodeGGA+0x17c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c0e:	e009      	b.n	8000c24 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000c16:	2301      	movs	r3, #1
 8000c18:	e2f2      	b.n	8001200 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <decodeGGA+0x17c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <decodeGGA+0x17c>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <decodeGGA+0x17c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b2c      	cmp	r3, #44	; 0x2c
 8000c32:	d1f2      	bne.n	8000c1a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <decodeGGA+0x17c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <decodeGGA+0x17c>)
 8000c3c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	220c      	movs	r2, #12
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 f914 	bl	8002e74 <memset>
	i=0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000c50:	e016      	b.n	8000c80 <decodeGGA+0x1a8>
 8000c52:	bf00      	nop
 8000c54:	20000094 	.word	0x20000094
	{
		buffer[i] = GGAbuffer[inx];
 8000c58:	4ba7      	ldr	r3, [pc, #668]	; (8000ef8 <decodeGGA+0x420>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	f107 020c 	add.w	r2, r7, #12
 8000c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6a:	4413      	add	r3, r2
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
		i++;
 8000c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c72:	3301      	adds	r3, #1
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000c76:	4ba0      	ldr	r3, [pc, #640]	; (8000ef8 <decodeGGA+0x420>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a9e      	ldr	r2, [pc, #632]	; (8000ef8 <decodeGGA+0x420>)
 8000c7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000c80:	4b9d      	ldr	r3, [pc, #628]	; (8000ef8 <decodeGGA+0x420>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b2c      	cmp	r3, #44	; 0x2c
 8000c8e:	d1e3      	bne.n	8000c58 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f8bf 	bl	8002e18 <atoi>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a97      	ldr	r2, [pc, #604]	; (8000efc <decodeGGA+0x424>)
 8000c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca2:	1312      	asrs	r2, r2, #12
 8000ca4:	17db      	asrs	r3, r3, #31
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	4b95      	ldr	r3, [pc, #596]	; (8000f00 <decodeGGA+0x428>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4995      	ldr	r1, [pc, #596]	; (8000f04 <decodeGGA+0x42c>)
 8000cae:	fb81 0103 	smull	r0, r1, r1, r3
 8000cb2:	1149      	asrs	r1, r1, #5
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	1acb      	subs	r3, r1, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a93      	ldr	r2, [pc, #588]	; (8000f08 <decodeGGA+0x430>)
 8000cbc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 f8a8 	bl	8002e18 <atoi>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a8e      	ldr	r2, [pc, #568]	; (8000f04 <decodeGGA+0x42c>)
 8000ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd0:	1152      	asrs	r2, r2, #5
 8000cd2:	17db      	asrs	r3, r3, #31
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	4a8b      	ldr	r2, [pc, #556]	; (8000f04 <decodeGGA+0x42c>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1151      	asrs	r1, r2, #5
 8000cde:	17da      	asrs	r2, r3, #31
 8000ce0:	1a8a      	subs	r2, r1, r2
 8000ce2:	2164      	movs	r1, #100	; 0x64
 8000ce4:	fb01 f202 	mul.w	r2, r1, r2
 8000ce8:	1a9a      	subs	r2, r3, r2
 8000cea:	4b85      	ldr	r3, [pc, #532]	; (8000f00 <decodeGGA+0x428>)
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	4b85      	ldr	r3, [pc, #532]	; (8000f04 <decodeGGA+0x42c>)
 8000cf0:	fb83 0301 	smull	r0, r3, r3, r1
 8000cf4:	1158      	asrs	r0, r3, #5
 8000cf6:	17cb      	asrs	r3, r1, #31
 8000cf8:	1ac3      	subs	r3, r0, r3
 8000cfa:	2064      	movs	r0, #100	; 0x64
 8000cfc:	fb00 f303 	mul.w	r3, r0, r3
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	4a81      	ldr	r2, [pc, #516]	; (8000f0c <decodeGGA+0x434>)
 8000d06:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8000d08:	4b80      	ldr	r3, [pc, #512]	; (8000f0c <decodeGGA+0x434>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d0e:	dd09      	ble.n	8000d24 <decodeGGA+0x24c>
	{
		min = min-60;
 8000d10:	4b7e      	ldr	r3, [pc, #504]	; (8000f0c <decodeGGA+0x434>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b3c      	subs	r3, #60	; 0x3c
 8000d16:	4a7d      	ldr	r2, [pc, #500]	; (8000f0c <decodeGGA+0x434>)
 8000d18:	6013      	str	r3, [r2, #0]
		hr++;
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <decodeGGA+0x430>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a79      	ldr	r2, [pc, #484]	; (8000f08 <decodeGGA+0x430>)
 8000d22:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000d24:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <decodeGGA+0x430>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da09      	bge.n	8000d40 <decodeGGA+0x268>
	{
		hr=24+hr;
 8000d2c:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <decodeGGA+0x430>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3318      	adds	r3, #24
 8000d32:	4a75      	ldr	r2, [pc, #468]	; (8000f08 <decodeGGA+0x430>)
 8000d34:	6013      	str	r3, [r2, #0]
		daychange--;
 8000d36:	4b76      	ldr	r3, [pc, #472]	; (8000f10 <decodeGGA+0x438>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4a74      	ldr	r2, [pc, #464]	; (8000f10 <decodeGGA+0x438>)
 8000d3e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000d40:	4b71      	ldr	r3, [pc, #452]	; (8000f08 <decodeGGA+0x430>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b17      	cmp	r3, #23
 8000d46:	dd09      	ble.n	8000d5c <decodeGGA+0x284>
	{
		hr=hr-24;
 8000d48:	4b6f      	ldr	r3, [pc, #444]	; (8000f08 <decodeGGA+0x430>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3b18      	subs	r3, #24
 8000d4e:	4a6e      	ldr	r2, [pc, #440]	; (8000f08 <decodeGGA+0x430>)
 8000d50:	6013      	str	r3, [r2, #0]
		daychange++;
 8000d52:	4b6f      	ldr	r3, [pc, #444]	; (8000f10 <decodeGGA+0x438>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a6d      	ldr	r2, [pc, #436]	; (8000f10 <decodeGGA+0x438>)
 8000d5a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <decodeGGA+0x430>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000d64:	4b69      	ldr	r3, [pc, #420]	; (8000f0c <decodeGGA+0x434>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f851 	bl	8002e18 <atoi>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b62      	ldr	r3, [pc, #392]	; (8000f04 <decodeGGA+0x42c>)
 8000d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d7e:	1159      	asrs	r1, r3, #5
 8000d80:	17d3      	asrs	r3, r2, #31
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	2164      	movs	r1, #100	; 0x64
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000d90:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <decodeGGA+0x420>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a58      	ldr	r2, [pc, #352]	; (8000ef8 <decodeGGA+0x420>)
 8000d98:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	220c      	movs	r2, #12
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 f866 	bl	8002e74 <memset>
	i=0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dac:	e013      	b.n	8000dd6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000dae:	4b52      	ldr	r3, [pc, #328]	; (8000ef8 <decodeGGA+0x420>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	f107 020c 	add.w	r2, r7, #12
 8000dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc0:	4413      	add	r3, r2
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
		i++;
 8000dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc8:	3301      	adds	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <decodeGGA+0x420>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4a49      	ldr	r2, [pc, #292]	; (8000ef8 <decodeGGA+0x420>)
 8000dd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dd6:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <decodeGGA+0x420>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b2c      	cmp	r3, #44	; 0x2c
 8000de4:	d1e3      	bne.n	8000dae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9b0 	bl	8000150 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d801      	bhi.n	8000dfa <decodeGGA+0x322>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e202      	b.n	8001200 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f80a 	bl	8002e18 <atoi>
 8000e04:	4603      	mov	r3, r0
 8000e06:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000e0c:	e002      	b.n	8000e14 <decodeGGA+0x33c>
 8000e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e10:	3301      	adds	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8000e20:	d1f5      	bne.n	8000e0e <decodeGGA+0x336>
	j++;
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	3301      	adds	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f98f 	bl	8000150 <strlen>
 8000e32:	4602      	mov	r2, r0
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	4413      	add	r3, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 ffe8 	bl	8002e18 <atoi>
 8000e48:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fad8 	bl	8000404 <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <decodeGGA+0x43c>)
 8000e5a:	f7ff fc67 	bl	800072c <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4690      	mov	r8, r2
 8000e64:	4699      	mov	r9, r3
 8000e66:	69f8      	ldr	r0, [r7, #28]
 8000e68:	f7ff facc 	bl	8000404 <__aeabi_i2d>
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	460d      	mov	r5, r1
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	3302      	adds	r3, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fac5 	bl	8000404 <__aeabi_i2d>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	f04f 0000 	mov.w	r0, #0
 8000e82:	4925      	ldr	r1, [pc, #148]	; (8000f18 <decodeGGA+0x440>)
 8000e84:	f002 f88e 	bl	8002fa4 <pow>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	4629      	mov	r1, r5
 8000e90:	f7ff fc4c 	bl	800072c <__aeabi_ddiv>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4640      	mov	r0, r8
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	f7ff f966 	bl	800016c <__adddf3>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fdc6 	bl	8000a38 <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	601a      	str	r2, [r3, #0]
	inx++;  
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <decodeGGA+0x420>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <decodeGGA+0x420>)
 8000ebe:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <decodeGGA+0x420>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <decodeGGA+0x420>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <decodeGGA+0x420>)
 8000ed8:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <decodeGGA+0x420>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <decodeGGA+0x420>)
 8000ee2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	220c      	movs	r2, #12
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 ffc1 	bl	8002e74 <memset>
	i=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000ef6:	e025      	b.n	8000f44 <decodeGGA+0x46c>
 8000ef8:	20000094 	.word	0x20000094
 8000efc:	68db8bad 	.word	0x68db8bad
 8000f00:	20000000 	.word	0x20000000
 8000f04:	51eb851f 	.word	0x51eb851f
 8000f08:	20000098 	.word	0x20000098
 8000f0c:	2000009c 	.word	0x2000009c
 8000f10:	200000ac 	.word	0x200000ac
 8000f14:	40590000 	.word	0x40590000
 8000f18:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <decodeGGA+0x668>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	4413      	add	r3, r2
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
		i++;
 8000f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f36:	3301      	adds	r3, #1
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <decodeGGA+0x668>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a7f      	ldr	r2, [pc, #508]	; (8001140 <decodeGGA+0x668>)
 8000f42:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f44:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <decodeGGA+0x668>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2c      	cmp	r3, #44	; 0x2c
 8000f52:	d1e3      	bne.n	8000f1c <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 ff5d 	bl	8002e18 <atoi>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8000f66:	e002      	b.n	8000f6e <decodeGGA+0x496>
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b2e      	cmp	r3, #46	; 0x2e
 8000f7a:	d1f5      	bne.n	8000f68 <decodeGGA+0x490>
	j++;
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	3301      	adds	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f8e2 	bl	8000150 <strlen>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 ff3b 	bl	8002e18 <atoi>
 8000fa2:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000fa4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa2b 	bl	8000404 <__aeabi_i2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b64      	ldr	r3, [pc, #400]	; (8001144 <decodeGGA+0x66c>)
 8000fb4:	f7ff fbba 	bl	800072c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	4699      	mov	r9, r3
 8000fc0:	69f8      	ldr	r0, [r7, #28]
 8000fc2:	f7ff fa1f 	bl	8000404 <__aeabi_i2d>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	460d      	mov	r5, r1
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa18 	bl	8000404 <__aeabi_i2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	495a      	ldr	r1, [pc, #360]	; (8001148 <decodeGGA+0x670>)
 8000fde:	f001 ffe1 	bl	8002fa4 <pow>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fb9f 	bl	800072c <__aeabi_ddiv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f8b9 	bl	800016c <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fd19 	bl	8000a38 <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	609a      	str	r2, [r3, #8]
	inx++;
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <decodeGGA+0x668>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <decodeGGA+0x668>)
 8001018:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800101a:	4b49      	ldr	r3, [pc, #292]	; (8001140 <decodeGGA+0x668>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <decodeGGA+0x668>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a43      	ldr	r2, [pc, #268]	; (8001140 <decodeGGA+0x668>)
 8001032:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001034:	4b42      	ldr	r3, [pc, #264]	; (8001140 <decodeGGA+0x668>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a41      	ldr	r2, [pc, #260]	; (8001140 <decodeGGA+0x668>)
 800103c:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800103e:	4b40      	ldr	r3, [pc, #256]	; (8001140 <decodeGGA+0x668>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <decodeGGA+0x668>)
 8001046:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <decodeGGA+0x668>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <decodeGGA+0x668>)
 8001050:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	220c      	movs	r2, #12
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f001 ff0a 	bl	8002e74 <memset>
	i=0;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001064:	e013      	b.n	800108e <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <decodeGGA+0x668>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
		i++;
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	3301      	adds	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <decodeGGA+0x668>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <decodeGGA+0x668>)
 800108c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <decodeGGA+0x668>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b2c      	cmp	r3, #44	; 0x2c
 800109c:	d1e3      	bne.n	8001066 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 feb8 	bl	8002e18 <atoi>
 80010a8:	4602      	mov	r2, r0
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <decodeGGA+0x668>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <decodeGGA+0x668>)
 80010b6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80010b8:	e004      	b.n	80010c4 <decodeGGA+0x5ec>
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <decodeGGA+0x668>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <decodeGGA+0x668>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <decodeGGA+0x668>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b2c      	cmp	r3, #44	; 0x2c
 80010d2:	d1f2      	bne.n	80010ba <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <decodeGGA+0x668>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <decodeGGA+0x668>)
 80010dc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	220c      	movs	r2, #12
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fec4 	bl	8002e74 <memset>
	i=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80010f0:	e013      	b.n	800111a <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <decodeGGA+0x668>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	7819      	ldrb	r1, [r3, #0]
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	4413      	add	r3, r2
 8001106:	460a      	mov	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
		i++;
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	3301      	adds	r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <decodeGGA+0x668>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <decodeGGA+0x668>)
 8001118:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <decodeGGA+0x668>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b2c      	cmp	r3, #44	; 0x2c
 8001128:	d1e3      	bne.n	80010f2 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fe72 	bl	8002e18 <atoi>
 8001134:	4603      	mov	r3, r0
 8001136:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800113c:	e009      	b.n	8001152 <decodeGGA+0x67a>
 800113e:	bf00      	nop
 8001140:	20000094 	.word	0x20000094
 8001144:	40590000 	.word	0x40590000
 8001148:	40240000 	.word	0x40240000
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	3301      	adds	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b2e      	cmp	r3, #46	; 0x2e
 800115e:	d1f5      	bne.n	800114c <decodeGGA+0x674>
	j++;
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	3301      	adds	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f7fe fff0 	bl	8000150 <strlen>
 8001170:	4602      	mov	r2, r0
 8001172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	4413      	add	r3, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fe49 	bl	8002e18 <atoi>
 8001186:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001188:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f939 	bl	8000404 <__aeabi_i2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f7ff f934 	bl	8000404 <__aeabi_i2d>
 800119c:	4680      	mov	r8, r0
 800119e:	4689      	mov	r9, r1
 80011a0:	6a38      	ldr	r0, [r7, #32]
 80011a2:	f7ff f92f 	bl	8000404 <__aeabi_i2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4917      	ldr	r1, [pc, #92]	; (800120c <decodeGGA+0x734>)
 80011b0:	f001 fef8 	bl	8002fa4 <pow>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4640      	mov	r0, r8
 80011ba:	4649      	mov	r1, r9
 80011bc:	f7ff fab6 	bl	800072c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4620      	mov	r0, r4
 80011c6:	4629      	mov	r1, r5
 80011c8:	f7fe ffd0 	bl	800016c <__adddf3>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fc30 	bl	8000a38 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	621a      	str	r2, [r3, #32]

	inx++;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <decodeGGA+0x738>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <decodeGGA+0x738>)
 80011ea:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <decodeGGA+0x738>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80011fe:	2300      	movs	r3, #0

}
 8001200:	4618      	mov	r0, r3
 8001202:	3730      	adds	r7, #48	; 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800120a:	bf00      	nop
 800120c:	40240000 	.word	0x40240000
 8001210:	20000094 	.word	0x20000094

08001214 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001214:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001218:	b090      	sub	sp, #64	; 0x40
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001220:	4b92      	ldr	r3, [pc, #584]	; (800146c <decodeRMC+0x258>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800122a:	e004      	b.n	8001236 <decodeRMC+0x22>
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <decodeRMC+0x258>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a8e      	ldr	r2, [pc, #568]	; (800146c <decodeRMC+0x258>)
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b8d      	ldr	r3, [pc, #564]	; (800146c <decodeRMC+0x258>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b2c      	cmp	r3, #44	; 0x2c
 8001244:	d1f2      	bne.n	800122c <decodeRMC+0x18>
	inx++;
 8001246:	4b89      	ldr	r3, [pc, #548]	; (800146c <decodeRMC+0x258>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a87      	ldr	r2, [pc, #540]	; (800146c <decodeRMC+0x258>)
 800124e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001250:	e004      	b.n	800125c <decodeRMC+0x48>
 8001252:	4b86      	ldr	r3, [pc, #536]	; (800146c <decodeRMC+0x258>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a84      	ldr	r2, [pc, #528]	; (800146c <decodeRMC+0x258>)
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b83      	ldr	r3, [pc, #524]	; (800146c <decodeRMC+0x258>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b2c      	cmp	r3, #44	; 0x2c
 800126a:	d1f2      	bne.n	8001252 <decodeRMC+0x3e>
	inx++;
 800126c:	4b7f      	ldr	r3, [pc, #508]	; (800146c <decodeRMC+0x258>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a7e      	ldr	r2, [pc, #504]	; (800146c <decodeRMC+0x258>)
 8001274:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001276:	4b7d      	ldr	r3, [pc, #500]	; (800146c <decodeRMC+0x258>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b41      	cmp	r3, #65	; 0x41
 8001284:	d10d      	bne.n	80012a2 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 800128c:	4b77      	ldr	r3, [pc, #476]	; (800146c <decodeRMC+0x258>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a76      	ldr	r2, [pc, #472]	; (800146c <decodeRMC+0x258>)
 8001294:	6013      	str	r3, [r2, #0]
	inx++;
 8001296:	4b75      	ldr	r3, [pc, #468]	; (800146c <decodeRMC+0x258>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a73      	ldr	r2, [pc, #460]	; (800146c <decodeRMC+0x258>)
 800129e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012a0:	e009      	b.n	80012b6 <decodeRMC+0xa2>
		rmc->isValid =0;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
		return 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e1d5      	b.n	8001658 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012ac:	4b6f      	ldr	r3, [pc, #444]	; (800146c <decodeRMC+0x258>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a6e      	ldr	r2, [pc, #440]	; (800146c <decodeRMC+0x258>)
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6d      	ldr	r3, [pc, #436]	; (800146c <decodeRMC+0x258>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b2c      	cmp	r3, #44	; 0x2c
 80012c4:	d1f2      	bne.n	80012ac <decodeRMC+0x98>
	inx++;
 80012c6:	4b69      	ldr	r3, [pc, #420]	; (800146c <decodeRMC+0x258>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a67      	ldr	r2, [pc, #412]	; (800146c <decodeRMC+0x258>)
 80012ce:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80012d0:	e004      	b.n	80012dc <decodeRMC+0xc8>
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <decodeRMC+0x258>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a64      	ldr	r2, [pc, #400]	; (800146c <decodeRMC+0x258>)
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b63      	ldr	r3, [pc, #396]	; (800146c <decodeRMC+0x258>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2c      	cmp	r3, #44	; 0x2c
 80012ea:	d1f2      	bne.n	80012d2 <decodeRMC+0xbe>
	inx++;
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <decodeRMC+0x258>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a5e      	ldr	r2, [pc, #376]	; (800146c <decodeRMC+0x258>)
 80012f4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80012f6:	e004      	b.n	8001302 <decodeRMC+0xee>
 80012f8:	4b5c      	ldr	r3, [pc, #368]	; (800146c <decodeRMC+0x258>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a5b      	ldr	r2, [pc, #364]	; (800146c <decodeRMC+0x258>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <decodeRMC+0x258>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b2c      	cmp	r3, #44	; 0x2c
 8001310:	d1f2      	bne.n	80012f8 <decodeRMC+0xe4>
	inx++;
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <decodeRMC+0x258>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a54      	ldr	r2, [pc, #336]	; (800146c <decodeRMC+0x258>)
 800131a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 800131c:	e004      	b.n	8001328 <decodeRMC+0x114>
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <decodeRMC+0x258>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <decodeRMC+0x258>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <decodeRMC+0x258>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b2c      	cmp	r3, #44	; 0x2c
 8001336:	d1f2      	bne.n	800131e <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001338:	4b4c      	ldr	r3, [pc, #304]	; (800146c <decodeRMC+0x258>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a4b      	ldr	r2, [pc, #300]	; (800146c <decodeRMC+0x258>)
 8001340:	6013      	str	r3, [r2, #0]
	i=0;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	220c      	movs	r2, #12
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fd90 	bl	8002e74 <memset>
	while (RMCbuffer[inx] != ',')
 8001354:	e013      	b.n	800137e <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8001356:	4b45      	ldr	r3, [pc, #276]	; (800146c <decodeRMC+0x258>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	7819      	ldrb	r1, [r3, #0]
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001368:	4413      	add	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
		i++;
 800136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001370:	3301      	adds	r3, #1
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <decodeRMC+0x258>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a3c      	ldr	r2, [pc, #240]	; (800146c <decodeRMC+0x258>)
 800137c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <decodeRMC+0x258>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b2c      	cmp	r3, #44	; 0x2c
 800138c:	d1e3      	bne.n	8001356 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d055      	beq.n	8001444 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fd3b 	bl	8002e18 <atoi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80013aa:	e002      	b.n	80013b2 <decodeRMC+0x19e>
 80013ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ae:	3301      	adds	r3, #1
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b2e      	cmp	r3, #46	; 0x2e
 80013be:	d1f5      	bne.n	80013ac <decodeRMC+0x198>
		j++;
 80013c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c2:	3301      	adds	r3, #1
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe fec0 	bl	8000150 <strlen>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80013d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	4413      	add	r3, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fd19 	bl	8002e18 <atoi>
 80013e6:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 80013e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f809 	bl	8000404 <__aeabi_i2d>
 80013f2:	4604      	mov	r4, r0
 80013f4:	460d      	mov	r5, r1
 80013f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f8:	f7ff f804 	bl	8000404 <__aeabi_i2d>
 80013fc:	4680      	mov	r8, r0
 80013fe:	4689      	mov	r9, r1
 8001400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001402:	f7fe ffff 	bl	8000404 <__aeabi_i2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	f04f 0000 	mov.w	r0, #0
 800140e:	4918      	ldr	r1, [pc, #96]	; (8001470 <decodeRMC+0x25c>)
 8001410:	f001 fdc8 	bl	8002fa4 <pow>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4640      	mov	r0, r8
 800141a:	4649      	mov	r1, r9
 800141c:	f7ff f986 	bl	800072c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7fe fea0 	bl	800016c <__adddf3>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb00 	bl	8000a38 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	e003      	b.n	800144c <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <decodeRMC+0x258>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a06      	ldr	r2, [pc, #24]	; (800146c <decodeRMC+0x258>)
 8001454:	6013      	str	r3, [r2, #0]
	i=0;
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	220c      	movs	r2, #12
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f001 fd06 	bl	8002e74 <memset>
	while (RMCbuffer[inx] != ',')
 8001468:	e018      	b.n	800149c <decodeRMC+0x288>
 800146a:	bf00      	nop
 800146c:	20000094 	.word	0x20000094
 8001470:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8001474:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <decodeRMC+0x450>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	7819      	ldrb	r1, [r3, #0]
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
		i++;
 800148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148e:	3301      	adds	r3, #1
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <decodeRMC+0x450>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a72      	ldr	r2, [pc, #456]	; (8001664 <decodeRMC+0x450>)
 800149a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800149c:	4b71      	ldr	r3, [pc, #452]	; (8001664 <decodeRMC+0x450>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b2c      	cmp	r3, #44	; 0x2c
 80014aa:	d1e3      	bne.n	8001474 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d055      	beq.n	8001562 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fcac 	bl	8002e18 <atoi>
 80014c0:	4603      	mov	r3, r0
 80014c2:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80014c8:	e002      	b.n	80014d0 <decodeRMC+0x2bc>
 80014ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014cc:	3301      	adds	r3, #1
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b2e      	cmp	r3, #46	; 0x2e
 80014dc:	d1f5      	bne.n	80014ca <decodeRMC+0x2b6>
		j++;
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	3301      	adds	r3, #1
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe31 	bl	8000150 <strlen>
 80014ee:	4602      	mov	r2, r0
 80014f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	f107 0208 	add.w	r2, r7, #8
 80014fc:	4413      	add	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fc8a 	bl	8002e18 <atoi>
 8001504:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff7a 	bl	8000404 <__aeabi_i2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	69b8      	ldr	r0, [r7, #24]
 8001516:	f7fe ff75 	bl	8000404 <__aeabi_i2d>
 800151a:	4680      	mov	r8, r0
 800151c:	4689      	mov	r9, r1
 800151e:	69f8      	ldr	r0, [r7, #28]
 8001520:	f7fe ff70 	bl	8000404 <__aeabi_i2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0000 	mov.w	r0, #0
 800152c:	494e      	ldr	r1, [pc, #312]	; (8001668 <decodeRMC+0x454>)
 800152e:	f001 fd39 	bl	8002fa4 <pow>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4640      	mov	r0, r8
 8001538:	4649      	mov	r1, r9
 800153a:	f7ff f8f7 	bl	800072c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7fe fe11 	bl	800016c <__adddf3>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa71 	bl	8000a38 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	e003      	b.n	800156a <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <decodeRMC+0x450>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <decodeRMC+0x450>)
 8001572:	6013      	str	r3, [r2, #0]
	i=0;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	220c      	movs	r2, #12
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fc77 	bl	8002e74 <memset>
	while (RMCbuffer[inx] != ',')
 8001586:	e013      	b.n	80015b0 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <decodeRMC+0x450>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	7819      	ldrb	r1, [r3, #0]
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159a:	4413      	add	r3, r2
 800159c:	460a      	mov	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
		i++;
 80015a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a2:	3301      	adds	r3, #1
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <decodeRMC+0x450>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <decodeRMC+0x450>)
 80015ae:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <decodeRMC+0x450>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b2c      	cmp	r3, #44	; 0x2c
 80015be:	d1e3      	bne.n	8001588 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fc27 	bl	8002e18 <atoi>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <decodeRMC+0x458>)
 80015ce:	fb82 1203 	smull	r1, r2, r2, r3
 80015d2:	1312      	asrs	r2, r2, #12
 80015d4:	17db      	asrs	r3, r3, #31
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a25      	ldr	r2, [pc, #148]	; (8001670 <decodeRMC+0x45c>)
 80015da:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fc19 	bl	8002e18 <atoi>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <decodeRMC+0x460>)
 80015ea:	fb82 1203 	smull	r1, r2, r2, r3
 80015ee:	1152      	asrs	r2, r2, #5
 80015f0:	17db      	asrs	r3, r3, #31
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <decodeRMC+0x460>)
 80015f6:	fb83 1302 	smull	r1, r3, r3, r2
 80015fa:	1159      	asrs	r1, r3, #5
 80015fc:	17d3      	asrs	r3, r2, #31
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	2164      	movs	r1, #100	; 0x64
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <decodeRMC+0x464>)
 800160a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4618      	mov	r0, r3
 8001612:	f001 fc01 	bl	8002e18 <atoi>
 8001616:	4602      	mov	r2, r0
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <decodeRMC+0x460>)
 800161a:	fb83 1302 	smull	r1, r3, r3, r2
 800161e:	1159      	asrs	r1, r3, #5
 8001620:	17d3      	asrs	r3, r2, #31
 8001622:	1acb      	subs	r3, r1, r3
 8001624:	2164      	movs	r1, #100	; 0x64
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <decodeRMC+0x468>)
 800162e:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <decodeRMC+0x45c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <decodeRMC+0x46c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4413      	add	r3, r2
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <decodeRMC+0x45c>)
 800163c:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <decodeRMC+0x45c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <decodeRMC+0x464>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <decodeRMC+0x468>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	609a      	str	r2, [r3, #8]

	return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3740      	adds	r7, #64	; 0x40
 800165c:	46bd      	mov	sp, r7
 800165e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001662:	bf00      	nop
 8001664:	20000094 	.word	0x20000094
 8001668:	40240000 	.word	0x40240000
 800166c:	68db8bad 	.word	0x68db8bad
 8001670:	200000a0 	.word	0x200000a0
 8001674:	51eb851f 	.word	0x51eb851f
 8001678:	200000a4 	.word	0x200000a4
 800167c:	200000a8 	.word	0x200000a8
 8001680:	200000ac 	.word	0x200000ac

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f000 fbb8 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168c:	f000 f836 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 f89a 	bl	80017c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001694:	f000 f86e 	bl	8001774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init();
 8001698:	f000 f97a 	bl	8001990 <Ringbuf_init>
  HAL_Delay(500);
 800169c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a0:	f000 fc0e 	bl	8001ec0 <HAL_Delay>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Wait_for("GGA") == 1)
 80016a4:	480e      	ldr	r0, [pc, #56]	; (80016e0 <main+0x5c>)
 80016a6:	f000 fa9d 	bl	8001be4 <Wait_for>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <main+0x3c>
	  {
		  Copy_upto("*", GGA);
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <main+0x60>)
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <main+0x64>)
 80016b4:	f000 fa16 	bl	8001ae4 <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <main+0x68>)
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <main+0x60>)
 80016bc:	f7ff fa0c 	bl	8000ad8 <decodeGGA>
	  }

	  if(Wait_for("RMC") == 1)
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <main+0x6c>)
 80016c2:	f000 fa8f 	bl	8001be4 <Wait_for>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d1eb      	bne.n	80016a4 <main+0x20>
	  {
	  	Copy_upto("*", RMC);
 80016cc:	4909      	ldr	r1, [pc, #36]	; (80016f4 <main+0x70>)
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <main+0x64>)
 80016d0:	f000 fa08 	bl	8001ae4 <Copy_upto>
	  	decodeRMC(RMC, &gpsData.rmcstruct);
 80016d4:	4908      	ldr	r1, [pc, #32]	; (80016f8 <main+0x74>)
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <main+0x70>)
 80016d8:	f7ff fd9c 	bl	8001214 <decodeRMC>
	  if(Wait_for("GGA") == 1)
 80016dc:	e7e2      	b.n	80016a4 <main+0x20>
 80016de:	bf00      	nop
 80016e0:	08003ee0 	.word	0x08003ee0
 80016e4:	20000524 	.word	0x20000524
 80016e8:	08003ee4 	.word	0x08003ee4
 80016ec:	20000588 	.word	0x20000588
 80016f0:	08003ee8 	.word	0x08003ee8
 80016f4:	200004c0 	.word	0x200004c0
 80016f8:	200005b4 	.word	0x200005b4

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	; 0x40
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	2228      	movs	r2, #40	; 0x28
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fbb2 	bl	8002e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001726:	2310      	movs	r3, #16
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fe7a 	bl	800242c <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800173e:	f000 f859 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f001 f8e6 	bl	800292c <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001766:	f000 f845 	bl	80017f4 <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3740      	adds	r7, #64	; 0x40
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_USART2_UART_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001780:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017ac:	f001 fa58 	bl	8002c60 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 f81d 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200005cc 	.word	0x200005cc
 80017c4:	40004400 	.word	0x40004400

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_GPIO_Init+0x28>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <MX_GPIO_Init+0x28>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <MX_GPIO_Init+0x28>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_MspInit+0x5c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x5c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x5c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_MspInit+0x60>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_MspInit+0x60>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <HAL_UART_MspInit+0x98>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d137      	bne.n	80018f4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_UART_MspInit+0x9c>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_UART_MspInit+0x9c>)
 800188a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188e:	61d3      	str	r3, [r2, #28]
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_UART_MspInit+0x9c>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_UART_MspInit+0x9c>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_UART_MspInit+0x9c>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_UART_MspInit+0x9c>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	480f      	ldr	r0, [pc, #60]	; (8001904 <HAL_UART_MspInit+0xa0>)
 80018c8:	f000 fc2c 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018cc:	2308      	movs	r3, #8
 80018ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <HAL_UART_MspInit+0xa0>)
 80018e0:	f000 fc20 	bl	8002124 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2026      	movs	r0, #38	; 0x26
 80018ea:	f000 fbe4 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ee:	2026      	movs	r0, #38	; 0x26
 80018f0:	f000 fbfd 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40004400 	.word	0x40004400
 8001900:	40021000 	.word	0x40021000
 8001904:	40010800 	.word	0x40010800

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout > 0) timeout --;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SysTick_Handler+0x20>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <SysTick_Handler+0x18>
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <SysTick_Handler+0x20>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <SysTick_Handler+0x20>)
 8001962:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 fa90 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000618 	.word	0x20000618

08001970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <USART2_IRQHandler+0x10>)
 8001976:	f000 f9bd 	bl	8001cf4 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200005cc 	.word	0x200005cc

08001984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <Ringbuf_init+0x38>)
 8001996:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <Ringbuf_init+0x3c>)
 8001998:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <Ringbuf_init+0x40>)
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <Ringbuf_init+0x44>)
 800199e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <Ringbuf_init+0x48>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <Ringbuf_init+0x48>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <Ringbuf_init+0x48>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <Ringbuf_init+0x48>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	60da      	str	r2, [r3, #12]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000614 	.word	0x20000614
 80019cc:	200000b0 	.word	0x200000b0
 80019d0:	20000610 	.word	0x20000610
 80019d4:	200002b8 	.word	0x200002b8
 80019d8:	200005cc 	.word	0x200005cc

080019dc <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d009      	beq.n	8001a16 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	79f9      	ldrb	r1, [r7, #7]
 8001a0c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <Uart_read+0x54>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <Uart_read+0x54>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d102      	bne.n	8001a40 <Uart_read+0x20>
  {
    return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e013      	b.n	8001a68 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <Uart_read+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <Uart_read+0x54>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <Uart_read+0x54>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <Uart_read+0x54>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000614 	.word	0x20000614

08001a78 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <IsDataAvailable+0x30>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <IsDataAvailable+0x30>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000614 	.word	0x20000614

08001aac <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <Uart_peek+0x34>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <Uart_peek+0x34>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d102      	bne.n	8001aca <Uart_peek+0x1e>
  {
    return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	e006      	b.n	8001ad8 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <Uart_peek+0x34>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <Uart_peek+0x34>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000614 	.word	0x20000614

08001ae4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fb2c 	bl	8000150 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001b00:	e01e      	b.n	8001b40 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <Copy_upto+0xf8>)
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <Copy_upto+0xf8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6838      	ldr	r0, [r7, #0]
 8001b12:	4403      	add	r3, r0
 8001b14:	5c8a      	ldrb	r2, [r1, r2]
 8001b16:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <Copy_upto+0xf8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <Copy_upto+0xf8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	3301      	adds	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001b34:	bf00      	nop
 8001b36:	f7ff ff9f 	bl	8001a78 <IsDataAvailable>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0fa      	beq.n	8001b36 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001b40:	f7ff ffb4 	bl	8001aac <Uart_peek>
 8001b44:	4601      	mov	r1, r0
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	4299      	cmp	r1, r3
 8001b50:	d1d7      	bne.n	8001b02 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001b52:	e027      	b.n	8001ba4 <Copy_upto+0xc0>
	{
		so_far++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001b5a:	f7ff ff61 	bl	8001a20 <Uart_read>
 8001b5e:	4601      	mov	r1, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	613a      	str	r2, [r7, #16]
 8001b66:	461a      	mov	r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d101      	bne.n	8001b7c <Copy_upto+0x98>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e02a      	b.n	8001bd2 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <Copy_upto+0xfc>)
 8001b7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b82:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001b84:	bf00      	nop
 8001b86:	f7ff ff77 	bl	8001a78 <IsDataAvailable>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d103      	bne.n	8001b98 <Copy_upto+0xb4>
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <Copy_upto+0xfc>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f6      	bne.n	8001b86 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <Copy_upto+0xfc>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <Copy_upto+0xc0>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e016      	b.n	8001bd2 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8001ba4:	f7ff ff82 	bl	8001aac <Uart_peek>
 8001ba8:	4601      	mov	r1, r0
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4299      	cmp	r1, r3
 8001bb4:	d0ce      	beq.n	8001b54 <Copy_upto+0x70>
	}

	if (so_far != len)
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d002      	beq.n	8001bc4 <Copy_upto+0xe0>
	{
		so_far = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
		goto again;
 8001bc2:	e79d      	b.n	8001b00 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d101      	bne.n	8001bd0 <Copy_upto+0xec>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <Copy_upto+0xee>
	else return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000614 	.word	0x20000614
 8001be0:	20000618 	.word	0x20000618

08001be4 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe faad 	bl	8000150 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <Wait_for+0x108>)
 8001bfc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c00:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001c02:	bf00      	nop
 8001c04:	f7ff ff38 	bl	8001a78 <IsDataAvailable>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <Wait_for+0x32>
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <Wait_for+0x108>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f6      	bne.n	8001c04 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001c16:	4b35      	ldr	r3, [pc, #212]	; (8001cec <Wait_for+0x108>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d119      	bne.n	8001c52 <Wait_for+0x6e>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e060      	b.n	8001ce4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <Wait_for+0x10c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <Wait_for+0x10c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d00b      	beq.n	8001c4e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <Wait_for+0x10c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <Wait_for+0x10c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c4c:	e001      	b.n	8001c52 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e048      	b.n	8001ce4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001c52:	f7ff ff2b 	bl	8001aac <Uart_peek>
 8001c56:	4601      	mov	r1, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4299      	cmp	r1, r3
 8001c62:	d1de      	bne.n	8001c22 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001c64:	e027      	b.n	8001cb6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <Wait_for+0x10c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <Wait_for+0x10c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d101      	bne.n	8001c8e <Wait_for+0xaa>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e02a      	b.n	8001ce4 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <Wait_for+0x108>)
 8001c90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c94:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001c96:	bf00      	nop
 8001c98:	f7ff feee 	bl	8001a78 <IsDataAvailable>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <Wait_for+0xc6>
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <Wait_for+0x108>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f6      	bne.n	8001c98 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <Wait_for+0x108>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <Wait_for+0xd2>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e016      	b.n	8001ce4 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001cb6:	f7ff fef9 	bl	8001aac <Uart_peek>
 8001cba:	4601      	mov	r1, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4299      	cmp	r1, r3
 8001cc6:	d0ce      	beq.n	8001c66 <Wait_for+0x82>
	}

	if (so_far != len)
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d002      	beq.n	8001cd6 <Wait_for+0xf2>
	{
		so_far = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
		goto again;
 8001cd4:	e791      	b.n	8001bfa <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d101      	bne.n	8001ce2 <Wait_for+0xfe>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <Wait_for+0x100>
	else return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000618 	.word	0x20000618
 8001cf0:	20000614 	.word	0x20000614

08001cf4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d013      	beq.n	8001d3e <Uart_isr+0x4a>
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <Uart_isr+0xb4>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fe50 	bl	80019dc <store_char>
        return;
 8001d3c:	e031      	b.n	8001da2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d02c      	beq.n	8001da2 <Uart_isr+0xae>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d027      	beq.n	8001da2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <Uart_isr+0xb8>)
 8001d54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <Uart_isr+0xb8>)
 8001d5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d108      	bne.n	8001d74 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d70:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001d72:	e015      	b.n	8001da0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <Uart_isr+0xb8>)
 8001d76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <Uart_isr+0xb8>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <Uart_isr+0xb8>)
 8001d82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d86:	3301      	adds	r3, #1
 8001d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <Uart_isr+0xb8>)
 8001d8e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	7bba      	ldrb	r2, [r7, #14]
 8001d9e:	605a      	str	r2, [r3, #4]
    	return;
 8001da0:	bf00      	nop
    }
}
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000614 	.word	0x20000614
 8001dac:	200002b8 	.word	0x200002b8

08001db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dd6:	f7ff fdd5 	bl	8001984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f001 f827 	bl	8002e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dde:	f7ff fc51 	bl	8001684 <main>
  bx lr
 8001de2:	4770      	bx	lr
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001dec:	08004060 	.word	0x08004060
  ldr r2, =_sbss
 8001df0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001df4:	20000620 	.word	0x20000620

08001df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC1_2_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x28>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x28>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f947 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fcf2 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f95f 	bl	800210a <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f000 f927 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000004 	.word	0x20000004
 8001e80:	2000000c 	.word	0x2000000c
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	2000061c 	.word	0x2000061c

08001eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_GetTick+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	2000061c 	.word	0x2000061c

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffe0 	bl	8001eac <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000000c 	.word	0x2000000c

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <__NVIC_EnableIRQ+0x34>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff90 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff2d 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff42 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff35 	bl	8001f6c <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b08b      	sub	sp, #44	; 0x2c
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	e169      	b.n	800240c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002138:	2201      	movs	r2, #1
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	429a      	cmp	r2, r3
 8002152:	f040 8158 	bne.w	8002406 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a9a      	ldr	r2, [pc, #616]	; (80023c4 <HAL_GPIO_Init+0x2a0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d05e      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002160:	4a98      	ldr	r2, [pc, #608]	; (80023c4 <HAL_GPIO_Init+0x2a0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d875      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 8002166:	4a98      	ldr	r2, [pc, #608]	; (80023c8 <HAL_GPIO_Init+0x2a4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d058      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 800216c:	4a96      	ldr	r2, [pc, #600]	; (80023c8 <HAL_GPIO_Init+0x2a4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d86f      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 8002172:	4a96      	ldr	r2, [pc, #600]	; (80023cc <HAL_GPIO_Init+0x2a8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d052      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002178:	4a94      	ldr	r2, [pc, #592]	; (80023cc <HAL_GPIO_Init+0x2a8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d869      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 800217e:	4a94      	ldr	r2, [pc, #592]	; (80023d0 <HAL_GPIO_Init+0x2ac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d04c      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002184:	4a92      	ldr	r2, [pc, #584]	; (80023d0 <HAL_GPIO_Init+0x2ac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d863      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 800218a:	4a92      	ldr	r2, [pc, #584]	; (80023d4 <HAL_GPIO_Init+0x2b0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d046      	beq.n	800221e <HAL_GPIO_Init+0xfa>
 8002190:	4a90      	ldr	r2, [pc, #576]	; (80023d4 <HAL_GPIO_Init+0x2b0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d85d      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 8002196:	2b12      	cmp	r3, #18
 8002198:	d82a      	bhi.n	80021f0 <HAL_GPIO_Init+0xcc>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d859      	bhi.n	8002252 <HAL_GPIO_Init+0x12e>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <HAL_GPIO_Init+0x80>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	0800221f 	.word	0x0800221f
 80021a8:	080021f9 	.word	0x080021f9
 80021ac:	0800220b 	.word	0x0800220b
 80021b0:	0800224d 	.word	0x0800224d
 80021b4:	08002253 	.word	0x08002253
 80021b8:	08002253 	.word	0x08002253
 80021bc:	08002253 	.word	0x08002253
 80021c0:	08002253 	.word	0x08002253
 80021c4:	08002253 	.word	0x08002253
 80021c8:	08002253 	.word	0x08002253
 80021cc:	08002253 	.word	0x08002253
 80021d0:	08002253 	.word	0x08002253
 80021d4:	08002253 	.word	0x08002253
 80021d8:	08002253 	.word	0x08002253
 80021dc:	08002253 	.word	0x08002253
 80021e0:	08002253 	.word	0x08002253
 80021e4:	08002253 	.word	0x08002253
 80021e8:	08002201 	.word	0x08002201
 80021ec:	08002215 	.word	0x08002215
 80021f0:	4a79      	ldr	r2, [pc, #484]	; (80023d8 <HAL_GPIO_Init+0x2b4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021f6:	e02c      	b.n	8002252 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e029      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	3304      	adds	r3, #4
 8002206:	623b      	str	r3, [r7, #32]
          break;
 8002208:	e024      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	3308      	adds	r3, #8
 8002210:	623b      	str	r3, [r7, #32]
          break;
 8002212:	e01f      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	330c      	adds	r3, #12
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e01a      	b.n	8002254 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002226:	2304      	movs	r3, #4
 8002228:	623b      	str	r3, [r7, #32]
          break;
 800222a:	e013      	b.n	8002254 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002234:	2308      	movs	r3, #8
 8002236:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	611a      	str	r2, [r3, #16]
          break;
 800223e:	e009      	b.n	8002254 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002240:	2308      	movs	r3, #8
 8002242:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	615a      	str	r2, [r3, #20]
          break;
 800224a:	e003      	b.n	8002254 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x130>
          break;
 8002252:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2bff      	cmp	r3, #255	; 0xff
 8002258:	d801      	bhi.n	800225e <HAL_GPIO_Init+0x13a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_Init+0x13e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2bff      	cmp	r3, #255	; 0xff
 8002268:	d802      	bhi.n	8002270 <HAL_GPIO_Init+0x14c>
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x152>
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	3b08      	subs	r3, #8
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	210f      	movs	r1, #15
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	6a39      	ldr	r1, [r7, #32]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80b1 	beq.w	8002406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a4:	4b4d      	ldr	r3, [pc, #308]	; (80023dc <HAL_GPIO_Init+0x2b8>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	; (80023dc <HAL_GPIO_Init+0x2b8>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b4a      	ldr	r3, [pc, #296]	; (80023dc <HAL_GPIO_Init+0x2b8>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022bc:	4a48      	ldr	r2, [pc, #288]	; (80023e0 <HAL_GPIO_Init+0x2bc>)
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a40      	ldr	r2, [pc, #256]	; (80023e4 <HAL_GPIO_Init+0x2c0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d013      	beq.n	8002310 <HAL_GPIO_Init+0x1ec>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a3f      	ldr	r2, [pc, #252]	; (80023e8 <HAL_GPIO_Init+0x2c4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00d      	beq.n	800230c <HAL_GPIO_Init+0x1e8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3e      	ldr	r2, [pc, #248]	; (80023ec <HAL_GPIO_Init+0x2c8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d007      	beq.n	8002308 <HAL_GPIO_Init+0x1e4>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3d      	ldr	r2, [pc, #244]	; (80023f0 <HAL_GPIO_Init+0x2cc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_GPIO_Init+0x1e0>
 8002300:	2303      	movs	r3, #3
 8002302:	e006      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 8002304:	2304      	movs	r3, #4
 8002306:	e004      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 8002308:	2302      	movs	r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 8002310:	2300      	movs	r3, #0
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	f002 0203 	and.w	r2, r2, #3
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	4093      	lsls	r3, r2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002322:	492f      	ldr	r1, [pc, #188]	; (80023e0 <HAL_GPIO_Init+0x2bc>)
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	492c      	ldr	r1, [pc, #176]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234a:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	43db      	mvns	r3, r3
 8002352:	4928      	ldr	r1, [pc, #160]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 8002354:	4013      	ands	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4922      	ldr	r1, [pc, #136]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	43db      	mvns	r3, r3
 800237a:	491e      	ldr	r1, [pc, #120]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 800237c:	4013      	ands	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4918      	ldr	r1, [pc, #96]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4914      	ldr	r1, [pc, #80]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d021      	beq.n	80023f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	490e      	ldr	r1, [pc, #56]	; (80023f4 <HAL_GPIO_Init+0x2d0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60cb      	str	r3, [r1, #12]
 80023c0:	e021      	b.n	8002406 <HAL_GPIO_Init+0x2e2>
 80023c2:	bf00      	nop
 80023c4:	10320000 	.word	0x10320000
 80023c8:	10310000 	.word	0x10310000
 80023cc:	10220000 	.word	0x10220000
 80023d0:	10210000 	.word	0x10210000
 80023d4:	10120000 	.word	0x10120000
 80023d8:	10110000 	.word	0x10110000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40010800 	.word	0x40010800
 80023e8:	40010c00 	.word	0x40010c00
 80023ec:	40011000 	.word	0x40011000
 80023f0:	40011400 	.word	0x40011400
 80023f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_GPIO_Init+0x304>)
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	43db      	mvns	r3, r3
 8002400:	4909      	ldr	r1, [pc, #36]	; (8002428 <HAL_GPIO_Init+0x304>)
 8002402:	4013      	ands	r3, r2
 8002404:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	3301      	adds	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	f47f ae8e 	bne.w	8002138 <HAL_GPIO_Init+0x14>
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	372c      	adds	r7, #44	; 0x2c
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e26c      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8087 	beq.w	800255a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800244c:	4b92      	ldr	r3, [pc, #584]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b04      	cmp	r3, #4
 8002456:	d00c      	beq.n	8002472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002458:	4b8f      	ldr	r3, [pc, #572]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d112      	bne.n	800248a <HAL_RCC_OscConfig+0x5e>
 8002464:	4b8c      	ldr	r3, [pc, #560]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d10b      	bne.n	800248a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002472:	4b89      	ldr	r3, [pc, #548]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d06c      	beq.n	8002558 <HAL_RCC_OscConfig+0x12c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d168      	bne.n	8002558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e246      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x76>
 8002494:	4b80      	ldr	r3, [pc, #512]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7f      	ldr	r2, [pc, #508]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e02e      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x98>
 80024aa:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7a      	ldr	r2, [pc, #488]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b78      	ldr	r3, [pc, #480]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a77      	ldr	r2, [pc, #476]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0xbc>
 80024ce:	4b72      	ldr	r3, [pc, #456]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a71      	ldr	r2, [pc, #452]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b6f      	ldr	r3, [pc, #444]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6e      	ldr	r2, [pc, #440]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024e8:	4b6b      	ldr	r3, [pc, #428]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a6a      	ldr	r2, [pc, #424]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a67      	ldr	r2, [pc, #412]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fcd0 	bl	8001eac <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fccc 	bl	8001eac <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1fa      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xe4>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fcbc 	bl	8001eac <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fcb8 	bl	8001eac <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1e6      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x10c>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002566:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x18c>
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x176>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1ba      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4939      	ldr	r1, [pc, #228]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_RCC_OscConfig+0x270>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7ff fc71 	bl	8001eac <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff fc6d 	bl	8001eac <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e19b      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4927      	ldr	r1, [pc, #156]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_RCC_OscConfig+0x270>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff fc50 	bl	8001eac <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7ff fc4c 	bl	8001eac <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e17a      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03a      	beq.n	80026b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d019      	beq.n	8002676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7ff fc30 	bl	8001eac <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fc2c 	bl	8001eac <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e15a      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800266e:	2001      	movs	r0, #1
 8002670:	f000 fad8 	bl	8002c24 <RCC_Delay>
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267c:	f7ff fc16 	bl	8001eac <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002682:	e00f      	b.n	80026a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff fc12 	bl	8001eac <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d908      	bls.n	80026a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e140      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	42420000 	.word	0x42420000
 80026a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	4b9e      	ldr	r3, [pc, #632]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e9      	bne.n	8002684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80a6 	beq.w	800280a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b97      	ldr	r3, [pc, #604]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b94      	ldr	r3, [pc, #592]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a93      	ldr	r2, [pc, #588]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	61d3      	str	r3, [r2, #28]
 80026da:	4b91      	ldr	r3, [pc, #580]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b8e      	ldr	r3, [pc, #568]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b8b      	ldr	r3, [pc, #556]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a8a      	ldr	r2, [pc, #552]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7ff fbd3 	bl	8001eac <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7ff fbcf 	bl	8001eac <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b64      	cmp	r3, #100	; 0x64
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0fd      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x312>
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a7a      	ldr	r2, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	e02d      	b.n	800279a <HAL_RCC_OscConfig+0x36e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x334>
 8002746:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a75      	ldr	r2, [pc, #468]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a72      	ldr	r2, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6213      	str	r3, [r2, #32]
 800275e:	e01c      	b.n	800279a <HAL_RCC_OscConfig+0x36e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0x356>
 8002768:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a6c      	ldr	r2, [pc, #432]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a69      	ldr	r2, [pc, #420]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x36e>
 8002782:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a66      	ldr	r2, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d015      	beq.n	80027ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7ff fb83 	bl	8001eac <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff fb7f 	bl	8001eac <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e0ab      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	4b57      	ldr	r3, [pc, #348]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ee      	beq.n	80027aa <HAL_RCC_OscConfig+0x37e>
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7ff fb6d 	bl	8001eac <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7ff fb69 	bl	8001eac <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e095      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ee      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fe:	4b48      	ldr	r3, [pc, #288]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a47      	ldr	r2, [pc, #284]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8081 	beq.w	8002916 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002814:	4b42      	ldr	r3, [pc, #264]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b08      	cmp	r3, #8
 800281e:	d061      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d146      	bne.n	80028b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_RCC_OscConfig+0x4fc>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff fb3d 	bl	8001eac <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7ff fb39 	bl	8001eac <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e067      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d108      	bne.n	8002870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	492d      	ldr	r1, [pc, #180]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a19      	ldr	r1, [r3, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	430b      	orrs	r3, r1
 8002882:	4927      	ldr	r1, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x4fc>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7ff fb0d 	bl	8001eac <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7ff fb09 	bl	8001eac <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e037      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x46a>
 80028b4:	e02f      	b.n	8002916 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_RCC_OscConfig+0x4fc>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff faf6 	bl	8001eac <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff faf2 	bl	8001eac <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e020      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x498>
 80028e2:	e018      	b.n	8002916 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e013      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	40007000 	.word	0x40007000
 8002928:	42420060 	.word	0x42420060

0800292c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0d0      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d910      	bls.n	8002970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0207 	bic.w	r2, r3, #7
 8002956:	4965      	ldr	r1, [pc, #404]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0b8      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d040      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d115      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e073      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e06b      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f023 0203 	bic.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4936      	ldr	r1, [pc, #216]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7ff fa46 	bl	8001eac <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f7ff fa42 	bl	8001eac <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e053      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 020c 	and.w	r2, r3, #12
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d1eb      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d210      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 0207 	bic.w	r2, r3, #7
 8002a62:	4922      	ldr	r1, [pc, #136]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e032      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aba:	f000 f821 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	5ccb      	ldrb	r3, [r1, r3]
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1d0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f9a4 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08003efc 	.word	0x08003efc
 8002af8:	20000004 	.word	0x20000004
 8002afc:	20000008 	.word	0x20000008

08002b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	b490      	push	{r4, r7}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b08:	1d3c      	adds	r4, r7, #4
 8002b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b10:	f240 2301 	movw	r3, #513	; 0x201
 8002b14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x40>
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x46>
 8002b3e:	e02d      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b42:	623b      	str	r3, [r7, #32]
      break;
 8002b44:	e02d      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	0c9b      	lsrs	r3, r3, #18
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b52:	4413      	add	r3, r2
 8002b54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c5b      	lsrs	r3, r3, #17
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b72:	4413      	add	r3, r2
 8002b74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7e:	fb02 f203 	mul.w	r2, r2, r3
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	e004      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b90:	fb02 f303 	mul.w	r3, r2, r3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	623b      	str	r3, [r7, #32]
      break;
 8002b9a:	e002      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9e:	623b      	str	r3, [r7, #32]
      break;
 8002ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc90      	pop	{r4, r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	08003eec 	.word	0x08003eec
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	007a1200 	.word	0x007a1200
 8002bbc:	003d0900 	.word	0x003d0900

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd8:	f7ff fff2 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08003f0c 	.word	0x08003f0c

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08003f0c 	.word	0x08003f0c

08002c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <RCC_Delay+0x34>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <RCC_Delay+0x38>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c40:	bf00      	nop
  }
  while (Delay --);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <RCC_Delay+0x1c>
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e03f      	b.n	8002cf2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fdec 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f829 	bl	8002cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d36:	f023 030c 	bic.w	r3, r3, #12
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <UART_SetConfig+0x114>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d64:	f7ff ff4a 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	e002      	b.n	8002d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d6c:	f7ff ff32 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 8002d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009a      	lsls	r2, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <UART_SetConfig+0x118>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	0119      	lsls	r1, r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <UART_SetConfig+0x118>)
 8002daa:	fba3 0302 	umull	r0, r3, r3, r2
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2064      	movs	r0, #100	; 0x64
 8002db2:	fb00 f303 	mul.w	r3, r0, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	3332      	adds	r3, #50	; 0x32
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <UART_SetConfig+0x118>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc8:	4419      	add	r1, r3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <UART_SetConfig+0x118>)
 8002de2:	fba3 0302 	umull	r0, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2064      	movs	r0, #100	; 0x64
 8002dea:	fb00 f303 	mul.w	r3, r0, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	3332      	adds	r3, #50	; 0x32
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <UART_SetConfig+0x118>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	440a      	add	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40013800 	.word	0x40013800
 8002e14:	51eb851f 	.word	0x51eb851f

08002e18 <atoi>:
 8002e18:	220a      	movs	r2, #10
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	f000 b8b8 	b.w	8002f90 <strtol>

08002e20 <__errno>:
 8002e20:	4b01      	ldr	r3, [pc, #4]	; (8002e28 <__errno+0x8>)
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000010 	.word	0x20000010

08002e2c <__libc_init_array>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	2600      	movs	r6, #0
 8002e30:	4d0c      	ldr	r5, [pc, #48]	; (8002e64 <__libc_init_array+0x38>)
 8002e32:	4c0d      	ldr	r4, [pc, #52]	; (8002e68 <__libc_init_array+0x3c>)
 8002e34:	1b64      	subs	r4, r4, r5
 8002e36:	10a4      	asrs	r4, r4, #2
 8002e38:	42a6      	cmp	r6, r4
 8002e3a:	d109      	bne.n	8002e50 <__libc_init_array+0x24>
 8002e3c:	f001 f842 	bl	8003ec4 <_init>
 8002e40:	2600      	movs	r6, #0
 8002e42:	4d0a      	ldr	r5, [pc, #40]	; (8002e6c <__libc_init_array+0x40>)
 8002e44:	4c0a      	ldr	r4, [pc, #40]	; (8002e70 <__libc_init_array+0x44>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	42a6      	cmp	r6, r4
 8002e4c:	d105      	bne.n	8002e5a <__libc_init_array+0x2e>
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
 8002e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e54:	4798      	blx	r3
 8002e56:	3601      	adds	r6, #1
 8002e58:	e7ee      	b.n	8002e38 <__libc_init_array+0xc>
 8002e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5e:	4798      	blx	r3
 8002e60:	3601      	adds	r6, #1
 8002e62:	e7f2      	b.n	8002e4a <__libc_init_array+0x1e>
 8002e64:	08004058 	.word	0x08004058
 8002e68:	08004058 	.word	0x08004058
 8002e6c:	08004058 	.word	0x08004058
 8002e70:	0800405c 	.word	0x0800405c

08002e74 <memset>:
 8002e74:	4603      	mov	r3, r0
 8002e76:	4402      	add	r2, r0
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <memset+0xa>
 8002e7c:	4770      	bx	lr
 8002e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e82:	e7f9      	b.n	8002e78 <memset+0x4>

08002e84 <_strtol_l.isra.0>:
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8a:	4686      	mov	lr, r0
 8002e8c:	d001      	beq.n	8002e92 <_strtol_l.isra.0+0xe>
 8002e8e:	2b24      	cmp	r3, #36	; 0x24
 8002e90:	d906      	bls.n	8002ea0 <_strtol_l.isra.0+0x1c>
 8002e92:	f7ff ffc5 	bl	8002e20 <__errno>
 8002e96:	2316      	movs	r3, #22
 8002e98:	6003      	str	r3, [r0, #0]
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea0:	468c      	mov	ip, r1
 8002ea2:	4e3a      	ldr	r6, [pc, #232]	; (8002f8c <_strtol_l.isra.0+0x108>)
 8002ea4:	4660      	mov	r0, ip
 8002ea6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002eaa:	5da5      	ldrb	r5, [r4, r6]
 8002eac:	f015 0508 	ands.w	r5, r5, #8
 8002eb0:	d1f8      	bne.n	8002ea4 <_strtol_l.isra.0+0x20>
 8002eb2:	2c2d      	cmp	r4, #45	; 0x2d
 8002eb4:	d133      	bne.n	8002f1e <_strtol_l.isra.0+0x9a>
 8002eb6:	f04f 0801 	mov.w	r8, #1
 8002eba:	f89c 4000 	ldrb.w	r4, [ip]
 8002ebe:	f100 0c02 	add.w	ip, r0, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05d      	beq.n	8002f82 <_strtol_l.isra.0+0xfe>
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d10c      	bne.n	8002ee4 <_strtol_l.isra.0+0x60>
 8002eca:	2c30      	cmp	r4, #48	; 0x30
 8002ecc:	d10a      	bne.n	8002ee4 <_strtol_l.isra.0+0x60>
 8002ece:	f89c 0000 	ldrb.w	r0, [ip]
 8002ed2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002ed6:	2858      	cmp	r0, #88	; 0x58
 8002ed8:	d14e      	bne.n	8002f78 <_strtol_l.isra.0+0xf4>
 8002eda:	2310      	movs	r3, #16
 8002edc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8002ee0:	f10c 0c02 	add.w	ip, ip, #2
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8002eea:	3f01      	subs	r7, #1
 8002eec:	fbb7 f9f3 	udiv	r9, r7, r3
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	fb03 7a19 	mls	sl, r3, r9, r7
 8002ef6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8002efa:	2e09      	cmp	r6, #9
 8002efc:	d818      	bhi.n	8002f30 <_strtol_l.isra.0+0xac>
 8002efe:	4634      	mov	r4, r6
 8002f00:	42a3      	cmp	r3, r4
 8002f02:	dd24      	ble.n	8002f4e <_strtol_l.isra.0+0xca>
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	db1f      	blt.n	8002f48 <_strtol_l.isra.0+0xc4>
 8002f08:	4581      	cmp	r9, r0
 8002f0a:	d31d      	bcc.n	8002f48 <_strtol_l.isra.0+0xc4>
 8002f0c:	d101      	bne.n	8002f12 <_strtol_l.isra.0+0x8e>
 8002f0e:	45a2      	cmp	sl, r4
 8002f10:	db1a      	blt.n	8002f48 <_strtol_l.isra.0+0xc4>
 8002f12:	2501      	movs	r5, #1
 8002f14:	fb00 4003 	mla	r0, r0, r3, r4
 8002f18:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002f1c:	e7eb      	b.n	8002ef6 <_strtol_l.isra.0+0x72>
 8002f1e:	2c2b      	cmp	r4, #43	; 0x2b
 8002f20:	bf08      	it	eq
 8002f22:	f89c 4000 	ldrbeq.w	r4, [ip]
 8002f26:	46a8      	mov	r8, r5
 8002f28:	bf08      	it	eq
 8002f2a:	f100 0c02 	addeq.w	ip, r0, #2
 8002f2e:	e7c8      	b.n	8002ec2 <_strtol_l.isra.0+0x3e>
 8002f30:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002f34:	2e19      	cmp	r6, #25
 8002f36:	d801      	bhi.n	8002f3c <_strtol_l.isra.0+0xb8>
 8002f38:	3c37      	subs	r4, #55	; 0x37
 8002f3a:	e7e1      	b.n	8002f00 <_strtol_l.isra.0+0x7c>
 8002f3c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002f40:	2e19      	cmp	r6, #25
 8002f42:	d804      	bhi.n	8002f4e <_strtol_l.isra.0+0xca>
 8002f44:	3c57      	subs	r4, #87	; 0x57
 8002f46:	e7db      	b.n	8002f00 <_strtol_l.isra.0+0x7c>
 8002f48:	f04f 35ff 	mov.w	r5, #4294967295
 8002f4c:	e7e4      	b.n	8002f18 <_strtol_l.isra.0+0x94>
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	da08      	bge.n	8002f64 <_strtol_l.isra.0+0xe0>
 8002f52:	2322      	movs	r3, #34	; 0x22
 8002f54:	4638      	mov	r0, r7
 8002f56:	f8ce 3000 	str.w	r3, [lr]
 8002f5a:	2a00      	cmp	r2, #0
 8002f5c:	d09e      	beq.n	8002e9c <_strtol_l.isra.0+0x18>
 8002f5e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002f62:	e007      	b.n	8002f74 <_strtol_l.isra.0+0xf0>
 8002f64:	f1b8 0f00 	cmp.w	r8, #0
 8002f68:	d000      	beq.n	8002f6c <_strtol_l.isra.0+0xe8>
 8002f6a:	4240      	negs	r0, r0
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	d095      	beq.n	8002e9c <_strtol_l.isra.0+0x18>
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	d1f4      	bne.n	8002f5e <_strtol_l.isra.0+0xda>
 8002f74:	6011      	str	r1, [r2, #0]
 8002f76:	e791      	b.n	8002e9c <_strtol_l.isra.0+0x18>
 8002f78:	2430      	movs	r4, #48	; 0x30
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1b2      	bne.n	8002ee4 <_strtol_l.isra.0+0x60>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e7b0      	b.n	8002ee4 <_strtol_l.isra.0+0x60>
 8002f82:	2c30      	cmp	r4, #48	; 0x30
 8002f84:	d0a3      	beq.n	8002ece <_strtol_l.isra.0+0x4a>
 8002f86:	230a      	movs	r3, #10
 8002f88:	e7ac      	b.n	8002ee4 <_strtol_l.isra.0+0x60>
 8002f8a:	bf00      	nop
 8002f8c:	08003f15 	.word	0x08003f15

08002f90 <strtol>:
 8002f90:	4613      	mov	r3, r2
 8002f92:	460a      	mov	r2, r1
 8002f94:	4601      	mov	r1, r0
 8002f96:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <strtol+0x10>)
 8002f98:	6800      	ldr	r0, [r0, #0]
 8002f9a:	f7ff bf73 	b.w	8002e84 <_strtol_l.isra.0>
 8002f9e:	bf00      	nop
 8002fa0:	20000010 	.word	0x20000010

08002fa4 <pow>:
 8002fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa8:	461f      	mov	r7, r3
 8002faa:	4680      	mov	r8, r0
 8002fac:	4689      	mov	r9, r1
 8002fae:	4616      	mov	r6, r2
 8002fb0:	f000 f8a6 	bl	8003100 <__ieee754_pow>
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <pow+0x148>)
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	d015      	beq.n	8002fee <pow+0x4a>
 8002fc2:	4632      	mov	r2, r6
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	4639      	mov	r1, r7
 8002fca:	f7fd fd1f 	bl	8000a0c <__aeabi_dcmpun>
 8002fce:	b970      	cbnz	r0, 8002fee <pow+0x4a>
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	f7fd fd18 	bl	8000a0c <__aeabi_dcmpun>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2300      	movs	r3, #0
 8002fe0:	b148      	cbz	r0, 8002ff6 <pow+0x52>
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	4639      	mov	r1, r7
 8002fe6:	f7fd fcdf 	bl	80009a8 <__aeabi_dcmpeq>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d17b      	bne.n	80030e6 <pow+0x142>
 8002fee:	4620      	mov	r0, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	f7fd fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 8002ffe:	b1e0      	cbz	r0, 800303a <pow+0x96>
 8003000:	2200      	movs	r2, #0
 8003002:	2300      	movs	r3, #0
 8003004:	4630      	mov	r0, r6
 8003006:	4639      	mov	r1, r7
 8003008:	f7fd fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800300c:	2800      	cmp	r0, #0
 800300e:	d16a      	bne.n	80030e6 <pow+0x142>
 8003010:	4630      	mov	r0, r6
 8003012:	4639      	mov	r1, r7
 8003014:	f000 fe39 	bl	8003c8a <finite>
 8003018:	2800      	cmp	r0, #0
 800301a:	d0e8      	beq.n	8002fee <pow+0x4a>
 800301c:	2200      	movs	r2, #0
 800301e:	2300      	movs	r3, #0
 8003020:	4630      	mov	r0, r6
 8003022:	4639      	mov	r1, r7
 8003024:	f7fd fcca 	bl	80009bc <__aeabi_dcmplt>
 8003028:	2800      	cmp	r0, #0
 800302a:	d0e0      	beq.n	8002fee <pow+0x4a>
 800302c:	f7ff fef8 	bl	8002e20 <__errno>
 8003030:	2321      	movs	r3, #33	; 0x21
 8003032:	2400      	movs	r4, #0
 8003034:	6003      	str	r3, [r0, #0]
 8003036:	4d2e      	ldr	r5, [pc, #184]	; (80030f0 <pow+0x14c>)
 8003038:	e7d9      	b.n	8002fee <pow+0x4a>
 800303a:	4620      	mov	r0, r4
 800303c:	4629      	mov	r1, r5
 800303e:	f000 fe24 	bl	8003c8a <finite>
 8003042:	bba8      	cbnz	r0, 80030b0 <pow+0x10c>
 8003044:	4640      	mov	r0, r8
 8003046:	4649      	mov	r1, r9
 8003048:	f000 fe1f 	bl	8003c8a <finite>
 800304c:	b380      	cbz	r0, 80030b0 <pow+0x10c>
 800304e:	4630      	mov	r0, r6
 8003050:	4639      	mov	r1, r7
 8003052:	f000 fe1a 	bl	8003c8a <finite>
 8003056:	b358      	cbz	r0, 80030b0 <pow+0x10c>
 8003058:	4622      	mov	r2, r4
 800305a:	462b      	mov	r3, r5
 800305c:	4620      	mov	r0, r4
 800305e:	4629      	mov	r1, r5
 8003060:	f7fd fcd4 	bl	8000a0c <__aeabi_dcmpun>
 8003064:	b160      	cbz	r0, 8003080 <pow+0xdc>
 8003066:	f7ff fedb 	bl	8002e20 <__errno>
 800306a:	2321      	movs	r3, #33	; 0x21
 800306c:	2200      	movs	r2, #0
 800306e:	6003      	str	r3, [r0, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fb59 	bl	800072c <__aeabi_ddiv>
 800307a:	4604      	mov	r4, r0
 800307c:	460d      	mov	r5, r1
 800307e:	e7b6      	b.n	8002fee <pow+0x4a>
 8003080:	f7ff fece 	bl	8002e20 <__errno>
 8003084:	2322      	movs	r3, #34	; 0x22
 8003086:	2200      	movs	r2, #0
 8003088:	6003      	str	r3, [r0, #0]
 800308a:	4649      	mov	r1, r9
 800308c:	2300      	movs	r3, #0
 800308e:	4640      	mov	r0, r8
 8003090:	f7fd fc94 	bl	80009bc <__aeabi_dcmplt>
 8003094:	2400      	movs	r4, #0
 8003096:	b148      	cbz	r0, 80030ac <pow+0x108>
 8003098:	4630      	mov	r0, r6
 800309a:	4639      	mov	r1, r7
 800309c:	f000 fe02 	bl	8003ca4 <rint>
 80030a0:	4632      	mov	r2, r6
 80030a2:	463b      	mov	r3, r7
 80030a4:	f7fd fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d0c4      	beq.n	8003036 <pow+0x92>
 80030ac:	4d11      	ldr	r5, [pc, #68]	; (80030f4 <pow+0x150>)
 80030ae:	e79e      	b.n	8002fee <pow+0x4a>
 80030b0:	2200      	movs	r2, #0
 80030b2:	2300      	movs	r3, #0
 80030b4:	4620      	mov	r0, r4
 80030b6:	4629      	mov	r1, r5
 80030b8:	f7fd fc76 	bl	80009a8 <__aeabi_dcmpeq>
 80030bc:	2800      	cmp	r0, #0
 80030be:	d096      	beq.n	8002fee <pow+0x4a>
 80030c0:	4640      	mov	r0, r8
 80030c2:	4649      	mov	r1, r9
 80030c4:	f000 fde1 	bl	8003c8a <finite>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d090      	beq.n	8002fee <pow+0x4a>
 80030cc:	4630      	mov	r0, r6
 80030ce:	4639      	mov	r1, r7
 80030d0:	f000 fddb 	bl	8003c8a <finite>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d08a      	beq.n	8002fee <pow+0x4a>
 80030d8:	f7ff fea2 	bl	8002e20 <__errno>
 80030dc:	2322      	movs	r3, #34	; 0x22
 80030de:	2400      	movs	r4, #0
 80030e0:	2500      	movs	r5, #0
 80030e2:	6003      	str	r3, [r0, #0]
 80030e4:	e783      	b.n	8002fee <pow+0x4a>
 80030e6:	2400      	movs	r4, #0
 80030e8:	4d03      	ldr	r5, [pc, #12]	; (80030f8 <pow+0x154>)
 80030ea:	e780      	b.n	8002fee <pow+0x4a>
 80030ec:	20000074 	.word	0x20000074
 80030f0:	fff00000 	.word	0xfff00000
 80030f4:	7ff00000 	.word	0x7ff00000
 80030f8:	3ff00000 	.word	0x3ff00000
 80030fc:	00000000 	.word	0x00000000

08003100 <__ieee754_pow>:
 8003100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003104:	b093      	sub	sp, #76	; 0x4c
 8003106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800310a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800310e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003112:	ea55 0302 	orrs.w	r3, r5, r2
 8003116:	4607      	mov	r7, r0
 8003118:	4688      	mov	r8, r1
 800311a:	f000 84bf 	beq.w	8003a9c <__ieee754_pow+0x99c>
 800311e:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <__ieee754_pow+0x218>)
 8003120:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003124:	429c      	cmp	r4, r3
 8003126:	4689      	mov	r9, r1
 8003128:	4682      	mov	sl, r0
 800312a:	dc09      	bgt.n	8003140 <__ieee754_pow+0x40>
 800312c:	d103      	bne.n	8003136 <__ieee754_pow+0x36>
 800312e:	b978      	cbnz	r0, 8003150 <__ieee754_pow+0x50>
 8003130:	42a5      	cmp	r5, r4
 8003132:	dd02      	ble.n	800313a <__ieee754_pow+0x3a>
 8003134:	e00c      	b.n	8003150 <__ieee754_pow+0x50>
 8003136:	429d      	cmp	r5, r3
 8003138:	dc02      	bgt.n	8003140 <__ieee754_pow+0x40>
 800313a:	429d      	cmp	r5, r3
 800313c:	d10e      	bne.n	800315c <__ieee754_pow+0x5c>
 800313e:	b16a      	cbz	r2, 800315c <__ieee754_pow+0x5c>
 8003140:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003144:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003148:	ea54 030a 	orrs.w	r3, r4, sl
 800314c:	f000 84a6 	beq.w	8003a9c <__ieee754_pow+0x99c>
 8003150:	4872      	ldr	r0, [pc, #456]	; (800331c <__ieee754_pow+0x21c>)
 8003152:	b013      	add	sp, #76	; 0x4c
 8003154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003158:	f000 bd9e 	b.w	8003c98 <nan>
 800315c:	f1b9 0f00 	cmp.w	r9, #0
 8003160:	da39      	bge.n	80031d6 <__ieee754_pow+0xd6>
 8003162:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <__ieee754_pow+0x220>)
 8003164:	429d      	cmp	r5, r3
 8003166:	dc54      	bgt.n	8003212 <__ieee754_pow+0x112>
 8003168:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800316c:	429d      	cmp	r5, r3
 800316e:	f340 84a6 	ble.w	8003abe <__ieee754_pow+0x9be>
 8003172:	152b      	asrs	r3, r5, #20
 8003174:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003178:	2b14      	cmp	r3, #20
 800317a:	dd0f      	ble.n	800319c <__ieee754_pow+0x9c>
 800317c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003180:	fa22 f103 	lsr.w	r1, r2, r3
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	4293      	cmp	r3, r2
 800318a:	f040 8498 	bne.w	8003abe <__ieee754_pow+0x9be>
 800318e:	f001 0101 	and.w	r1, r1, #1
 8003192:	f1c1 0302 	rsb	r3, r1, #2
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	b182      	cbz	r2, 80031bc <__ieee754_pow+0xbc>
 800319a:	e05e      	b.n	800325a <__ieee754_pow+0x15a>
 800319c:	2a00      	cmp	r2, #0
 800319e:	d15a      	bne.n	8003256 <__ieee754_pow+0x156>
 80031a0:	f1c3 0314 	rsb	r3, r3, #20
 80031a4:	fa45 f103 	asr.w	r1, r5, r3
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	f040 8483 	bne.w	8003ab8 <__ieee754_pow+0x9b8>
 80031b2:	f001 0101 	and.w	r1, r1, #1
 80031b6:	f1c1 0302 	rsb	r3, r1, #2
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4b59      	ldr	r3, [pc, #356]	; (8003324 <__ieee754_pow+0x224>)
 80031be:	429d      	cmp	r5, r3
 80031c0:	d130      	bne.n	8003224 <__ieee754_pow+0x124>
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	f280 8474 	bge.w	8003ab0 <__ieee754_pow+0x9b0>
 80031c8:	463a      	mov	r2, r7
 80031ca:	4643      	mov	r3, r8
 80031cc:	2000      	movs	r0, #0
 80031ce:	4955      	ldr	r1, [pc, #340]	; (8003324 <__ieee754_pow+0x224>)
 80031d0:	f7fd faac 	bl	800072c <__aeabi_ddiv>
 80031d4:	e02f      	b.n	8003236 <__ieee754_pow+0x136>
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2a00      	cmp	r2, #0
 80031dc:	d13d      	bne.n	800325a <__ieee754_pow+0x15a>
 80031de:	4b4e      	ldr	r3, [pc, #312]	; (8003318 <__ieee754_pow+0x218>)
 80031e0:	429d      	cmp	r5, r3
 80031e2:	d1eb      	bne.n	80031bc <__ieee754_pow+0xbc>
 80031e4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80031e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80031ec:	ea53 030a 	orrs.w	r3, r3, sl
 80031f0:	f000 8454 	beq.w	8003a9c <__ieee754_pow+0x99c>
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <__ieee754_pow+0x228>)
 80031f6:	429c      	cmp	r4, r3
 80031f8:	dd0d      	ble.n	8003216 <__ieee754_pow+0x116>
 80031fa:	2e00      	cmp	r6, #0
 80031fc:	f280 8454 	bge.w	8003aa8 <__ieee754_pow+0x9a8>
 8003200:	f04f 0b00 	mov.w	fp, #0
 8003204:	f04f 0c00 	mov.w	ip, #0
 8003208:	4658      	mov	r0, fp
 800320a:	4661      	mov	r1, ip
 800320c:	b013      	add	sp, #76	; 0x4c
 800320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003212:	2302      	movs	r3, #2
 8003214:	e7e0      	b.n	80031d8 <__ieee754_pow+0xd8>
 8003216:	2e00      	cmp	r6, #0
 8003218:	daf2      	bge.n	8003200 <__ieee754_pow+0x100>
 800321a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800321e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003222:	e7f1      	b.n	8003208 <__ieee754_pow+0x108>
 8003224:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003228:	d108      	bne.n	800323c <__ieee754_pow+0x13c>
 800322a:	463a      	mov	r2, r7
 800322c:	4643      	mov	r3, r8
 800322e:	4638      	mov	r0, r7
 8003230:	4641      	mov	r1, r8
 8003232:	f7fd f951 	bl	80004d8 <__aeabi_dmul>
 8003236:	4683      	mov	fp, r0
 8003238:	468c      	mov	ip, r1
 800323a:	e7e5      	b.n	8003208 <__ieee754_pow+0x108>
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <__ieee754_pow+0x22c>)
 800323e:	429e      	cmp	r6, r3
 8003240:	d10b      	bne.n	800325a <__ieee754_pow+0x15a>
 8003242:	f1b9 0f00 	cmp.w	r9, #0
 8003246:	db08      	blt.n	800325a <__ieee754_pow+0x15a>
 8003248:	4638      	mov	r0, r7
 800324a:	4641      	mov	r1, r8
 800324c:	b013      	add	sp, #76	; 0x4c
 800324e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003252:	f000 bc6b 	b.w	8003b2c <__ieee754_sqrt>
 8003256:	2300      	movs	r3, #0
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	4638      	mov	r0, r7
 800325c:	4641      	mov	r1, r8
 800325e:	f000 fd11 	bl	8003c84 <fabs>
 8003262:	4683      	mov	fp, r0
 8003264:	468c      	mov	ip, r1
 8003266:	f1ba 0f00 	cmp.w	sl, #0
 800326a:	d129      	bne.n	80032c0 <__ieee754_pow+0x1c0>
 800326c:	b124      	cbz	r4, 8003278 <__ieee754_pow+0x178>
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <__ieee754_pow+0x224>)
 8003270:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003274:	429a      	cmp	r2, r3
 8003276:	d123      	bne.n	80032c0 <__ieee754_pow+0x1c0>
 8003278:	2e00      	cmp	r6, #0
 800327a:	da07      	bge.n	800328c <__ieee754_pow+0x18c>
 800327c:	465a      	mov	r2, fp
 800327e:	4663      	mov	r3, ip
 8003280:	2000      	movs	r0, #0
 8003282:	4928      	ldr	r1, [pc, #160]	; (8003324 <__ieee754_pow+0x224>)
 8003284:	f7fd fa52 	bl	800072c <__aeabi_ddiv>
 8003288:	4683      	mov	fp, r0
 800328a:	468c      	mov	ip, r1
 800328c:	f1b9 0f00 	cmp.w	r9, #0
 8003290:	daba      	bge.n	8003208 <__ieee754_pow+0x108>
 8003292:	9b00      	ldr	r3, [sp, #0]
 8003294:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003298:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800329c:	4323      	orrs	r3, r4
 800329e:	d108      	bne.n	80032b2 <__ieee754_pow+0x1b2>
 80032a0:	465a      	mov	r2, fp
 80032a2:	4663      	mov	r3, ip
 80032a4:	4658      	mov	r0, fp
 80032a6:	4661      	mov	r1, ip
 80032a8:	f7fc ff5e 	bl	8000168 <__aeabi_dsub>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	e78e      	b.n	80031d0 <__ieee754_pow+0xd0>
 80032b2:	9b00      	ldr	r3, [sp, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d1a7      	bne.n	8003208 <__ieee754_pow+0x108>
 80032b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80032bc:	469c      	mov	ip, r3
 80032be:	e7a3      	b.n	8003208 <__ieee754_pow+0x108>
 80032c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80032c4:	3b01      	subs	r3, #1
 80032c6:	930c      	str	r3, [sp, #48]	; 0x30
 80032c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032ca:	9b00      	ldr	r3, [sp, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	d104      	bne.n	80032da <__ieee754_pow+0x1da>
 80032d0:	463a      	mov	r2, r7
 80032d2:	4643      	mov	r3, r8
 80032d4:	4638      	mov	r0, r7
 80032d6:	4641      	mov	r1, r8
 80032d8:	e7e6      	b.n	80032a8 <__ieee754_pow+0x1a8>
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <__ieee754_pow+0x230>)
 80032dc:	429d      	cmp	r5, r3
 80032de:	f340 80f9 	ble.w	80034d4 <__ieee754_pow+0x3d4>
 80032e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80032e6:	429d      	cmp	r5, r3
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <__ieee754_pow+0x228>)
 80032ea:	dd09      	ble.n	8003300 <__ieee754_pow+0x200>
 80032ec:	429c      	cmp	r4, r3
 80032ee:	dc0c      	bgt.n	800330a <__ieee754_pow+0x20a>
 80032f0:	2e00      	cmp	r6, #0
 80032f2:	da85      	bge.n	8003200 <__ieee754_pow+0x100>
 80032f4:	a306      	add	r3, pc, #24	; (adr r3, 8003310 <__ieee754_pow+0x210>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	e798      	b.n	8003232 <__ieee754_pow+0x132>
 8003300:	429c      	cmp	r4, r3
 8003302:	dbf5      	blt.n	80032f0 <__ieee754_pow+0x1f0>
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <__ieee754_pow+0x224>)
 8003306:	429c      	cmp	r4, r3
 8003308:	dd14      	ble.n	8003334 <__ieee754_pow+0x234>
 800330a:	2e00      	cmp	r6, #0
 800330c:	dcf2      	bgt.n	80032f4 <__ieee754_pow+0x1f4>
 800330e:	e777      	b.n	8003200 <__ieee754_pow+0x100>
 8003310:	8800759c 	.word	0x8800759c
 8003314:	7e37e43c 	.word	0x7e37e43c
 8003318:	7ff00000 	.word	0x7ff00000
 800331c:	08004015 	.word	0x08004015
 8003320:	433fffff 	.word	0x433fffff
 8003324:	3ff00000 	.word	0x3ff00000
 8003328:	3fefffff 	.word	0x3fefffff
 800332c:	3fe00000 	.word	0x3fe00000
 8003330:	41e00000 	.word	0x41e00000
 8003334:	4661      	mov	r1, ip
 8003336:	2200      	movs	r2, #0
 8003338:	4658      	mov	r0, fp
 800333a:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <__ieee754_pow+0x3c0>)
 800333c:	f7fc ff14 	bl	8000168 <__aeabi_dsub>
 8003340:	a355      	add	r3, pc, #340	; (adr r3, 8003498 <__ieee754_pow+0x398>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	4604      	mov	r4, r0
 8003348:	460d      	mov	r5, r1
 800334a:	f7fd f8c5 	bl	80004d8 <__aeabi_dmul>
 800334e:	a354      	add	r3, pc, #336	; (adr r3, 80034a0 <__ieee754_pow+0x3a0>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	4606      	mov	r6, r0
 8003356:	460f      	mov	r7, r1
 8003358:	4620      	mov	r0, r4
 800335a:	4629      	mov	r1, r5
 800335c:	f7fd f8bc 	bl	80004d8 <__aeabi_dmul>
 8003360:	2200      	movs	r2, #0
 8003362:	4682      	mov	sl, r0
 8003364:	468b      	mov	fp, r1
 8003366:	4620      	mov	r0, r4
 8003368:	4629      	mov	r1, r5
 800336a:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <__ieee754_pow+0x3c4>)
 800336c:	f7fd f8b4 	bl	80004d8 <__aeabi_dmul>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	a14c      	add	r1, pc, #304	; (adr r1, 80034a8 <__ieee754_pow+0x3a8>)
 8003376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800337a:	f7fc fef5 	bl	8000168 <__aeabi_dsub>
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	f7fd f8a9 	bl	80004d8 <__aeabi_dmul>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	2000      	movs	r0, #0
 800338c:	494e      	ldr	r1, [pc, #312]	; (80034c8 <__ieee754_pow+0x3c8>)
 800338e:	f7fc feeb 	bl	8000168 <__aeabi_dsub>
 8003392:	4622      	mov	r2, r4
 8003394:	462b      	mov	r3, r5
 8003396:	4680      	mov	r8, r0
 8003398:	4689      	mov	r9, r1
 800339a:	4620      	mov	r0, r4
 800339c:	4629      	mov	r1, r5
 800339e:	f7fd f89b 	bl	80004d8 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4640      	mov	r0, r8
 80033a8:	4649      	mov	r1, r9
 80033aa:	f7fd f895 	bl	80004d8 <__aeabi_dmul>
 80033ae:	a340      	add	r3, pc, #256	; (adr r3, 80034b0 <__ieee754_pow+0x3b0>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f7fd f890 	bl	80004d8 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4650      	mov	r0, sl
 80033be:	4659      	mov	r1, fp
 80033c0:	f7fc fed2 	bl	8000168 <__aeabi_dsub>
 80033c4:	f04f 0a00 	mov.w	sl, #0
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4604      	mov	r4, r0
 80033ce:	460d      	mov	r5, r1
 80033d0:	4630      	mov	r0, r6
 80033d2:	4639      	mov	r1, r7
 80033d4:	f7fc feca 	bl	800016c <__adddf3>
 80033d8:	4632      	mov	r2, r6
 80033da:	463b      	mov	r3, r7
 80033dc:	4650      	mov	r0, sl
 80033de:	468b      	mov	fp, r1
 80033e0:	f7fc fec2 	bl	8000168 <__aeabi_dsub>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fc febc 	bl	8000168 <__aeabi_dsub>
 80033f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80033f4:	9b00      	ldr	r3, [sp, #0]
 80033f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033f8:	3b01      	subs	r3, #1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f04f 0600 	mov.w	r6, #0
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	bf0c      	ite	eq
 8003406:	4b31      	ldreq	r3, [pc, #196]	; (80034cc <__ieee754_pow+0x3cc>)
 8003408:	4b2d      	ldrne	r3, [pc, #180]	; (80034c0 <__ieee754_pow+0x3c0>)
 800340a:	4604      	mov	r4, r0
 800340c:	460d      	mov	r5, r1
 800340e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003412:	e9cd 2300 	strd	r2, r3, [sp]
 8003416:	4632      	mov	r2, r6
 8003418:	463b      	mov	r3, r7
 800341a:	f7fc fea5 	bl	8000168 <__aeabi_dsub>
 800341e:	4652      	mov	r2, sl
 8003420:	465b      	mov	r3, fp
 8003422:	f7fd f859 	bl	80004d8 <__aeabi_dmul>
 8003426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800342a:	4680      	mov	r8, r0
 800342c:	4689      	mov	r9, r1
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fd f851 	bl	80004d8 <__aeabi_dmul>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4640      	mov	r0, r8
 800343c:	4649      	mov	r1, r9
 800343e:	f7fc fe95 	bl	800016c <__adddf3>
 8003442:	4632      	mov	r2, r6
 8003444:	463b      	mov	r3, r7
 8003446:	4680      	mov	r8, r0
 8003448:	4689      	mov	r9, r1
 800344a:	4650      	mov	r0, sl
 800344c:	4659      	mov	r1, fp
 800344e:	f7fd f843 	bl	80004d8 <__aeabi_dmul>
 8003452:	4604      	mov	r4, r0
 8003454:	460d      	mov	r5, r1
 8003456:	460b      	mov	r3, r1
 8003458:	4602      	mov	r2, r0
 800345a:	4649      	mov	r1, r9
 800345c:	4640      	mov	r0, r8
 800345e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003462:	f7fc fe83 	bl	800016c <__adddf3>
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <__ieee754_pow+0x3d0>)
 8003468:	4682      	mov	sl, r0
 800346a:	4299      	cmp	r1, r3
 800346c:	460f      	mov	r7, r1
 800346e:	460e      	mov	r6, r1
 8003470:	f340 82ed 	ble.w	8003a4e <__ieee754_pow+0x94e>
 8003474:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003478:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800347c:	4303      	orrs	r3, r0
 800347e:	f000 81e7 	beq.w	8003850 <__ieee754_pow+0x750>
 8003482:	a30d      	add	r3, pc, #52	; (adr r3, 80034b8 <__ieee754_pow+0x3b8>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800348c:	f7fd f824 	bl	80004d8 <__aeabi_dmul>
 8003490:	a309      	add	r3, pc, #36	; (adr r3, 80034b8 <__ieee754_pow+0x3b8>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	e6cc      	b.n	8003232 <__ieee754_pow+0x132>
 8003498:	60000000 	.word	0x60000000
 800349c:	3ff71547 	.word	0x3ff71547
 80034a0:	f85ddf44 	.word	0xf85ddf44
 80034a4:	3e54ae0b 	.word	0x3e54ae0b
 80034a8:	55555555 	.word	0x55555555
 80034ac:	3fd55555 	.word	0x3fd55555
 80034b0:	652b82fe 	.word	0x652b82fe
 80034b4:	3ff71547 	.word	0x3ff71547
 80034b8:	8800759c 	.word	0x8800759c
 80034bc:	7e37e43c 	.word	0x7e37e43c
 80034c0:	3ff00000 	.word	0x3ff00000
 80034c4:	3fd00000 	.word	0x3fd00000
 80034c8:	3fe00000 	.word	0x3fe00000
 80034cc:	bff00000 	.word	0xbff00000
 80034d0:	408fffff 	.word	0x408fffff
 80034d4:	4bd4      	ldr	r3, [pc, #848]	; (8003828 <__ieee754_pow+0x728>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	ea09 0303 	and.w	r3, r9, r3
 80034dc:	b943      	cbnz	r3, 80034f0 <__ieee754_pow+0x3f0>
 80034de:	4658      	mov	r0, fp
 80034e0:	4661      	mov	r1, ip
 80034e2:	4bd2      	ldr	r3, [pc, #840]	; (800382c <__ieee754_pow+0x72c>)
 80034e4:	f7fc fff8 	bl	80004d8 <__aeabi_dmul>
 80034e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80034ec:	4683      	mov	fp, r0
 80034ee:	460c      	mov	r4, r1
 80034f0:	1523      	asrs	r3, r4, #20
 80034f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80034f6:	4413      	add	r3, r2
 80034f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034fa:	4bcd      	ldr	r3, [pc, #820]	; (8003830 <__ieee754_pow+0x730>)
 80034fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003500:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003504:	429c      	cmp	r4, r3
 8003506:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800350a:	dd08      	ble.n	800351e <__ieee754_pow+0x41e>
 800350c:	4bc9      	ldr	r3, [pc, #804]	; (8003834 <__ieee754_pow+0x734>)
 800350e:	429c      	cmp	r4, r3
 8003510:	f340 819c 	ble.w	800384c <__ieee754_pow+0x74c>
 8003514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003516:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800351a:	3301      	adds	r3, #1
 800351c:	930b      	str	r3, [sp, #44]	; 0x2c
 800351e:	2600      	movs	r6, #0
 8003520:	00f3      	lsls	r3, r6, #3
 8003522:	930d      	str	r3, [sp, #52]	; 0x34
 8003524:	4bc4      	ldr	r3, [pc, #784]	; (8003838 <__ieee754_pow+0x738>)
 8003526:	4658      	mov	r0, fp
 8003528:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800352c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003530:	4629      	mov	r1, r5
 8003532:	461a      	mov	r2, r3
 8003534:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003538:	4623      	mov	r3, r4
 800353a:	f7fc fe15 	bl	8000168 <__aeabi_dsub>
 800353e:	46da      	mov	sl, fp
 8003540:	462b      	mov	r3, r5
 8003542:	4652      	mov	r2, sl
 8003544:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003548:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800354c:	f7fc fe0e 	bl	800016c <__adddf3>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	2000      	movs	r0, #0
 8003556:	49b9      	ldr	r1, [pc, #740]	; (800383c <__ieee754_pow+0x73c>)
 8003558:	f7fd f8e8 	bl	800072c <__aeabi_ddiv>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003564:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003568:	f7fc ffb6 	bl	80004d8 <__aeabi_dmul>
 800356c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003570:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003574:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003578:	2300      	movs	r3, #0
 800357a:	2200      	movs	r2, #0
 800357c:	46ab      	mov	fp, r5
 800357e:	106d      	asrs	r5, r5, #1
 8003580:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003584:	9304      	str	r3, [sp, #16]
 8003586:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800358a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800358e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003592:	4640      	mov	r0, r8
 8003594:	4649      	mov	r1, r9
 8003596:	4614      	mov	r4, r2
 8003598:	461d      	mov	r5, r3
 800359a:	f7fc ff9d 	bl	80004d8 <__aeabi_dmul>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80035a6:	f7fc fddf 	bl	8000168 <__aeabi_dsub>
 80035aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035ae:	4606      	mov	r6, r0
 80035b0:	460f      	mov	r7, r1
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f7fc fdd7 	bl	8000168 <__aeabi_dsub>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4650      	mov	r0, sl
 80035c0:	4659      	mov	r1, fp
 80035c2:	f7fc fdd1 	bl	8000168 <__aeabi_dsub>
 80035c6:	4642      	mov	r2, r8
 80035c8:	464b      	mov	r3, r9
 80035ca:	f7fc ff85 	bl	80004d8 <__aeabi_dmul>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4630      	mov	r0, r6
 80035d4:	4639      	mov	r1, r7
 80035d6:	f7fc fdc7 	bl	8000168 <__aeabi_dsub>
 80035da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80035de:	f7fc ff7b 	bl	80004d8 <__aeabi_dmul>
 80035e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fc ff73 	bl	80004d8 <__aeabi_dmul>
 80035f2:	a37b      	add	r3, pc, #492	; (adr r3, 80037e0 <__ieee754_pow+0x6e0>)
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	4604      	mov	r4, r0
 80035fa:	460d      	mov	r5, r1
 80035fc:	f7fc ff6c 	bl	80004d8 <__aeabi_dmul>
 8003600:	a379      	add	r3, pc, #484	; (adr r3, 80037e8 <__ieee754_pow+0x6e8>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc fdb1 	bl	800016c <__adddf3>
 800360a:	4622      	mov	r2, r4
 800360c:	462b      	mov	r3, r5
 800360e:	f7fc ff63 	bl	80004d8 <__aeabi_dmul>
 8003612:	a377      	add	r3, pc, #476	; (adr r3, 80037f0 <__ieee754_pow+0x6f0>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc fda8 	bl	800016c <__adddf3>
 800361c:	4622      	mov	r2, r4
 800361e:	462b      	mov	r3, r5
 8003620:	f7fc ff5a 	bl	80004d8 <__aeabi_dmul>
 8003624:	a374      	add	r3, pc, #464	; (adr r3, 80037f8 <__ieee754_pow+0x6f8>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fc fd9f 	bl	800016c <__adddf3>
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	f7fc ff51 	bl	80004d8 <__aeabi_dmul>
 8003636:	a372      	add	r3, pc, #456	; (adr r3, 8003800 <__ieee754_pow+0x700>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fc fd96 	bl	800016c <__adddf3>
 8003640:	4622      	mov	r2, r4
 8003642:	462b      	mov	r3, r5
 8003644:	f7fc ff48 	bl	80004d8 <__aeabi_dmul>
 8003648:	a36f      	add	r3, pc, #444	; (adr r3, 8003808 <__ieee754_pow+0x708>)
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f7fc fd8d 	bl	800016c <__adddf3>
 8003652:	4622      	mov	r2, r4
 8003654:	4606      	mov	r6, r0
 8003656:	460f      	mov	r7, r1
 8003658:	462b      	mov	r3, r5
 800365a:	4620      	mov	r0, r4
 800365c:	4629      	mov	r1, r5
 800365e:	f7fc ff3b 	bl	80004d8 <__aeabi_dmul>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4630      	mov	r0, r6
 8003668:	4639      	mov	r1, r7
 800366a:	f7fc ff35 	bl	80004d8 <__aeabi_dmul>
 800366e:	4604      	mov	r4, r0
 8003670:	460d      	mov	r5, r1
 8003672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003676:	4642      	mov	r2, r8
 8003678:	464b      	mov	r3, r9
 800367a:	f7fc fd77 	bl	800016c <__adddf3>
 800367e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003682:	f7fc ff29 	bl	80004d8 <__aeabi_dmul>
 8003686:	4622      	mov	r2, r4
 8003688:	462b      	mov	r3, r5
 800368a:	f7fc fd6f 	bl	800016c <__adddf3>
 800368e:	4642      	mov	r2, r8
 8003690:	4606      	mov	r6, r0
 8003692:	460f      	mov	r7, r1
 8003694:	464b      	mov	r3, r9
 8003696:	4640      	mov	r0, r8
 8003698:	4649      	mov	r1, r9
 800369a:	f7fc ff1d 	bl	80004d8 <__aeabi_dmul>
 800369e:	2200      	movs	r2, #0
 80036a0:	4b67      	ldr	r3, [pc, #412]	; (8003840 <__ieee754_pow+0x740>)
 80036a2:	4682      	mov	sl, r0
 80036a4:	468b      	mov	fp, r1
 80036a6:	f7fc fd61 	bl	800016c <__adddf3>
 80036aa:	4632      	mov	r2, r6
 80036ac:	463b      	mov	r3, r7
 80036ae:	f7fc fd5d 	bl	800016c <__adddf3>
 80036b2:	9c04      	ldr	r4, [sp, #16]
 80036b4:	460d      	mov	r5, r1
 80036b6:	4622      	mov	r2, r4
 80036b8:	460b      	mov	r3, r1
 80036ba:	4640      	mov	r0, r8
 80036bc:	4649      	mov	r1, r9
 80036be:	f7fc ff0b 	bl	80004d8 <__aeabi_dmul>
 80036c2:	2200      	movs	r2, #0
 80036c4:	4680      	mov	r8, r0
 80036c6:	4689      	mov	r9, r1
 80036c8:	4620      	mov	r0, r4
 80036ca:	4629      	mov	r1, r5
 80036cc:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <__ieee754_pow+0x740>)
 80036ce:	f7fc fd4b 	bl	8000168 <__aeabi_dsub>
 80036d2:	4652      	mov	r2, sl
 80036d4:	465b      	mov	r3, fp
 80036d6:	f7fc fd47 	bl	8000168 <__aeabi_dsub>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4630      	mov	r0, r6
 80036e0:	4639      	mov	r1, r7
 80036e2:	f7fc fd41 	bl	8000168 <__aeabi_dsub>
 80036e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036ea:	f7fc fef5 	bl	80004d8 <__aeabi_dmul>
 80036ee:	4622      	mov	r2, r4
 80036f0:	4606      	mov	r6, r0
 80036f2:	460f      	mov	r7, r1
 80036f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80036f8:	462b      	mov	r3, r5
 80036fa:	f7fc feed 	bl	80004d8 <__aeabi_dmul>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4630      	mov	r0, r6
 8003704:	4639      	mov	r1, r7
 8003706:	f7fc fd31 	bl	800016c <__adddf3>
 800370a:	4606      	mov	r6, r0
 800370c:	460f      	mov	r7, r1
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fc fd29 	bl	800016c <__adddf3>
 800371a:	a33d      	add	r3, pc, #244	; (adr r3, 8003810 <__ieee754_pow+0x710>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	9c04      	ldr	r4, [sp, #16]
 8003722:	460d      	mov	r5, r1
 8003724:	4620      	mov	r0, r4
 8003726:	f7fc fed7 	bl	80004d8 <__aeabi_dmul>
 800372a:	4642      	mov	r2, r8
 800372c:	464b      	mov	r3, r9
 800372e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003732:	4620      	mov	r0, r4
 8003734:	4629      	mov	r1, r5
 8003736:	f7fc fd17 	bl	8000168 <__aeabi_dsub>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4630      	mov	r0, r6
 8003740:	4639      	mov	r1, r7
 8003742:	f7fc fd11 	bl	8000168 <__aeabi_dsub>
 8003746:	a334      	add	r3, pc, #208	; (adr r3, 8003818 <__ieee754_pow+0x718>)
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f7fc fec4 	bl	80004d8 <__aeabi_dmul>
 8003750:	a333      	add	r3, pc, #204	; (adr r3, 8003820 <__ieee754_pow+0x720>)
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	4606      	mov	r6, r0
 8003758:	460f      	mov	r7, r1
 800375a:	4620      	mov	r0, r4
 800375c:	4629      	mov	r1, r5
 800375e:	f7fc febb 	bl	80004d8 <__aeabi_dmul>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4630      	mov	r0, r6
 8003768:	4639      	mov	r1, r7
 800376a:	f7fc fcff 	bl	800016c <__adddf3>
 800376e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <__ieee754_pow+0x744>)
 8003772:	4413      	add	r3, r2
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fc fcf8 	bl	800016c <__adddf3>
 800377c:	4680      	mov	r8, r0
 800377e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003780:	4689      	mov	r9, r1
 8003782:	f7fc fe3f 	bl	8000404 <__aeabi_i2d>
 8003786:	4604      	mov	r4, r0
 8003788:	460d      	mov	r5, r1
 800378a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <__ieee754_pow+0x748>)
 800378e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003792:	4413      	add	r3, r2
 8003794:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	f7fc fce6 	bl	800016c <__adddf3>
 80037a0:	4632      	mov	r2, r6
 80037a2:	463b      	mov	r3, r7
 80037a4:	f7fc fce2 	bl	800016c <__adddf3>
 80037a8:	4622      	mov	r2, r4
 80037aa:	462b      	mov	r3, r5
 80037ac:	f7fc fcde 	bl	800016c <__adddf3>
 80037b0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80037b4:	4622      	mov	r2, r4
 80037b6:	462b      	mov	r3, r5
 80037b8:	4650      	mov	r0, sl
 80037ba:	468b      	mov	fp, r1
 80037bc:	f7fc fcd4 	bl	8000168 <__aeabi_dsub>
 80037c0:	4632      	mov	r2, r6
 80037c2:	463b      	mov	r3, r7
 80037c4:	f7fc fcd0 	bl	8000168 <__aeabi_dsub>
 80037c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037cc:	f7fc fccc 	bl	8000168 <__aeabi_dsub>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4640      	mov	r0, r8
 80037d6:	4649      	mov	r1, r9
 80037d8:	e608      	b.n	80033ec <__ieee754_pow+0x2ec>
 80037da:	bf00      	nop
 80037dc:	f3af 8000 	nop.w
 80037e0:	4a454eef 	.word	0x4a454eef
 80037e4:	3fca7e28 	.word	0x3fca7e28
 80037e8:	93c9db65 	.word	0x93c9db65
 80037ec:	3fcd864a 	.word	0x3fcd864a
 80037f0:	a91d4101 	.word	0xa91d4101
 80037f4:	3fd17460 	.word	0x3fd17460
 80037f8:	518f264d 	.word	0x518f264d
 80037fc:	3fd55555 	.word	0x3fd55555
 8003800:	db6fabff 	.word	0xdb6fabff
 8003804:	3fdb6db6 	.word	0x3fdb6db6
 8003808:	33333303 	.word	0x33333303
 800380c:	3fe33333 	.word	0x3fe33333
 8003810:	e0000000 	.word	0xe0000000
 8003814:	3feec709 	.word	0x3feec709
 8003818:	dc3a03fd 	.word	0xdc3a03fd
 800381c:	3feec709 	.word	0x3feec709
 8003820:	145b01f5 	.word	0x145b01f5
 8003824:	be3e2fe0 	.word	0xbe3e2fe0
 8003828:	7ff00000 	.word	0x7ff00000
 800382c:	43400000 	.word	0x43400000
 8003830:	0003988e 	.word	0x0003988e
 8003834:	000bb679 	.word	0x000bb679
 8003838:	08004018 	.word	0x08004018
 800383c:	3ff00000 	.word	0x3ff00000
 8003840:	40080000 	.word	0x40080000
 8003844:	08004038 	.word	0x08004038
 8003848:	08004028 	.word	0x08004028
 800384c:	2601      	movs	r6, #1
 800384e:	e667      	b.n	8003520 <__ieee754_pow+0x420>
 8003850:	a39d      	add	r3, pc, #628	; (adr r3, 8003ac8 <__ieee754_pow+0x9c8>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	4640      	mov	r0, r8
 8003858:	4649      	mov	r1, r9
 800385a:	f7fc fc87 	bl	800016c <__adddf3>
 800385e:	4622      	mov	r2, r4
 8003860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003864:	462b      	mov	r3, r5
 8003866:	4650      	mov	r0, sl
 8003868:	4639      	mov	r1, r7
 800386a:	f7fc fc7d 	bl	8000168 <__aeabi_dsub>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003876:	f7fd f8bf 	bl	80009f8 <__aeabi_dcmpgt>
 800387a:	2800      	cmp	r0, #0
 800387c:	f47f ae01 	bne.w	8003482 <__ieee754_pow+0x382>
 8003880:	4aa5      	ldr	r2, [pc, #660]	; (8003b18 <__ieee754_pow+0xa18>)
 8003882:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003886:	4293      	cmp	r3, r2
 8003888:	f340 8103 	ble.w	8003a92 <__ieee754_pow+0x992>
 800388c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003890:	2000      	movs	r0, #0
 8003892:	151b      	asrs	r3, r3, #20
 8003894:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003898:	fa4a f303 	asr.w	r3, sl, r3
 800389c:	4433      	add	r3, r6
 800389e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80038a2:	4f9e      	ldr	r7, [pc, #632]	; (8003b1c <__ieee754_pow+0xa1c>)
 80038a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80038a8:	4117      	asrs	r7, r2
 80038aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80038ae:	ea23 0107 	bic.w	r1, r3, r7
 80038b2:	f1c2 0214 	rsb	r2, r2, #20
 80038b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80038ba:	460b      	mov	r3, r1
 80038bc:	fa4a fa02 	asr.w	sl, sl, r2
 80038c0:	2e00      	cmp	r6, #0
 80038c2:	4602      	mov	r2, r0
 80038c4:	4629      	mov	r1, r5
 80038c6:	4620      	mov	r0, r4
 80038c8:	bfb8      	it	lt
 80038ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80038ce:	f7fc fc4b 	bl	8000168 <__aeabi_dsub>
 80038d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038da:	2400      	movs	r4, #0
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	f7fc fc44 	bl	800016c <__adddf3>
 80038e4:	a37a      	add	r3, pc, #488	; (adr r3, 8003ad0 <__ieee754_pow+0x9d0>)
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	4620      	mov	r0, r4
 80038ec:	460d      	mov	r5, r1
 80038ee:	f7fc fdf3 	bl	80004d8 <__aeabi_dmul>
 80038f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038f6:	4606      	mov	r6, r0
 80038f8:	460f      	mov	r7, r1
 80038fa:	4620      	mov	r0, r4
 80038fc:	4629      	mov	r1, r5
 80038fe:	f7fc fc33 	bl	8000168 <__aeabi_dsub>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4640      	mov	r0, r8
 8003908:	4649      	mov	r1, r9
 800390a:	f7fc fc2d 	bl	8000168 <__aeabi_dsub>
 800390e:	a372      	add	r3, pc, #456	; (adr r3, 8003ad8 <__ieee754_pow+0x9d8>)
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f7fc fde0 	bl	80004d8 <__aeabi_dmul>
 8003918:	a371      	add	r3, pc, #452	; (adr r3, 8003ae0 <__ieee754_pow+0x9e0>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	4680      	mov	r8, r0
 8003920:	4689      	mov	r9, r1
 8003922:	4620      	mov	r0, r4
 8003924:	4629      	mov	r1, r5
 8003926:	f7fc fdd7 	bl	80004d8 <__aeabi_dmul>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4640      	mov	r0, r8
 8003930:	4649      	mov	r1, r9
 8003932:	f7fc fc1b 	bl	800016c <__adddf3>
 8003936:	4604      	mov	r4, r0
 8003938:	460d      	mov	r5, r1
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4630      	mov	r0, r6
 8003940:	4639      	mov	r1, r7
 8003942:	f7fc fc13 	bl	800016c <__adddf3>
 8003946:	4632      	mov	r2, r6
 8003948:	463b      	mov	r3, r7
 800394a:	4680      	mov	r8, r0
 800394c:	4689      	mov	r9, r1
 800394e:	f7fc fc0b 	bl	8000168 <__aeabi_dsub>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	f7fc fc05 	bl	8000168 <__aeabi_dsub>
 800395e:	4642      	mov	r2, r8
 8003960:	4606      	mov	r6, r0
 8003962:	460f      	mov	r7, r1
 8003964:	464b      	mov	r3, r9
 8003966:	4640      	mov	r0, r8
 8003968:	4649      	mov	r1, r9
 800396a:	f7fc fdb5 	bl	80004d8 <__aeabi_dmul>
 800396e:	a35e      	add	r3, pc, #376	; (adr r3, 8003ae8 <__ieee754_pow+0x9e8>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	4604      	mov	r4, r0
 8003976:	460d      	mov	r5, r1
 8003978:	f7fc fdae 	bl	80004d8 <__aeabi_dmul>
 800397c:	a35c      	add	r3, pc, #368	; (adr r3, 8003af0 <__ieee754_pow+0x9f0>)
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f7fc fbf1 	bl	8000168 <__aeabi_dsub>
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	f7fc fda5 	bl	80004d8 <__aeabi_dmul>
 800398e:	a35a      	add	r3, pc, #360	; (adr r3, 8003af8 <__ieee754_pow+0x9f8>)
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f7fc fbea 	bl	800016c <__adddf3>
 8003998:	4622      	mov	r2, r4
 800399a:	462b      	mov	r3, r5
 800399c:	f7fc fd9c 	bl	80004d8 <__aeabi_dmul>
 80039a0:	a357      	add	r3, pc, #348	; (adr r3, 8003b00 <__ieee754_pow+0xa00>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f7fc fbdf 	bl	8000168 <__aeabi_dsub>
 80039aa:	4622      	mov	r2, r4
 80039ac:	462b      	mov	r3, r5
 80039ae:	f7fc fd93 	bl	80004d8 <__aeabi_dmul>
 80039b2:	a355      	add	r3, pc, #340	; (adr r3, 8003b08 <__ieee754_pow+0xa08>)
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f7fc fbd8 	bl	800016c <__adddf3>
 80039bc:	4622      	mov	r2, r4
 80039be:	462b      	mov	r3, r5
 80039c0:	f7fc fd8a 	bl	80004d8 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4640      	mov	r0, r8
 80039ca:	4649      	mov	r1, r9
 80039cc:	f7fc fbcc 	bl	8000168 <__aeabi_dsub>
 80039d0:	4604      	mov	r4, r0
 80039d2:	460d      	mov	r5, r1
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4640      	mov	r0, r8
 80039da:	4649      	mov	r1, r9
 80039dc:	f7fc fd7c 	bl	80004d8 <__aeabi_dmul>
 80039e0:	2200      	movs	r2, #0
 80039e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7fc fbbb 	bl	8000168 <__aeabi_dsub>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039fa:	f7fc fe97 	bl	800072c <__aeabi_ddiv>
 80039fe:	4632      	mov	r2, r6
 8003a00:	4604      	mov	r4, r0
 8003a02:	460d      	mov	r5, r1
 8003a04:	463b      	mov	r3, r7
 8003a06:	4640      	mov	r0, r8
 8003a08:	4649      	mov	r1, r9
 8003a0a:	f7fc fd65 	bl	80004d8 <__aeabi_dmul>
 8003a0e:	4632      	mov	r2, r6
 8003a10:	463b      	mov	r3, r7
 8003a12:	f7fc fbab 	bl	800016c <__adddf3>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f7fc fba3 	bl	8000168 <__aeabi_dsub>
 8003a22:	4642      	mov	r2, r8
 8003a24:	464b      	mov	r3, r9
 8003a26:	f7fc fb9f 	bl	8000168 <__aeabi_dsub>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	2000      	movs	r0, #0
 8003a30:	493b      	ldr	r1, [pc, #236]	; (8003b20 <__ieee754_pow+0xa20>)
 8003a32:	f7fc fb99 	bl	8000168 <__aeabi_dsub>
 8003a36:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003a3a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003a3e:	da2b      	bge.n	8003a98 <__ieee754_pow+0x998>
 8003a40:	4652      	mov	r2, sl
 8003a42:	f000 f9b9 	bl	8003db8 <scalbn>
 8003a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a4a:	f7ff bbf2 	b.w	8003232 <__ieee754_pow+0x132>
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <__ieee754_pow+0xa24>)
 8003a50:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003a54:	429f      	cmp	r7, r3
 8003a56:	f77f af13 	ble.w	8003880 <__ieee754_pow+0x780>
 8003a5a:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <__ieee754_pow+0xa28>)
 8003a5c:	440b      	add	r3, r1
 8003a5e:	4303      	orrs	r3, r0
 8003a60:	d00b      	beq.n	8003a7a <__ieee754_pow+0x97a>
 8003a62:	a32b      	add	r3, pc, #172	; (adr r3, 8003b10 <__ieee754_pow+0xa10>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a6c:	f7fc fd34 	bl	80004d8 <__aeabi_dmul>
 8003a70:	a327      	add	r3, pc, #156	; (adr r3, 8003b10 <__ieee754_pow+0xa10>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f7ff bbdc 	b.w	8003232 <__ieee754_pow+0x132>
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	f7fc fb73 	bl	8000168 <__aeabi_dsub>
 8003a82:	4642      	mov	r2, r8
 8003a84:	464b      	mov	r3, r9
 8003a86:	f7fc ffad 	bl	80009e4 <__aeabi_dcmpge>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	f43f aef8 	beq.w	8003880 <__ieee754_pow+0x780>
 8003a90:	e7e7      	b.n	8003a62 <__ieee754_pow+0x962>
 8003a92:	f04f 0a00 	mov.w	sl, #0
 8003a96:	e71e      	b.n	80038d6 <__ieee754_pow+0x7d6>
 8003a98:	4621      	mov	r1, r4
 8003a9a:	e7d4      	b.n	8003a46 <__ieee754_pow+0x946>
 8003a9c:	f04f 0b00 	mov.w	fp, #0
 8003aa0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8003b20 <__ieee754_pow+0xa20>
 8003aa4:	f7ff bbb0 	b.w	8003208 <__ieee754_pow+0x108>
 8003aa8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003aac:	f7ff bbac 	b.w	8003208 <__ieee754_pow+0x108>
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	f7ff bbbf 	b.w	8003236 <__ieee754_pow+0x136>
 8003ab8:	9200      	str	r2, [sp, #0]
 8003aba:	f7ff bb7f 	b.w	80031bc <__ieee754_pow+0xbc>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f7ff bb69 	b.w	8003196 <__ieee754_pow+0x96>
 8003ac4:	f3af 8000 	nop.w
 8003ac8:	652b82fe 	.word	0x652b82fe
 8003acc:	3c971547 	.word	0x3c971547
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	3fe62e43 	.word	0x3fe62e43
 8003ad8:	fefa39ef 	.word	0xfefa39ef
 8003adc:	3fe62e42 	.word	0x3fe62e42
 8003ae0:	0ca86c39 	.word	0x0ca86c39
 8003ae4:	be205c61 	.word	0xbe205c61
 8003ae8:	72bea4d0 	.word	0x72bea4d0
 8003aec:	3e663769 	.word	0x3e663769
 8003af0:	c5d26bf1 	.word	0xc5d26bf1
 8003af4:	3ebbbd41 	.word	0x3ebbbd41
 8003af8:	af25de2c 	.word	0xaf25de2c
 8003afc:	3f11566a 	.word	0x3f11566a
 8003b00:	16bebd93 	.word	0x16bebd93
 8003b04:	3f66c16c 	.word	0x3f66c16c
 8003b08:	5555553e 	.word	0x5555553e
 8003b0c:	3fc55555 	.word	0x3fc55555
 8003b10:	c2f8f359 	.word	0xc2f8f359
 8003b14:	01a56e1f 	.word	0x01a56e1f
 8003b18:	3fe00000 	.word	0x3fe00000
 8003b1c:	000fffff 	.word	0x000fffff
 8003b20:	3ff00000 	.word	0x3ff00000
 8003b24:	4090cbff 	.word	0x4090cbff
 8003b28:	3f6f3400 	.word	0x3f6f3400

08003b2c <__ieee754_sqrt>:
 8003b2c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003c80 <__ieee754_sqrt+0x154>
 8003b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b34:	ea3c 0c01 	bics.w	ip, ip, r1
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	460a      	mov	r2, r1
 8003b40:	4607      	mov	r7, r0
 8003b42:	4604      	mov	r4, r0
 8003b44:	d10e      	bne.n	8003b64 <__ieee754_sqrt+0x38>
 8003b46:	4602      	mov	r2, r0
 8003b48:	f7fc fcc6 	bl	80004d8 <__aeabi_dmul>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4630      	mov	r0, r6
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7fc fb0a 	bl	800016c <__adddf3>
 8003b58:	4606      	mov	r6, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	4629      	mov	r1, r5
 8003b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b64:	2900      	cmp	r1, #0
 8003b66:	dc0d      	bgt.n	8003b84 <__ieee754_sqrt+0x58>
 8003b68:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003b6c:	ea5c 0707 	orrs.w	r7, ip, r7
 8003b70:	d0f4      	beq.n	8003b5c <__ieee754_sqrt+0x30>
 8003b72:	b139      	cbz	r1, 8003b84 <__ieee754_sqrt+0x58>
 8003b74:	4602      	mov	r2, r0
 8003b76:	f7fc faf7 	bl	8000168 <__aeabi_dsub>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	f7fc fdd5 	bl	800072c <__aeabi_ddiv>
 8003b82:	e7e9      	b.n	8003b58 <__ieee754_sqrt+0x2c>
 8003b84:	1512      	asrs	r2, r2, #20
 8003b86:	d074      	beq.n	8003c72 <__ieee754_sqrt+0x146>
 8003b88:	2000      	movs	r0, #0
 8003b8a:	07d5      	lsls	r5, r2, #31
 8003b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b90:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8003b94:	bf5e      	ittt	pl
 8003b96:	0fe3      	lsrpl	r3, r4, #31
 8003b98:	0064      	lslpl	r4, r4, #1
 8003b9a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8003b9e:	0fe3      	lsrs	r3, r4, #31
 8003ba0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003ba4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8003ba8:	2516      	movs	r5, #22
 8003baa:	4601      	mov	r1, r0
 8003bac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003bb0:	1076      	asrs	r6, r6, #1
 8003bb2:	0064      	lsls	r4, r4, #1
 8003bb4:	188f      	adds	r7, r1, r2
 8003bb6:	429f      	cmp	r7, r3
 8003bb8:	bfde      	ittt	le
 8003bba:	1bdb      	suble	r3, r3, r7
 8003bbc:	18b9      	addle	r1, r7, r2
 8003bbe:	1880      	addle	r0, r0, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	3d01      	subs	r5, #1
 8003bc4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003bc8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003bcc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003bd0:	d1f0      	bne.n	8003bb4 <__ieee754_sqrt+0x88>
 8003bd2:	462a      	mov	r2, r5
 8003bd4:	f04f 0e20 	mov.w	lr, #32
 8003bd8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	eb07 0c05 	add.w	ip, r7, r5
 8003be2:	dc02      	bgt.n	8003bea <__ieee754_sqrt+0xbe>
 8003be4:	d113      	bne.n	8003c0e <__ieee754_sqrt+0xe2>
 8003be6:	45a4      	cmp	ip, r4
 8003be8:	d811      	bhi.n	8003c0e <__ieee754_sqrt+0xe2>
 8003bea:	f1bc 0f00 	cmp.w	ip, #0
 8003bee:	eb0c 0507 	add.w	r5, ip, r7
 8003bf2:	da43      	bge.n	8003c7c <__ieee754_sqrt+0x150>
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	db41      	blt.n	8003c7c <__ieee754_sqrt+0x150>
 8003bf8:	f101 0801 	add.w	r8, r1, #1
 8003bfc:	1a5b      	subs	r3, r3, r1
 8003bfe:	4641      	mov	r1, r8
 8003c00:	45a4      	cmp	ip, r4
 8003c02:	bf88      	it	hi
 8003c04:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003c08:	eba4 040c 	sub.w	r4, r4, ip
 8003c0c:	443a      	add	r2, r7
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	f1be 0e01 	subs.w	lr, lr, #1
 8003c14:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003c18:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8003c1c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003c20:	d1dc      	bne.n	8003bdc <__ieee754_sqrt+0xb0>
 8003c22:	4323      	orrs	r3, r4
 8003c24:	d006      	beq.n	8003c34 <__ieee754_sqrt+0x108>
 8003c26:	1c54      	adds	r4, r2, #1
 8003c28:	bf0b      	itete	eq
 8003c2a:	4672      	moveq	r2, lr
 8003c2c:	3201      	addne	r2, #1
 8003c2e:	3001      	addeq	r0, #1
 8003c30:	f022 0201 	bicne.w	r2, r2, #1
 8003c34:	1043      	asrs	r3, r0, #1
 8003c36:	07c1      	lsls	r1, r0, #31
 8003c38:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003c3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003c40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003c44:	bf48      	it	mi
 8003c46:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003c50:	e782      	b.n	8003b58 <__ieee754_sqrt+0x2c>
 8003c52:	0ae3      	lsrs	r3, r4, #11
 8003c54:	3915      	subs	r1, #21
 8003c56:	0564      	lsls	r4, r4, #21
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0fa      	beq.n	8003c52 <__ieee754_sqrt+0x126>
 8003c5c:	02de      	lsls	r6, r3, #11
 8003c5e:	d50a      	bpl.n	8003c76 <__ieee754_sqrt+0x14a>
 8003c60:	f1c2 0020 	rsb	r0, r2, #32
 8003c64:	fa24 f000 	lsr.w	r0, r4, r0
 8003c68:	1e55      	subs	r5, r2, #1
 8003c6a:	4094      	lsls	r4, r2
 8003c6c:	4303      	orrs	r3, r0
 8003c6e:	1b4a      	subs	r2, r1, r5
 8003c70:	e78a      	b.n	8003b88 <__ieee754_sqrt+0x5c>
 8003c72:	4611      	mov	r1, r2
 8003c74:	e7f0      	b.n	8003c58 <__ieee754_sqrt+0x12c>
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	3201      	adds	r2, #1
 8003c7a:	e7ef      	b.n	8003c5c <__ieee754_sqrt+0x130>
 8003c7c:	4688      	mov	r8, r1
 8003c7e:	e7bd      	b.n	8003bfc <__ieee754_sqrt+0xd0>
 8003c80:	7ff00000 	.word	0x7ff00000

08003c84 <fabs>:
 8003c84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c88:	4770      	bx	lr

08003c8a <finite>:
 8003c8a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003c8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003c92:	0fc0      	lsrs	r0, r0, #31
 8003c94:	4770      	bx	lr
	...

08003c98 <nan>:
 8003c98:	2000      	movs	r0, #0
 8003c9a:	4901      	ldr	r1, [pc, #4]	; (8003ca0 <nan+0x8>)
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	7ff80000 	.word	0x7ff80000

08003ca4 <rint>:
 8003ca4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8003ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003caa:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8003cae:	2f13      	cmp	r7, #19
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8003cbc:	dc59      	bgt.n	8003d72 <rint+0xce>
 8003cbe:	2f00      	cmp	r7, #0
 8003cc0:	da2a      	bge.n	8003d18 <rint+0x74>
 8003cc2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003cc6:	4301      	orrs	r1, r0
 8003cc8:	d022      	beq.n	8003d10 <rint+0x6c>
 8003cca:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003cce:	4301      	orrs	r1, r0
 8003cd0:	424d      	negs	r5, r1
 8003cd2:	430d      	orrs	r5, r1
 8003cd4:	4936      	ldr	r1, [pc, #216]	; (8003db0 <rint+0x10c>)
 8003cd6:	0c5c      	lsrs	r4, r3, #17
 8003cd8:	0b2d      	lsrs	r5, r5, #12
 8003cda:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8003cde:	0464      	lsls	r4, r4, #17
 8003ce0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003ce4:	ea45 0304 	orr.w	r3, r5, r4
 8003ce8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8003cec:	4620      	mov	r0, r4
 8003cee:	4629      	mov	r1, r5
 8003cf0:	f7fc fa3c 	bl	800016c <__adddf3>
 8003cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8003cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	4622      	mov	r2, r4
 8003d00:	f7fc fa32 	bl	8000168 <__aeabi_dsub>
 8003d04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003d08:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	b003      	add	sp, #12
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d18:	4926      	ldr	r1, [pc, #152]	; (8003db4 <rint+0x110>)
 8003d1a:	4139      	asrs	r1, r7
 8003d1c:	ea03 0001 	and.w	r0, r3, r1
 8003d20:	4310      	orrs	r0, r2
 8003d22:	d0f5      	beq.n	8003d10 <rint+0x6c>
 8003d24:	084b      	lsrs	r3, r1, #1
 8003d26:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8003d2a:	ea52 0501 	orrs.w	r5, r2, r1
 8003d2e:	d00c      	beq.n	8003d4a <rint+0xa6>
 8003d30:	ea24 0303 	bic.w	r3, r4, r3
 8003d34:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003d38:	2f13      	cmp	r7, #19
 8003d3a:	bf0c      	ite	eq
 8003d3c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003d40:	2500      	movne	r5, #0
 8003d42:	fa44 f707 	asr.w	r7, r4, r7
 8003d46:	ea43 0407 	orr.w	r4, r3, r7
 8003d4a:	4919      	ldr	r1, [pc, #100]	; (8003db0 <rint+0x10c>)
 8003d4c:	4623      	mov	r3, r4
 8003d4e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8003d52:	462a      	mov	r2, r5
 8003d54:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	f7fc fa06 	bl	800016c <__adddf3>
 8003d60:	e9cd 0100 	strd	r0, r1, [sp]
 8003d64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d68:	4622      	mov	r2, r4
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	f7fc f9fc 	bl	8000168 <__aeabi_dsub>
 8003d70:	e7cc      	b.n	8003d0c <rint+0x68>
 8003d72:	2f33      	cmp	r7, #51	; 0x33
 8003d74:	dd05      	ble.n	8003d82 <rint+0xde>
 8003d76:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003d7a:	d1c9      	bne.n	8003d10 <rint+0x6c>
 8003d7c:	f7fc f9f6 	bl	800016c <__adddf3>
 8003d80:	e7c4      	b.n	8003d0c <rint+0x68>
 8003d82:	f04f 31ff 	mov.w	r1, #4294967295
 8003d86:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8003d8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8003d8e:	4208      	tst	r0, r1
 8003d90:	d0be      	beq.n	8003d10 <rint+0x6c>
 8003d92:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8003d96:	bf18      	it	ne
 8003d98:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8003d9c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8003da0:	bf1e      	ittt	ne
 8003da2:	ea20 0303 	bicne.w	r3, r0, r3
 8003da6:	fa45 fc0c 	asrne.w	ip, r5, ip
 8003daa:	ea43 050c 	orrne.w	r5, r3, ip
 8003dae:	e7cc      	b.n	8003d4a <rint+0xa6>
 8003db0:	08004048 	.word	0x08004048
 8003db4:	000fffff 	.word	0x000fffff

08003db8 <scalbn>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	4617      	mov	r7, r2
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	b996      	cbnz	r6, 8003dee <scalbn+0x36>
 8003dc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003dcc:	4303      	orrs	r3, r0
 8003dce:	d039      	beq.n	8003e44 <scalbn+0x8c>
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <scalbn+0xf0>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f7fc fb80 	bl	80004d8 <__aeabi_dmul>
 8003dd8:	4b34      	ldr	r3, [pc, #208]	; (8003eac <scalbn+0xf4>)
 8003dda:	4604      	mov	r4, r0
 8003ddc:	429f      	cmp	r7, r3
 8003dde:	460d      	mov	r5, r1
 8003de0:	da0f      	bge.n	8003e02 <scalbn+0x4a>
 8003de2:	a32d      	add	r3, pc, #180	; (adr r3, 8003e98 <scalbn+0xe0>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fb76 	bl	80004d8 <__aeabi_dmul>
 8003dec:	e006      	b.n	8003dfc <scalbn+0x44>
 8003dee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003df2:	4296      	cmp	r6, r2
 8003df4:	d10a      	bne.n	8003e0c <scalbn+0x54>
 8003df6:	4602      	mov	r2, r0
 8003df8:	f7fc f9b8 	bl	800016c <__adddf3>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	e020      	b.n	8003e44 <scalbn+0x8c>
 8003e02:	460b      	mov	r3, r1
 8003e04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003e08:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003e0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003e10:	19b9      	adds	r1, r7, r6
 8003e12:	4291      	cmp	r1, r2
 8003e14:	dd0e      	ble.n	8003e34 <scalbn+0x7c>
 8003e16:	a322      	add	r3, pc, #136	; (adr r3, 8003ea0 <scalbn+0xe8>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003e20:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003e24:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003e28:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003e2c:	4820      	ldr	r0, [pc, #128]	; (8003eb0 <scalbn+0xf8>)
 8003e2e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003e32:	e7d9      	b.n	8003de8 <scalbn+0x30>
 8003e34:	2900      	cmp	r1, #0
 8003e36:	dd08      	ble.n	8003e4a <scalbn+0x92>
 8003e38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003e44:	4620      	mov	r0, r4
 8003e46:	4629      	mov	r1, r5
 8003e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e4a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8003e4e:	da16      	bge.n	8003e7e <scalbn+0xc6>
 8003e50:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003e54:	429f      	cmp	r7, r3
 8003e56:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8003e5a:	dd08      	ble.n	8003e6e <scalbn+0xb6>
 8003e5c:	4c15      	ldr	r4, [pc, #84]	; (8003eb4 <scalbn+0xfc>)
 8003e5e:	4814      	ldr	r0, [pc, #80]	; (8003eb0 <scalbn+0xf8>)
 8003e60:	f363 74df 	bfi	r4, r3, #31, #1
 8003e64:	a30e      	add	r3, pc, #56	; (adr r3, 8003ea0 <scalbn+0xe8>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	e7bc      	b.n	8003de8 <scalbn+0x30>
 8003e6e:	4c12      	ldr	r4, [pc, #72]	; (8003eb8 <scalbn+0x100>)
 8003e70:	4812      	ldr	r0, [pc, #72]	; (8003ebc <scalbn+0x104>)
 8003e72:	f363 74df 	bfi	r4, r3, #31, #1
 8003e76:	a308      	add	r3, pc, #32	; (adr r3, 8003e98 <scalbn+0xe0>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	e7f5      	b.n	8003e6a <scalbn+0xb2>
 8003e7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e82:	3136      	adds	r1, #54	; 0x36
 8003e84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	2200      	movs	r2, #0
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <scalbn+0x108>)
 8003e94:	e7a8      	b.n	8003de8 <scalbn+0x30>
 8003e96:	bf00      	nop
 8003e98:	c2f8f359 	.word	0xc2f8f359
 8003e9c:	01a56e1f 	.word	0x01a56e1f
 8003ea0:	8800759c 	.word	0x8800759c
 8003ea4:	7e37e43c 	.word	0x7e37e43c
 8003ea8:	43500000 	.word	0x43500000
 8003eac:	ffff3cb0 	.word	0xffff3cb0
 8003eb0:	8800759c 	.word	0x8800759c
 8003eb4:	7e37e43c 	.word	0x7e37e43c
 8003eb8:	01a56e1f 	.word	0x01a56e1f
 8003ebc:	c2f8f359 	.word	0xc2f8f359
 8003ec0:	3c900000 	.word	0x3c900000

08003ec4 <_init>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr

08003ed0 <_fini>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr
