
20220425_Encoder_Driver_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003130  08003130  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003130  08003130  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003130  08003130  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000a4  080031dc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080031dc  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae32  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dce  00000000  00000000  0002aeff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002d8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017448  00000000  00000000  0002e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d964  00000000  00000000  00045830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d78  00000000  00000000  00053194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d4  00000000  00000000  000dbf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800309c 	.word	0x0800309c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	0800309c 	.word	0x0800309c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0304 	orr.w	r3, r3, #4
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0304 	and.w	r3, r3, #4
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0308 	and.w	r3, r3, #8
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fbd7 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f835 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f7ff ffd5 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 fb21 	bl	80007e8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80001a6:	f000 f9eb 	bl	8000580 <MX_TIM2_Init>
  MX_TIM4_Init();
 80001aa:	f000 fa3d 	bl	8000628 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ROTARY_Start(&htim2, &htim4, 8000);
 80001ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80001b2:	490f      	ldr	r1, [pc, #60]	; (80001f0 <main+0x60>)
 80001b4:	480f      	ldr	r0, [pc, #60]	; (80001f4 <main+0x64>)
 80001b6:	f000 f867 	bl	8000288 <HAL_ROTARY_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(MSG,"RPM = %d\tCount = %d\tDir = %d\r\n",hrotary.RPM,hrotary.Pulses,hrotary.Dir);
 80001ba:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <main+0x68>)
 80001bc:	881b      	ldrh	r3, [r3, #0]
 80001be:	461a      	mov	r2, r3
 80001c0:	4b0d      	ldr	r3, [pc, #52]	; (80001f8 <main+0x68>)
 80001c2:	885b      	ldrh	r3, [r3, #2]
 80001c4:	4619      	mov	r1, r3
 80001c6:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <main+0x68>)
 80001c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80001cc:	9300      	str	r3, [sp, #0]
 80001ce:	460b      	mov	r3, r1
 80001d0:	490a      	ldr	r1, [pc, #40]	; (80001fc <main+0x6c>)
 80001d2:	480b      	ldr	r0, [pc, #44]	; (8000200 <main+0x70>)
 80001d4:	f002 faf6 	bl	80027c4 <siprintf>
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), HAL_MAX_DELAY);
 80001d8:	f04f 33ff 	mov.w	r3, #4294967295
 80001dc:	2232      	movs	r2, #50	; 0x32
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <main+0x70>)
 80001e0:	4808      	ldr	r0, [pc, #32]	; (8000204 <main+0x74>)
 80001e2:	f002 f944 	bl	800246e <HAL_UART_Transmit>
	  HAL_Delay(200);
 80001e6:	20c8      	movs	r0, #200	; 0xc8
 80001e8:	f000 fc10 	bl	8000a0c <HAL_Delay>
  {
 80001ec:	e7e5      	b.n	80001ba <main+0x2a>
 80001ee:	bf00      	nop
 80001f0:	200001b0 	.word	0x200001b0
 80001f4:	20000168 	.word	0x20000168
 80001f8:	200000c0 	.word	0x200000c0
 80001fc:	080030b4 	.word	0x080030b4
 8000200:	20000000 	.word	0x20000000
 8000204:	200001f8 	.word	0x200001f8

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 facc 	bl	80027b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fe9a 	bl	8000f78 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024a:	f000 f818 	bl	800027e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f908 	bl	800147c <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f804 	bl	800027e <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	; 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000282:	b672      	cpsid	i
}
 8000284:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000286:	e7fe      	b.n	8000286 <Error_Handler+0x8>

08000288 <HAL_ROTARY_Start>:
/*Functions*/

/*This function is to start encoder and update data continuously.*/
/*APB_Timer_Clock is in kHz*/
void HAL_ROTARY_Start(TIM_HandleTypeDef* Encoder,TIM_HandleTypeDef* Timer,uint32_t APB_Timer_Clock)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	Read_Data = ROTARY_READ_DATA_CONT;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <HAL_ROTARY_Start+0x68>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
	frequency = ((APB_Timer_Clock*1000)/Timer->Init.Prescaler)/Timer->Init.Period;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002a0:	fb03 f202 	mul.w	r2, r3, r2
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	4a0f      	ldr	r2, [pc, #60]	; (80002f4 <HAL_ROTARY_Start+0x6c>)
 80002b6:	6013      	str	r3, [r2, #0]
	hencoder = *Encoder;
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <HAL_ROTARY_Start+0x70>)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	4610      	mov	r0, r2
 80002be:	4619      	mov	r1, r3
 80002c0:	2348      	movs	r3, #72	; 0x48
 80002c2:	461a      	mov	r2, r3
 80002c4:	f002 fa68 	bl	8002798 <memcpy>
	htimer = *Timer;
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <HAL_ROTARY_Start+0x74>)
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	4610      	mov	r0, r2
 80002ce:	4619      	mov	r1, r3
 80002d0:	2348      	movs	r3, #72	; 0x48
 80002d2:	461a      	mov	r2, r3
 80002d4:	f002 fa60 	bl	8002798 <memcpy>
	/*Starting the encoder*/
	HAL_TIM_Encoder_Start(Encoder,TIM_CHANNEL_ALL);
 80002d8:	213c      	movs	r1, #60	; 0x3c
 80002da:	68f8      	ldr	r0, [r7, #12]
 80002dc:	f001 fbd8 	bl	8001a90 <HAL_TIM_Encoder_Start>
	/*Starting the timer*/
	HAL_TIM_Base_Start_IT(Timer);
 80002e0:	68b8      	ldr	r0, [r7, #8]
 80002e2:	f001 fab3 	bl	800184c <HAL_TIM_Base_Start_IT>
}
 80002e6:	bf00      	nop
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000158 	.word	0x20000158
 80002f4:	2000015c 	.word	0x2000015c
 80002f8:	200000c8 	.word	0x200000c8
 80002fc:	20000110 	.word	0x20000110

08000300 <HAL_ROTARY_Stop>:
	HAL_TIM_Base_Start_IT(Timer);
}

/*This function is to stop the encoder.*/
void HAL_ROTARY_Stop(TIM_HandleTypeDef* Encoder,TIM_HandleTypeDef* Timer)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	/*Stopping the encoder*/
	HAL_TIM_Encoder_Stop(Encoder,TIM_CHANNEL_ALL);
 800030a:	213c      	movs	r1, #60	; 0x3c
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f001 fc4d 	bl	8001bac <HAL_TIM_Encoder_Stop>
	/*Stopping the timer*/
	HAL_TIM_Base_Stop_IT(Timer);
 8000312:	6838      	ldr	r0, [r7, #0]
 8000314:	f001 faec 	bl	80018f0 <HAL_TIM_Base_Stop_IT>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <HAL_TIM_PeriodElapsedCallback>:

/*This function generates the data from the interrupt of the timer*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	/*Reading the register of the encoder timer*/
	Count2 = hencoder.Instance->CNT;
 8000328:	4b40      	ldr	r3, [pc, #256]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032e:	b21a      	sxth	r2, r3
 8000330:	4b3f      	ldr	r3, [pc, #252]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000332:	801a      	strh	r2, [r3, #0]
	/*Disabling the timer if the data is read once*/
	if (Read_Data == ROTARY_READ_DATA_ONCE)
 8000334:	4b3f      	ldr	r3, [pc, #252]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d107      	bne.n	800034c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_ROTARY_Stop(&hencoder,&htimer);
 800033c:	493e      	ldr	r1, [pc, #248]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800033e:	483b      	ldr	r0, [pc, #236]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000340:	f7ff ffde 	bl	8000300 <HAL_ROTARY_Stop>
		htimer.Instance->CNT = 0x00UL;
 8000344:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2200      	movs	r2, #0
 800034a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/*Checking if the number is negative to detect the direction*/
	if ((Count2 - Count1) < 0)
 800034c:	4b38      	ldr	r3, [pc, #224]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800034e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000352:	461a      	mov	r2, r3
 8000354:	4b39      	ldr	r3, [pc, #228]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	da0f      	bge.n	8000380 <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		hrotary.Pulses = Count1 - Count2;
 8000360:	4b36      	ldr	r3, [pc, #216]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000366:	b29a      	uxth	r2, r3
 8000368:	4b31      	ldr	r3, [pc, #196]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800036a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800036e:	b29b      	uxth	r3, r3
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000376:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_CW;
 8000378:	4b31      	ldr	r3, [pc, #196]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800037a:	22ff      	movs	r2, #255	; 0xff
 800037c:	711a      	strb	r2, [r3, #4]
 800037e:	e028      	b.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0xb2>
	}
	else if ((Count2 - Count1) > 0)
 8000380:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000386:	461a      	mov	r2, r3
 8000388:	4b2c      	ldr	r3, [pc, #176]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800038a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	2b00      	cmp	r3, #0
 8000392:	dd0f      	ble.n	80003b4 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		hrotary.Pulses = Count2 - Count1;
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800039e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003aa:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_CCW;
 80003ac:	4b24      	ldr	r3, [pc, #144]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	711a      	strb	r2, [r3, #4]
 80003b2:	e00e      	b.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0xb2>
	}
	else
	{
		hrotary.Pulses = Count2 - Count1;
 80003b4:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80003b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80003be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003ca:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_STILL;
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	711a      	strb	r2, [r3, #4]
	}
	/*Calculating the RPM*/
	hrotary.RPM = hrotary.Pulses*frequency*60/80;
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003d4:	885b      	ldrh	r3, [r3, #2]
 80003d6:	461a      	mov	r2, r3
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	fb03 f202 	mul.w	r2, r3, r2
 80003e0:	4613      	mov	r3, r2
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b17      	ldr	r3, [pc, #92]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80003ec:	fba3 2302 	umull	r2, r3, r3, r2
 80003f0:	099b      	lsrs	r3, r3, #6
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003f6:	801a      	strh	r2, [r3, #0]
	if (Read_Data == ROTARY_READ_DATA_CONT)
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d105      	bne.n	800040c <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		/*Assigning the register value used earlier to be used as start of the next calculation*/
		Count1 = Count2;
 8000400:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000402:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000408:	801a      	strh	r2, [r3, #0]
		/*Reseting the counters*/
		hencoder.Instance->CNT = 0x00UL;
		Count1 = 0;
	}

}
 800040a:	e00a      	b.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x102>
	else if (Read_Data == ROTARY_READ_DATA_ONCE)
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d106      	bne.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x102>
		hencoder.Instance->CNT = 0x00UL;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	625a      	str	r2, [r3, #36]	; 0x24
		Count1 = 0;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800041e:	2200      	movs	r2, #0
 8000420:	801a      	strh	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000c8 	.word	0x200000c8
 8000430:	20000162 	.word	0x20000162
 8000434:	20000158 	.word	0x20000158
 8000438:	20000110 	.word	0x20000110
 800043c:	20000160 	.word	0x20000160
 8000440:	200000c0 	.word	0x200000c0
 8000444:	2000015c 	.word	0x2000015c
 8000448:	cccccccd 	.word	0xcccccccd

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_MspInit+0x5c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x5c>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_MspInit+0x60>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_MspInit+0x60>)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f6:	f000 fa6d 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <TIM4_IRQHandler+0x10>)
 8000506:	f001 fbe8 	bl	8001cda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200001b0 	.word	0x200001b0

08000514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800051c:	4a14      	ldr	r2, [pc, #80]	; (8000570 <_sbrk+0x5c>)
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <_sbrk+0x60>)
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <_sbrk+0x64>)
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <_sbrk+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <_sbrk+0x64>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	429a      	cmp	r2, r3
 8000542:	d207      	bcs.n	8000554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000544:	f002 f8fe 	bl	8002744 <__errno>
 8000548:	4603      	mov	r3, r0
 800054a:	220c      	movs	r2, #12
 800054c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	e009      	b.n	8000568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <_sbrk+0x64>)
 8000564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20005000 	.word	0x20005000
 8000574:	00000400 	.word	0x00000400
 8000578:	20000164 	.word	0x20000164
 800057c:	20000250 	.word	0x20000250

08000580 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	; 0x30
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2224      	movs	r2, #36	; 0x24
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f910 	bl	80027b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_TIM2_Init+0xa4>)
 800059e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_TIM2_Init+0xa4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_TIM2_Init+0xa4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_TIM2_Init+0xa4>)
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_TIM2_Init+0xa4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_TIM2_Init+0xa4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005c4:	2303      	movs	r3, #3
 80005c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005cc:	2301      	movs	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80005d4:	230f      	movs	r3, #15
 80005d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005dc:	2301      	movs	r3, #1
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80005e4:	230f      	movs	r3, #15
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_TIM2_Init+0xa4>)
 80005f0:	f001 f9ac 	bl	800194c <HAL_TIM_Encoder_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005fa:	f7ff fe40 	bl	800027e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_TIM2_Init+0xa4>)
 800060c:	f001 fe72 	bl	80022f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000616:	f7ff fe32 	bl	800027e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3730      	adds	r7, #48	; 0x30
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000168 	.word	0x20000168

08000628 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_TIM4_Init+0x94>)
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MX_TIM4_Init+0x98>)
 8000648:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_TIM4_Init+0x94>)
 800064c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000650:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_TIM4_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_TIM4_Init+0x94>)
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_TIM4_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_TIM4_Init+0x94>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800066a:	4814      	ldr	r0, [pc, #80]	; (80006bc <MX_TIM4_Init+0x94>)
 800066c:	f001 f89e 	bl	80017ac <HAL_TIM_Base_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000676:	f7ff fe02 	bl	800027e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4619      	mov	r1, r3
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_TIM4_Init+0x94>)
 8000688:	f001 fc2f 	bl	8001eea <HAL_TIM_ConfigClockSource>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000692:	f7ff fdf4 	bl	800027e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_TIM4_Init+0x94>)
 80006a4:	f001 fe26 	bl	80022f4 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80006ae:	f7ff fde6 	bl	800027e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200001b0 	.word	0x200001b0
 80006c0:	40000800 	.word	0x40000800

080006c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e2:	d14e      	bne.n	8000782 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	4a28      	ldr	r2, [pc, #160]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	61d3      	str	r3, [r2, #28]
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a1c      	ldr	r2, [pc, #112]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800072c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000736:	2301      	movs	r3, #1
 8000738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000742:	f000 fa95 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000746:	2308      	movs	r3, #8
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074e:	2301      	movs	r3, #1
 8000750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480e      	ldr	r0, [pc, #56]	; (8000794 <HAL_TIM_Encoder_MspInit+0xd0>)
 800075a:	f000 fa89 	bl	8000c70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_TIM_Encoder_MspInit+0xd4>)
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800
 8000794:	40010c00 	.word	0x40010c00
 8000798:	40010000 	.word	0x40010000

0800079c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_TIM_Base_MspInit+0x44>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d113      	bne.n	80007d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_TIM_Base_MspInit+0x48>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <HAL_TIM_Base_MspInit+0x48>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_TIM_Base_MspInit+0x48>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	201e      	movs	r0, #30
 80007cc:	f000 fa19 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007d0:	201e      	movs	r0, #30
 80007d2:	f000 fa32 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40000800 	.word	0x40000800
 80007e4:	40021000 	.word	0x40021000

080007e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART1_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000820:	f001 fdd8 	bl	80023d4 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f7ff fd28 	bl	800027e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200001f8 	.word	0x200001f8
 8000838:	40013800 	.word	0x40013800

0800083c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <HAL_UART_MspInit+0xa4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d13d      	bne.n	80008d8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <HAL_UART_MspInit+0xa8>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <HAL_UART_MspInit+0xa8>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <HAL_UART_MspInit+0xa8>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_UART_MspInit+0xa8>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <HAL_UART_MspInit+0xa8>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_UART_MspInit+0xa8>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4812      	ldr	r0, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0xac>)
 80008a0:	f000 f9e6 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_UART_MspInit+0xac>)
 80008b8:	f000 f9da 	bl	8000c70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_UART_MspInit+0xb0>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
 80008d2:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_UART_MspInit+0xb0>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40013800 	.word	0x40013800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010c00 	.word	0x40010c00
 80008ec:	40010000 	.word	0x40010000

080008f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000916:	f000 f810 	bl	800093a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f001 ff19 	bl	8002750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fc37 	bl	8000190 <main>
  bx lr
 8000922:	4770      	bx	lr
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800092c:	08003138 	.word	0x08003138
  ldr r2, =_sbss
 8000930:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000934:	20000250 	.word	0x20000250

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>

0800093a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f947 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fd72 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f95f 	bl	8000c56 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f927 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000034 	.word	0x20000034
 80009cc:	2000003c 	.word	0x2000003c
 80009d0:	20000038 	.word	0x20000038

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	2000003c 	.word	0x2000003c
 80009f4:	2000023c 	.word	0x2000023c

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	2000023c 	.word	0x2000023c

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000003c 	.word	0x2000003c

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4906      	ldr	r1, [pc, #24]	; (8000aec <__NVIC_EnableIRQ+0x34>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff90 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff2d 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff42 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff35 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b08b      	sub	sp, #44	; 0x2c
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e169      	b.n	8000f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c84:	2201      	movs	r2, #1
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8158 	bne.w	8000f52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a9a      	ldr	r2, [pc, #616]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d05e      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cac:	4a98      	ldr	r2, [pc, #608]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d875      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cb2:	4a98      	ldr	r2, [pc, #608]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d058      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cb8:	4a96      	ldr	r2, [pc, #600]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d86f      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cbe:	4a96      	ldr	r2, [pc, #600]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d052      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cc4:	4a94      	ldr	r2, [pc, #592]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d869      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cca:	4a94      	ldr	r2, [pc, #592]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d04c      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cd0:	4a92      	ldr	r2, [pc, #584]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d863      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cd6:	4a92      	ldr	r2, [pc, #584]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d046      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cdc:	4a90      	ldr	r2, [pc, #576]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d85d      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d82a      	bhi.n	8000d3c <HAL_GPIO_Init+0xcc>
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d859      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <HAL_GPIO_Init+0x80>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d45 	.word	0x08000d45
 8000cf8:	08000d57 	.word	0x08000d57
 8000cfc:	08000d99 	.word	0x08000d99
 8000d00:	08000d9f 	.word	0x08000d9f
 8000d04:	08000d9f 	.word	0x08000d9f
 8000d08:	08000d9f 	.word	0x08000d9f
 8000d0c:	08000d9f 	.word	0x08000d9f
 8000d10:	08000d9f 	.word	0x08000d9f
 8000d14:	08000d9f 	.word	0x08000d9f
 8000d18:	08000d9f 	.word	0x08000d9f
 8000d1c:	08000d9f 	.word	0x08000d9f
 8000d20:	08000d9f 	.word	0x08000d9f
 8000d24:	08000d9f 	.word	0x08000d9f
 8000d28:	08000d9f 	.word	0x08000d9f
 8000d2c:	08000d9f 	.word	0x08000d9f
 8000d30:	08000d9f 	.word	0x08000d9f
 8000d34:	08000d4d 	.word	0x08000d4d
 8000d38:	08000d61 	.word	0x08000d61
 8000d3c:	4a79      	ldr	r2, [pc, #484]	; (8000f24 <HAL_GPIO_Init+0x2b4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d42:	e02c      	b.n	8000d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e029      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	3304      	adds	r3, #4
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e024      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e01f      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	330c      	adds	r3, #12
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e01a      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d72:	2304      	movs	r3, #4
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e013      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d80:	2308      	movs	r3, #8
 8000d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	611a      	str	r2, [r3, #16]
          break;
 8000d8a:	e009      	b.n	8000da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	615a      	str	r2, [r3, #20]
          break;
 8000d96:	e003      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          break;
 8000d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	d801      	bhi.n	8000daa <HAL_GPIO_Init+0x13a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <HAL_GPIO_Init+0x13e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3304      	adds	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d802      	bhi.n	8000dbc <HAL_GPIO_Init+0x14c>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x152>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	3b08      	subs	r3, #8
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	210f      	movs	r1, #15
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	6a39      	ldr	r1, [r7, #32]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80b1 	beq.w	8000f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df0:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e08:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d013      	beq.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <HAL_GPIO_Init+0x2c4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d00d      	beq.n	8000e58 <HAL_GPIO_Init+0x1e8>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d007      	beq.n	8000e54 <HAL_GPIO_Init+0x1e4>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <HAL_GPIO_Init+0x2cc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d101      	bne.n	8000e50 <HAL_GPIO_Init+0x1e0>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e006      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e50:	2304      	movs	r3, #4
 8000e52:	e004      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e6e:	492f      	ldr	r1, [pc, #188]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	492c      	ldr	r1, [pc, #176]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4928      	ldr	r1, [pc, #160]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	4922      	ldr	r1, [pc, #136]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	491e      	ldr	r1, [pc, #120]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	4918      	ldr	r1, [pc, #96]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	608b      	str	r3, [r1, #8]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4914      	ldr	r1, [pc, #80]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d021      	beq.n	8000f44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	490e      	ldr	r1, [pc, #56]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60cb      	str	r3, [r1, #12]
 8000f0c:	e021      	b.n	8000f52 <HAL_GPIO_Init+0x2e2>
 8000f0e:	bf00      	nop
 8000f10:	10320000 	.word	0x10320000
 8000f14:	10310000 	.word	0x10310000
 8000f18:	10220000 	.word	0x10220000
 8000f1c:	10210000 	.word	0x10210000
 8000f20:	10120000 	.word	0x10120000
 8000f24:	10110000 	.word	0x10110000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40010c00 	.word	0x40010c00
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4909      	ldr	r1, [pc, #36]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	3301      	adds	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f47f ae8e 	bne.w	8000c84 <HAL_GPIO_Init+0x14>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	372c      	adds	r7, #44	; 0x2c
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40010400 	.word	0x40010400

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e272      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8087 	beq.w	80010a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f98:	4b92      	ldr	r3, [pc, #584]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d00c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa4:	4b8f      	ldr	r3, [pc, #572]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d112      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
 8000fb0:	4b8c      	ldr	r3, [pc, #560]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbe:	4b89      	ldr	r3, [pc, #548]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d06c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x12c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d168      	bne.n	80010a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e24c      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fde:	d106      	bne.n	8000fee <HAL_RCC_OscConfig+0x76>
 8000fe0:	4b80      	ldr	r3, [pc, #512]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a7f      	ldr	r2, [pc, #508]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e02e      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x98>
 8000ff6:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a7a      	ldr	r2, [pc, #488]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b78      	ldr	r3, [pc, #480]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a77      	ldr	r2, [pc, #476]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e01d      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0xbc>
 800101a:	4b72      	ldr	r3, [pc, #456]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a71      	ldr	r2, [pc, #452]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b6f      	ldr	r3, [pc, #444]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a6e      	ldr	r2, [pc, #440]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8001034:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a6a      	ldr	r2, [pc, #424]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a67      	ldr	r2, [pc, #412]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fcd0 	bl	80009f8 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fccc 	bl	80009f8 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e200      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0xe4>
 800107a:	e014      	b.n	80010a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fcbc 	bl	80009f8 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fcb8 	bl	80009f8 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1ec      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x10c>
 80010a2:	e000      	b.n	80010a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d063      	beq.n	800117a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010b2:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d11c      	bne.n	8001104 <HAL_RCC_OscConfig+0x18c>
 80010ca:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d116      	bne.n	8001104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_RCC_OscConfig+0x176>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e1c0      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4939      	ldr	r1, [pc, #228]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	e03a      	b.n	800117a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_RCC_OscConfig+0x270>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fc71 	bl	80009f8 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111a:	f7ff fc6d 	bl	80009f8 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e1a1      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4927      	ldr	r1, [pc, #156]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_RCC_OscConfig+0x270>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc50 	bl	80009f8 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fc4c 	bl	80009f8 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e180      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d03a      	beq.n	80011fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d019      	beq.n	80011c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_RCC_OscConfig+0x274>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fc30 	bl	80009f8 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fc2c 	bl	80009f8 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e160      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 fad8 	bl	8001770 <RCC_Delay>
 80011c0:	e01c      	b.n	80011fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_RCC_OscConfig+0x274>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fc16 	bl	80009f8 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ce:	e00f      	b.n	80011f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc12 	bl	80009f8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d908      	bls.n	80011f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e146      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	42420000 	.word	0x42420000
 80011ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	4b92      	ldr	r3, [pc, #584]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e9      	bne.n	80011d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a6 	beq.w	8001356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120e:	4b8b      	ldr	r3, [pc, #556]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10d      	bne.n	8001236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b88      	ldr	r3, [pc, #544]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a87      	ldr	r2, [pc, #540]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b85      	ldr	r3, [pc, #532]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d118      	bne.n	8001274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	4b7f      	ldr	r3, [pc, #508]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a7e      	ldr	r2, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124e:	f7ff fbd3 	bl	80009f8 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff fbcf 	bl	80009f8 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e103      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	4b75      	ldr	r3, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x312>
 800127c:	4b6f      	ldr	r3, [pc, #444]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4a6e      	ldr	r2, [pc, #440]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6213      	str	r3, [r2, #32]
 8001288:	e02d      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x334>
 8001292:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a69      	ldr	r2, [pc, #420]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a66      	ldr	r2, [pc, #408]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	e01c      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	d10c      	bne.n	80012ce <HAL_RCC_OscConfig+0x356>
 80012b4:	4b61      	ldr	r3, [pc, #388]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a60      	ldr	r2, [pc, #384]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	4b5e      	ldr	r3, [pc, #376]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4a5d      	ldr	r2, [pc, #372]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6213      	str	r3, [r2, #32]
 80012cc:	e00b      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 80012ce:	4b5b      	ldr	r3, [pc, #364]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a5a      	ldr	r2, [pc, #360]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6213      	str	r3, [r2, #32]
 80012da:	4b58      	ldr	r3, [pc, #352]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb83 	bl	80009f8 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fb7f 	bl	80009f8 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	; 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0b1      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ee      	beq.n	80012f6 <HAL_RCC_OscConfig+0x37e>
 8001318:	e014      	b.n	8001344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb6d 	bl	80009f8 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fb69 	bl	80009f8 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e09b      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ee      	bne.n	8001322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d105      	bne.n	8001356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134a:	4b3c      	ldr	r3, [pc, #240]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a3b      	ldr	r2, [pc, #236]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8087 	beq.w	800146e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d061      	beq.n	8001430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d146      	bne.n	8001402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <HAL_RCC_OscConfig+0x4cc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fb3d 	bl	80009f8 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fb39 	bl	80009f8 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e06d      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d108      	bne.n	80013bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	4921      	ldr	r1, [pc, #132]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a19      	ldr	r1, [r3, #32]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	430b      	orrs	r3, r1
 80013ce:	491b      	ldr	r1, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x4cc>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fb0d 	bl	80009f8 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fb09 	bl	80009f8 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e03d      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x46a>
 8001400:	e035      	b.n	800146e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_RCC_OscConfig+0x4cc>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff faf6 	bl	80009f8 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff faf2 	bl	80009f8 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e026      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x498>
 800142e:	e01e      	b.n	800146e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e019      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
 800143c:	40021000 	.word	0x40021000
 8001440:	40007000 	.word	0x40007000
 8001444:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x500>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	429a      	cmp	r2, r3
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0d0      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b6a      	ldr	r3, [pc, #424]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d910      	bls.n	80014c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b67      	ldr	r3, [pc, #412]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0207 	bic.w	r2, r3, #7
 80014a6:	4965      	ldr	r1, [pc, #404]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0b8      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	494d      	ldr	r1, [pc, #308]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d040      	beq.n	800159c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d115      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e07f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e073      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e06b      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f023 0203 	bic.w	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4936      	ldr	r1, [pc, #216]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800156c:	f7ff fa44 	bl	80009f8 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	e00a      	b.n	800158a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7ff fa40 	bl	80009f8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e053      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 020c 	and.w	r2, r3, #12
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	429a      	cmp	r2, r3
 800159a:	d1eb      	bne.n	8001574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d210      	bcs.n	80015cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 0207 	bic.w	r2, r3, #7
 80015b2:	4922      	ldr	r1, [pc, #136]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e032      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4916      	ldr	r1, [pc, #88]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800160a:	f000 f821 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 800160e:	4602      	mov	r2, r0
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	490a      	ldr	r1, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	5ccb      	ldrb	r3, [r1, r3]
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1cc>)
 8001624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1d0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f9a2 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000
 8001640:	40021000 	.word	0x40021000
 8001644:	080030e4 	.word	0x080030e4
 8001648:	20000034 	.word	0x20000034
 800164c:	20000038 	.word	0x20000038

08001650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	b490      	push	{r4, r7}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_RCC_GetSysClockFreq+0xac>)
 8001658:	1d3c      	adds	r4, r7, #4
 800165a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001660:	f240 2301 	movw	r3, #513	; 0x201
 8001664:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb0>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d002      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x40>
 800168a:	2b08      	cmp	r3, #8
 800168c:	d003      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0x46>
 800168e:	e02b      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001692:	623b      	str	r3, [r7, #32]
      break;
 8001694:	e02b      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3328      	adds	r3, #40	; 0x28
 80016a0:	443b      	add	r3, r7
 80016a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d012      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	0c5b      	lsrs	r3, r3, #17
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	3328      	adds	r3, #40	; 0x28
 80016be:	443b      	add	r3, r7
 80016c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ca:	fb03 f202 	mul.w	r2, r3, r2
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	e004      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	623b      	str	r3, [r7, #32]
      break;
 80016e6:	e002      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ea:	623b      	str	r3, [r7, #32]
      break;
 80016ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ee:	6a3b      	ldr	r3, [r7, #32]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc90      	pop	{r4, r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	080030d4 	.word	0x080030d4
 8001700:	40021000 	.word	0x40021000
 8001704:	007a1200 	.word	0x007a1200
 8001708:	003d0900 	.word	0x003d0900

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_RCC_GetHCLKFreq+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000034 	.word	0x20000034

08001720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001724:	f7ff fff2 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4903      	ldr	r1, [pc, #12]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	080030f4 	.word	0x080030f4

08001748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800174c:	f7ff ffde 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001750:	4602      	mov	r2, r0
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	0adb      	lsrs	r3, r3, #11
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	4903      	ldr	r1, [pc, #12]	; (800176c <HAL_RCC_GetPCLK2Freq+0x24>)
 800175e:	5ccb      	ldrb	r3, [r1, r3]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	080030f4 	.word	0x080030f4

08001770 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <RCC_Delay+0x34>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <RCC_Delay+0x38>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0a5b      	lsrs	r3, r3, #9
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800178c:	bf00      	nop
  }
  while (Delay --);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	60fa      	str	r2, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f9      	bne.n	800178c <RCC_Delay+0x1c>
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000034 	.word	0x20000034
 80017a8:	10624dd3 	.word	0x10624dd3

080017ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e041      	b.n	8001842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe ffe2 	bl	800079c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3304      	adds	r3, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f000 fc66 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d001      	beq.n	8001864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e03a      	b.n	80018da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_TIM_Base_Start_IT+0x98>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00e      	beq.n	80018a4 <HAL_TIM_Base_Start_IT+0x58>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188e:	d009      	beq.n	80018a4 <HAL_TIM_Base_Start_IT+0x58>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d004      	beq.n	80018a4 <HAL_TIM_Base_Start_IT+0x58>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <HAL_TIM_Base_Start_IT+0xa0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d111      	bne.n	80018c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d010      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c6:	e007      	b.n	80018d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40012c00 	.word	0x40012c00
 80018e8:	40000400 	.word	0x40000400
 80018ec:	40000800 	.word	0x40000800

080018f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10f      	bne.n	8001938 <HAL_TIM_Base_Stop_IT+0x48>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a1a      	ldr	r2, [r3, #32]
 800191e:	f240 4344 	movw	r3, #1092	; 0x444
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_TIM_Base_Stop_IT+0x48>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e093      	b.n	8001a88 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d106      	bne.n	800197a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7fe fea5 	bl	80006c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001990:	f023 0307 	bic.w	r3, r3, #7
 8001994:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f000 fb8b 	bl	80020bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	4313      	orrs	r3, r2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019ec:	f023 030c 	bic.w	r3, r3, #12
 80019f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	011a      	lsls	r2, r3, #4
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	031b      	lsls	r3, r3, #12
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	4313      	orrs	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001aa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d110      	bne.n	8001ae2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ac6:	7b7b      	ldrb	r3, [r7, #13]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e069      	b.n	8001ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ae0:	e031      	b.n	8001b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d110      	bne.n	8001b0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001aee:	7b3b      	ldrb	r3, [r7, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d001      	beq.n	8001af8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e055      	b.n	8001ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b08:	e01d      	b.n	8001b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b16:	7b7b      	ldrb	r3, [r7, #13]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b1c:	7b3b      	ldrb	r3, [r7, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e03e      	b.n	8001ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_TIM_Encoder_Start+0xc4>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d008      	beq.n	8001b64 <HAL_TIM_Encoder_Start+0xd4>
 8001b52:	e00f      	b.n	8001b74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fba5 	bl	80022ac <TIM_CCxChannelCmd>
      break;
 8001b62:	e016      	b.n	8001b92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fb9d 	bl	80022ac <TIM_CCxChannelCmd>
      break;
 8001b72:	e00e      	b.n	8001b92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fb95 	bl	80022ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2201      	movs	r2, #1
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fb8e 	bl	80022ac <TIM_CCxChannelCmd>
      break;
 8001b90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_TIM_Encoder_Stop+0x18>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d008      	beq.n	8001bd4 <HAL_TIM_Encoder_Stop+0x28>
 8001bc2:	e00f      	b.n	8001be4 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fb6d 	bl	80022ac <TIM_CCxChannelCmd>
      break;
 8001bd2:	e016      	b.n	8001c02 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2104      	movs	r1, #4
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 fb65 	bl	80022ac <TIM_CCxChannelCmd>
      break;
 8001be2:	e00e      	b.n	8001c02 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fb5d 	bl	80022ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fb56 	bl	80022ac <TIM_CCxChannelCmd>
      break;
 8001c00:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1a      	ldr	r2, [r3, #32]
 8001c08:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_TIM_Encoder_Stop+0x86>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a1a      	ldr	r2, [r3, #32]
 8001c18:	f240 4344 	movw	r3, #1092	; 0x444
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_TIM_Encoder_Stop+0x86>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_TIM_Encoder_Stop+0x92>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d138      	bne.n	8001cb0 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d104      	bne.n	8001c4e <HAL_TIM_Encoder_Stop+0xa2>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c4c:	e013      	b.n	8001c76 <HAL_TIM_Encoder_Stop+0xca>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d104      	bne.n	8001c5e <HAL_TIM_Encoder_Stop+0xb2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c5c:	e00b      	b.n	8001c76 <HAL_TIM_Encoder_Stop+0xca>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d104      	bne.n	8001c6e <HAL_TIM_Encoder_Stop+0xc2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c6c:	e003      	b.n	8001c76 <HAL_TIM_Encoder_Stop+0xca>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_Encoder_Stop+0xda>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	e024      	b.n	8001cd0 <HAL_TIM_Encoder_Stop+0x124>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d104      	bne.n	8001c96 <HAL_TIM_Encoder_Stop+0xea>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c94:	e01c      	b.n	8001cd0 <HAL_TIM_Encoder_Stop+0x124>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d104      	bne.n	8001ca6 <HAL_TIM_Encoder_Stop+0xfa>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	e014      	b.n	8001cd0 <HAL_TIM_Encoder_Stop+0x124>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cae:	e00f      	b.n	8001cd0 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d122      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d11b      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f06f 0202 	mvn.w	r2, #2
 8001d06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f9b1 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001d22:	e005      	b.n	8001d30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f9a4 	bl	8002072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f9b3 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d122      	bne.n	8001d8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d11b      	bne.n	8001d8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f06f 0204 	mvn.w	r2, #4
 8001d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f987 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001d76:	e005      	b.n	8001d84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f97a 	bl	8002072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f989 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d122      	bne.n	8001dde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d11b      	bne.n	8001dde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f06f 0208 	mvn.w	r2, #8
 8001dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2204      	movs	r2, #4
 8001db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f95d 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001dca:	e005      	b.n	8001dd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f950 	bl	8002072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f95f 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d122      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d11b      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f06f 0210 	mvn.w	r2, #16
 8001e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2208      	movs	r2, #8
 8001e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f933 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001e1e:	e005      	b.n	8001e2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f926 	bl	8002072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f935 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10e      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0201 	mvn.w	r2, #1
 8001e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7fe fa61 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d10e      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b80      	cmp	r3, #128	; 0x80
 8001e78:	d107      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fa9c 	bl	80023c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d10e      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d107      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8f9 	bl	80020a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d10e      	bne.n	8001ee2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d107      	bne.n	8001ee2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f06f 0220 	mvn.w	r2, #32
 8001eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fa67 	bl	80023b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_ConfigClockSource+0x18>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e0b3      	b.n	800206a <HAL_TIM_ConfigClockSource+0x180>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f28:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3a:	d03e      	beq.n	8001fba <HAL_TIM_ConfigClockSource+0xd0>
 8001f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f40:	f200 8087 	bhi.w	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	f000 8085 	beq.w	8002056 <HAL_TIM_ConfigClockSource+0x16c>
 8001f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f50:	d87f      	bhi.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f52:	2b70      	cmp	r3, #112	; 0x70
 8001f54:	d01a      	beq.n	8001f8c <HAL_TIM_ConfigClockSource+0xa2>
 8001f56:	2b70      	cmp	r3, #112	; 0x70
 8001f58:	d87b      	bhi.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f5a:	2b60      	cmp	r3, #96	; 0x60
 8001f5c:	d050      	beq.n	8002000 <HAL_TIM_ConfigClockSource+0x116>
 8001f5e:	2b60      	cmp	r3, #96	; 0x60
 8001f60:	d877      	bhi.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f62:	2b50      	cmp	r3, #80	; 0x50
 8001f64:	d03c      	beq.n	8001fe0 <HAL_TIM_ConfigClockSource+0xf6>
 8001f66:	2b50      	cmp	r3, #80	; 0x50
 8001f68:	d873      	bhi.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	d058      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0x136>
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d86f      	bhi.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f72:	2b30      	cmp	r3, #48	; 0x30
 8001f74:	d064      	beq.n	8002040 <HAL_TIM_ConfigClockSource+0x156>
 8001f76:	2b30      	cmp	r3, #48	; 0x30
 8001f78:	d86b      	bhi.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d060      	beq.n	8002040 <HAL_TIM_ConfigClockSource+0x156>
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d867      	bhi.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d05c      	beq.n	8002040 <HAL_TIM_ConfigClockSource+0x156>
 8001f86:	2b10      	cmp	r3, #16
 8001f88:	d05a      	beq.n	8002040 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f8a:	e062      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6899      	ldr	r1, [r3, #8]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f000 f967 	bl	800226e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	609a      	str	r2, [r3, #8]
      break;
 8001fb8:	e04e      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f000 f950 	bl	800226e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fdc:	609a      	str	r2, [r3, #8]
      break;
 8001fde:	e03b      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	461a      	mov	r2, r3
 8001fee:	f000 f8c7 	bl	8002180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2150      	movs	r1, #80	; 0x50
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f91e 	bl	800223a <TIM_ITRx_SetConfig>
      break;
 8001ffe:	e02b      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	461a      	mov	r2, r3
 800200e:	f000 f8e5 	bl	80021dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2160      	movs	r1, #96	; 0x60
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f90e 	bl	800223a <TIM_ITRx_SetConfig>
      break;
 800201e:	e01b      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	461a      	mov	r2, r3
 800202e:	f000 f8a7 	bl	8002180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2140      	movs	r1, #64	; 0x40
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f8fe 	bl	800223a <TIM_ITRx_SetConfig>
      break;
 800203e:	e00b      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f000 f8f5 	bl	800223a <TIM_ITRx_SetConfig>
        break;
 8002050:	e002      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
	...

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a29      	ldr	r2, [pc, #164]	; (8002174 <TIM_Base_SetConfig+0xb8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00b      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d007      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a26      	ldr	r2, [pc, #152]	; (8002178 <TIM_Base_SetConfig+0xbc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a25      	ldr	r2, [pc, #148]	; (800217c <TIM_Base_SetConfig+0xc0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d108      	bne.n	80020fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <TIM_Base_SetConfig+0xb8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00b      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d007      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <TIM_Base_SetConfig+0xbc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a18      	ldr	r2, [pc, #96]	; (800217c <TIM_Base_SetConfig+0xc0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a07      	ldr	r2, [pc, #28]	; (8002174 <TIM_Base_SetConfig+0xb8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800

08002180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f023 0201 	bic.w	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f023 030a 	bic.w	r3, r3, #10
 80021bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	621a      	str	r2, [r3, #32]
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f023 0210 	bic.w	r2, r3, #16
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002206:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	031b      	lsls	r3, r3, #12
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002218:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	621a      	str	r2, [r3, #32]
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	f043 0307 	orr.w	r3, r3, #7
 800225c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800226e:	b480      	push	{r7}
 8002270:	b087      	sub	sp, #28
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002288:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	021a      	lsls	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	431a      	orrs	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4313      	orrs	r3, r2
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a1a      	ldr	r2, [r3, #32]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	621a      	str	r2, [r3, #32]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002308:	2302      	movs	r3, #2
 800230a:	e046      	b.n	800239a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002358:	d009      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10c      	bne.n	8002388 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4313      	orrs	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800

080023b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e03f      	b.n	8002466 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fa1e 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f905 	bl	8002628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af02      	add	r7, sp, #8
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	d17c      	bne.n	8002588 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_UART_Transmit+0x2c>
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e075      	b.n	800258a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_UART_Transmit+0x3e>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e06e      	b.n	800258a <HAL_UART_Transmit+0x11c>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2221      	movs	r2, #33	; 0x21
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024c2:	f7fe fa99 	bl	80009f8 <HAL_GetTick>
 80024c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024dc:	d108      	bne.n	80024f0 <HAL_UART_Transmit+0x82>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	e003      	b.n	80024f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002500:	e02a      	b.n	8002558 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f840 	bl	8002592 <UART_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e036      	b.n	800258a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002530:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	3302      	adds	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	e007      	b.n	800254a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1cf      	bne.n	8002502 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f810 	bl	8002592 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e006      	b.n	800258a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002588:	2302      	movs	r3, #2
  }
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a2:	e02c      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d028      	beq.n	80025fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80025b2:	f7fe fa21 	bl	80009f8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d21d      	bcs.n	80025fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e00f      	b.n	800261e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	429a      	cmp	r2, r3
 800261a:	d0c3      	beq.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002662:	f023 030c 	bic.w	r3, r3, #12
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	430b      	orrs	r3, r1
 800266e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2c      	ldr	r2, [pc, #176]	; (800273c <UART_SetConfig+0x114>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002690:	f7ff f85a 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	e002      	b.n	800269e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002698:	f7ff f842 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 800269c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009a      	lsls	r2, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <UART_SetConfig+0x118>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	0119      	lsls	r1, r3, #4
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009a      	lsls	r2, r3, #2
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <UART_SetConfig+0x118>)
 80026d6:	fba3 0302 	umull	r0, r3, r3, r2
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	2064      	movs	r0, #100	; 0x64
 80026de:	fb00 f303 	mul.w	r3, r0, r3
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	3332      	adds	r3, #50	; 0x32
 80026e8:	4a15      	ldr	r2, [pc, #84]	; (8002740 <UART_SetConfig+0x118>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f4:	4419      	add	r1, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	441a      	add	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fbb2 f2f3 	udiv	r2, r2, r3
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <UART_SetConfig+0x118>)
 800270e:	fba3 0302 	umull	r0, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	fb00 f303 	mul.w	r3, r0, r3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	3332      	adds	r3, #50	; 0x32
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <UART_SetConfig+0x118>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	f003 020f 	and.w	r2, r3, #15
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	440a      	add	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40013800 	.word	0x40013800
 8002740:	51eb851f 	.word	0x51eb851f

08002744 <__errno>:
 8002744:	4b01      	ldr	r3, [pc, #4]	; (800274c <__errno+0x8>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000040 	.word	0x20000040

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2600      	movs	r6, #0
 8002754:	4d0c      	ldr	r5, [pc, #48]	; (8002788 <__libc_init_array+0x38>)
 8002756:	4c0d      	ldr	r4, [pc, #52]	; (800278c <__libc_init_array+0x3c>)
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	42a6      	cmp	r6, r4
 800275e:	d109      	bne.n	8002774 <__libc_init_array+0x24>
 8002760:	f000 fc9c 	bl	800309c <_init>
 8002764:	2600      	movs	r6, #0
 8002766:	4d0a      	ldr	r5, [pc, #40]	; (8002790 <__libc_init_array+0x40>)
 8002768:	4c0a      	ldr	r4, [pc, #40]	; (8002794 <__libc_init_array+0x44>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	42a6      	cmp	r6, r4
 8002770:	d105      	bne.n	800277e <__libc_init_array+0x2e>
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	f855 3b04 	ldr.w	r3, [r5], #4
 8002778:	4798      	blx	r3
 800277a:	3601      	adds	r6, #1
 800277c:	e7ee      	b.n	800275c <__libc_init_array+0xc>
 800277e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002782:	4798      	blx	r3
 8002784:	3601      	adds	r6, #1
 8002786:	e7f2      	b.n	800276e <__libc_init_array+0x1e>
 8002788:	08003130 	.word	0x08003130
 800278c:	08003130 	.word	0x08003130
 8002790:	08003130 	.word	0x08003130
 8002794:	08003134 	.word	0x08003134

08002798 <memcpy>:
 8002798:	440a      	add	r2, r1
 800279a:	4291      	cmp	r1, r2
 800279c:	f100 33ff 	add.w	r3, r0, #4294967295
 80027a0:	d100      	bne.n	80027a4 <memcpy+0xc>
 80027a2:	4770      	bx	lr
 80027a4:	b510      	push	{r4, lr}
 80027a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027aa:	4291      	cmp	r1, r2
 80027ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027b0:	d1f9      	bne.n	80027a6 <memcpy+0xe>
 80027b2:	bd10      	pop	{r4, pc}

080027b4 <memset>:
 80027b4:	4603      	mov	r3, r0
 80027b6:	4402      	add	r2, r0
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d100      	bne.n	80027be <memset+0xa>
 80027bc:	4770      	bx	lr
 80027be:	f803 1b01 	strb.w	r1, [r3], #1
 80027c2:	e7f9      	b.n	80027b8 <memset+0x4>

080027c4 <siprintf>:
 80027c4:	b40e      	push	{r1, r2, r3}
 80027c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027ca:	b500      	push	{lr}
 80027cc:	b09c      	sub	sp, #112	; 0x70
 80027ce:	ab1d      	add	r3, sp, #116	; 0x74
 80027d0:	9002      	str	r0, [sp, #8]
 80027d2:	9006      	str	r0, [sp, #24]
 80027d4:	9107      	str	r1, [sp, #28]
 80027d6:	9104      	str	r1, [sp, #16]
 80027d8:	4808      	ldr	r0, [pc, #32]	; (80027fc <siprintf+0x38>)
 80027da:	4909      	ldr	r1, [pc, #36]	; (8002800 <siprintf+0x3c>)
 80027dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80027e0:	9105      	str	r1, [sp, #20]
 80027e2:	6800      	ldr	r0, [r0, #0]
 80027e4:	a902      	add	r1, sp, #8
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	f000 f868 	bl	80028bc <_svfiprintf_r>
 80027ec:	2200      	movs	r2, #0
 80027ee:	9b02      	ldr	r3, [sp, #8]
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	b01c      	add	sp, #112	; 0x70
 80027f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027f8:	b003      	add	sp, #12
 80027fa:	4770      	bx	lr
 80027fc:	20000040 	.word	0x20000040
 8002800:	ffff0208 	.word	0xffff0208

08002804 <__ssputs_r>:
 8002804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002808:	688e      	ldr	r6, [r1, #8]
 800280a:	4682      	mov	sl, r0
 800280c:	429e      	cmp	r6, r3
 800280e:	460c      	mov	r4, r1
 8002810:	4690      	mov	r8, r2
 8002812:	461f      	mov	r7, r3
 8002814:	d838      	bhi.n	8002888 <__ssputs_r+0x84>
 8002816:	898a      	ldrh	r2, [r1, #12]
 8002818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800281c:	d032      	beq.n	8002884 <__ssputs_r+0x80>
 800281e:	6825      	ldr	r5, [r4, #0]
 8002820:	6909      	ldr	r1, [r1, #16]
 8002822:	3301      	adds	r3, #1
 8002824:	eba5 0901 	sub.w	r9, r5, r1
 8002828:	6965      	ldr	r5, [r4, #20]
 800282a:	444b      	add	r3, r9
 800282c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002834:	106d      	asrs	r5, r5, #1
 8002836:	429d      	cmp	r5, r3
 8002838:	bf38      	it	cc
 800283a:	461d      	movcc	r5, r3
 800283c:	0553      	lsls	r3, r2, #21
 800283e:	d531      	bpl.n	80028a4 <__ssputs_r+0xa0>
 8002840:	4629      	mov	r1, r5
 8002842:	f000 fb61 	bl	8002f08 <_malloc_r>
 8002846:	4606      	mov	r6, r0
 8002848:	b950      	cbnz	r0, 8002860 <__ssputs_r+0x5c>
 800284a:	230c      	movs	r3, #12
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f8ca 3000 	str.w	r3, [sl]
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285a:	81a3      	strh	r3, [r4, #12]
 800285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002860:	464a      	mov	r2, r9
 8002862:	6921      	ldr	r1, [r4, #16]
 8002864:	f7ff ff98 	bl	8002798 <memcpy>
 8002868:	89a3      	ldrh	r3, [r4, #12]
 800286a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800286e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002872:	81a3      	strh	r3, [r4, #12]
 8002874:	6126      	str	r6, [r4, #16]
 8002876:	444e      	add	r6, r9
 8002878:	6026      	str	r6, [r4, #0]
 800287a:	463e      	mov	r6, r7
 800287c:	6165      	str	r5, [r4, #20]
 800287e:	eba5 0509 	sub.w	r5, r5, r9
 8002882:	60a5      	str	r5, [r4, #8]
 8002884:	42be      	cmp	r6, r7
 8002886:	d900      	bls.n	800288a <__ssputs_r+0x86>
 8002888:	463e      	mov	r6, r7
 800288a:	4632      	mov	r2, r6
 800288c:	4641      	mov	r1, r8
 800288e:	6820      	ldr	r0, [r4, #0]
 8002890:	f000 fab8 	bl	8002e04 <memmove>
 8002894:	68a3      	ldr	r3, [r4, #8]
 8002896:	2000      	movs	r0, #0
 8002898:	1b9b      	subs	r3, r3, r6
 800289a:	60a3      	str	r3, [r4, #8]
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	4433      	add	r3, r6
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	e7db      	b.n	800285c <__ssputs_r+0x58>
 80028a4:	462a      	mov	r2, r5
 80028a6:	f000 fba3 	bl	8002ff0 <_realloc_r>
 80028aa:	4606      	mov	r6, r0
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d1e1      	bne.n	8002874 <__ssputs_r+0x70>
 80028b0:	4650      	mov	r0, sl
 80028b2:	6921      	ldr	r1, [r4, #16]
 80028b4:	f000 fac0 	bl	8002e38 <_free_r>
 80028b8:	e7c7      	b.n	800284a <__ssputs_r+0x46>
	...

080028bc <_svfiprintf_r>:
 80028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c0:	4698      	mov	r8, r3
 80028c2:	898b      	ldrh	r3, [r1, #12]
 80028c4:	4607      	mov	r7, r0
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	460d      	mov	r5, r1
 80028ca:	4614      	mov	r4, r2
 80028cc:	b09d      	sub	sp, #116	; 0x74
 80028ce:	d50e      	bpl.n	80028ee <_svfiprintf_r+0x32>
 80028d0:	690b      	ldr	r3, [r1, #16]
 80028d2:	b963      	cbnz	r3, 80028ee <_svfiprintf_r+0x32>
 80028d4:	2140      	movs	r1, #64	; 0x40
 80028d6:	f000 fb17 	bl	8002f08 <_malloc_r>
 80028da:	6028      	str	r0, [r5, #0]
 80028dc:	6128      	str	r0, [r5, #16]
 80028de:	b920      	cbnz	r0, 80028ea <_svfiprintf_r+0x2e>
 80028e0:	230c      	movs	r3, #12
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	e0d1      	b.n	8002a8e <_svfiprintf_r+0x1d2>
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	616b      	str	r3, [r5, #20]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9309      	str	r3, [sp, #36]	; 0x24
 80028f2:	2320      	movs	r3, #32
 80028f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028f8:	2330      	movs	r3, #48	; 0x30
 80028fa:	f04f 0901 	mov.w	r9, #1
 80028fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002902:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002aa8 <_svfiprintf_r+0x1ec>
 8002906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800290a:	4623      	mov	r3, r4
 800290c:	469a      	mov	sl, r3
 800290e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002912:	b10a      	cbz	r2, 8002918 <_svfiprintf_r+0x5c>
 8002914:	2a25      	cmp	r2, #37	; 0x25
 8002916:	d1f9      	bne.n	800290c <_svfiprintf_r+0x50>
 8002918:	ebba 0b04 	subs.w	fp, sl, r4
 800291c:	d00b      	beq.n	8002936 <_svfiprintf_r+0x7a>
 800291e:	465b      	mov	r3, fp
 8002920:	4622      	mov	r2, r4
 8002922:	4629      	mov	r1, r5
 8002924:	4638      	mov	r0, r7
 8002926:	f7ff ff6d 	bl	8002804 <__ssputs_r>
 800292a:	3001      	adds	r0, #1
 800292c:	f000 80aa 	beq.w	8002a84 <_svfiprintf_r+0x1c8>
 8002930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002932:	445a      	add	r2, fp
 8002934:	9209      	str	r2, [sp, #36]	; 0x24
 8002936:	f89a 3000 	ldrb.w	r3, [sl]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80a2 	beq.w	8002a84 <_svfiprintf_r+0x1c8>
 8002940:	2300      	movs	r3, #0
 8002942:	f04f 32ff 	mov.w	r2, #4294967295
 8002946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800294a:	f10a 0a01 	add.w	sl, sl, #1
 800294e:	9304      	str	r3, [sp, #16]
 8002950:	9307      	str	r3, [sp, #28]
 8002952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002956:	931a      	str	r3, [sp, #104]	; 0x68
 8002958:	4654      	mov	r4, sl
 800295a:	2205      	movs	r2, #5
 800295c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002960:	4851      	ldr	r0, [pc, #324]	; (8002aa8 <_svfiprintf_r+0x1ec>)
 8002962:	f000 fa41 	bl	8002de8 <memchr>
 8002966:	9a04      	ldr	r2, [sp, #16]
 8002968:	b9d8      	cbnz	r0, 80029a2 <_svfiprintf_r+0xe6>
 800296a:	06d0      	lsls	r0, r2, #27
 800296c:	bf44      	itt	mi
 800296e:	2320      	movmi	r3, #32
 8002970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002974:	0711      	lsls	r1, r2, #28
 8002976:	bf44      	itt	mi
 8002978:	232b      	movmi	r3, #43	; 0x2b
 800297a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800297e:	f89a 3000 	ldrb.w	r3, [sl]
 8002982:	2b2a      	cmp	r3, #42	; 0x2a
 8002984:	d015      	beq.n	80029b2 <_svfiprintf_r+0xf6>
 8002986:	4654      	mov	r4, sl
 8002988:	2000      	movs	r0, #0
 800298a:	f04f 0c0a 	mov.w	ip, #10
 800298e:	9a07      	ldr	r2, [sp, #28]
 8002990:	4621      	mov	r1, r4
 8002992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002996:	3b30      	subs	r3, #48	; 0x30
 8002998:	2b09      	cmp	r3, #9
 800299a:	d94e      	bls.n	8002a3a <_svfiprintf_r+0x17e>
 800299c:	b1b0      	cbz	r0, 80029cc <_svfiprintf_r+0x110>
 800299e:	9207      	str	r2, [sp, #28]
 80029a0:	e014      	b.n	80029cc <_svfiprintf_r+0x110>
 80029a2:	eba0 0308 	sub.w	r3, r0, r8
 80029a6:	fa09 f303 	lsl.w	r3, r9, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	46a2      	mov	sl, r4
 80029ae:	9304      	str	r3, [sp, #16]
 80029b0:	e7d2      	b.n	8002958 <_svfiprintf_r+0x9c>
 80029b2:	9b03      	ldr	r3, [sp, #12]
 80029b4:	1d19      	adds	r1, r3, #4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	9103      	str	r1, [sp, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bfbb      	ittet	lt
 80029be:	425b      	neglt	r3, r3
 80029c0:	f042 0202 	orrlt.w	r2, r2, #2
 80029c4:	9307      	strge	r3, [sp, #28]
 80029c6:	9307      	strlt	r3, [sp, #28]
 80029c8:	bfb8      	it	lt
 80029ca:	9204      	strlt	r2, [sp, #16]
 80029cc:	7823      	ldrb	r3, [r4, #0]
 80029ce:	2b2e      	cmp	r3, #46	; 0x2e
 80029d0:	d10c      	bne.n	80029ec <_svfiprintf_r+0x130>
 80029d2:	7863      	ldrb	r3, [r4, #1]
 80029d4:	2b2a      	cmp	r3, #42	; 0x2a
 80029d6:	d135      	bne.n	8002a44 <_svfiprintf_r+0x188>
 80029d8:	9b03      	ldr	r3, [sp, #12]
 80029da:	3402      	adds	r4, #2
 80029dc:	1d1a      	adds	r2, r3, #4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	9203      	str	r2, [sp, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bfb8      	it	lt
 80029e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80029ea:	9305      	str	r3, [sp, #20]
 80029ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002aac <_svfiprintf_r+0x1f0>
 80029f0:	2203      	movs	r2, #3
 80029f2:	4650      	mov	r0, sl
 80029f4:	7821      	ldrb	r1, [r4, #0]
 80029f6:	f000 f9f7 	bl	8002de8 <memchr>
 80029fa:	b140      	cbz	r0, 8002a0e <_svfiprintf_r+0x152>
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	eba0 000a 	sub.w	r0, r0, sl
 8002a02:	fa03 f000 	lsl.w	r0, r3, r0
 8002a06:	9b04      	ldr	r3, [sp, #16]
 8002a08:	3401      	adds	r4, #1
 8002a0a:	4303      	orrs	r3, r0
 8002a0c:	9304      	str	r3, [sp, #16]
 8002a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a12:	2206      	movs	r2, #6
 8002a14:	4826      	ldr	r0, [pc, #152]	; (8002ab0 <_svfiprintf_r+0x1f4>)
 8002a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a1a:	f000 f9e5 	bl	8002de8 <memchr>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d038      	beq.n	8002a94 <_svfiprintf_r+0x1d8>
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <_svfiprintf_r+0x1f8>)
 8002a24:	bb1b      	cbnz	r3, 8002a6e <_svfiprintf_r+0x1b2>
 8002a26:	9b03      	ldr	r3, [sp, #12]
 8002a28:	3307      	adds	r3, #7
 8002a2a:	f023 0307 	bic.w	r3, r3, #7
 8002a2e:	3308      	adds	r3, #8
 8002a30:	9303      	str	r3, [sp, #12]
 8002a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a34:	4433      	add	r3, r6
 8002a36:	9309      	str	r3, [sp, #36]	; 0x24
 8002a38:	e767      	b.n	800290a <_svfiprintf_r+0x4e>
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a42:	e7a5      	b.n	8002990 <_svfiprintf_r+0xd4>
 8002a44:	2300      	movs	r3, #0
 8002a46:	f04f 0c0a 	mov.w	ip, #10
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	3401      	adds	r4, #1
 8002a4e:	9305      	str	r3, [sp, #20]
 8002a50:	4620      	mov	r0, r4
 8002a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a56:	3a30      	subs	r2, #48	; 0x30
 8002a58:	2a09      	cmp	r2, #9
 8002a5a:	d903      	bls.n	8002a64 <_svfiprintf_r+0x1a8>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0c5      	beq.n	80029ec <_svfiprintf_r+0x130>
 8002a60:	9105      	str	r1, [sp, #20]
 8002a62:	e7c3      	b.n	80029ec <_svfiprintf_r+0x130>
 8002a64:	4604      	mov	r4, r0
 8002a66:	2301      	movs	r3, #1
 8002a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a6c:	e7f0      	b.n	8002a50 <_svfiprintf_r+0x194>
 8002a6e:	ab03      	add	r3, sp, #12
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	462a      	mov	r2, r5
 8002a74:	4638      	mov	r0, r7
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <_svfiprintf_r+0x1fc>)
 8002a78:	a904      	add	r1, sp, #16
 8002a7a:	f3af 8000 	nop.w
 8002a7e:	1c42      	adds	r2, r0, #1
 8002a80:	4606      	mov	r6, r0
 8002a82:	d1d6      	bne.n	8002a32 <_svfiprintf_r+0x176>
 8002a84:	89ab      	ldrh	r3, [r5, #12]
 8002a86:	065b      	lsls	r3, r3, #25
 8002a88:	f53f af2c 	bmi.w	80028e4 <_svfiprintf_r+0x28>
 8002a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a8e:	b01d      	add	sp, #116	; 0x74
 8002a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a94:	ab03      	add	r3, sp, #12
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	462a      	mov	r2, r5
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <_svfiprintf_r+0x1fc>)
 8002a9e:	a904      	add	r1, sp, #16
 8002aa0:	f000 f87c 	bl	8002b9c <_printf_i>
 8002aa4:	e7eb      	b.n	8002a7e <_svfiprintf_r+0x1c2>
 8002aa6:	bf00      	nop
 8002aa8:	080030fc 	.word	0x080030fc
 8002aac:	08003102 	.word	0x08003102
 8002ab0:	08003106 	.word	0x08003106
 8002ab4:	00000000 	.word	0x00000000
 8002ab8:	08002805 	.word	0x08002805

08002abc <_printf_common>:
 8002abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac0:	4616      	mov	r6, r2
 8002ac2:	4699      	mov	r9, r3
 8002ac4:	688a      	ldr	r2, [r1, #8]
 8002ac6:	690b      	ldr	r3, [r1, #16]
 8002ac8:	4607      	mov	r7, r0
 8002aca:	4293      	cmp	r3, r2
 8002acc:	bfb8      	it	lt
 8002ace:	4613      	movlt	r3, r2
 8002ad0:	6033      	str	r3, [r6, #0]
 8002ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002adc:	b10a      	cbz	r2, 8002ae2 <_printf_common+0x26>
 8002ade:	3301      	adds	r3, #1
 8002ae0:	6033      	str	r3, [r6, #0]
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	0699      	lsls	r1, r3, #26
 8002ae6:	bf42      	ittt	mi
 8002ae8:	6833      	ldrmi	r3, [r6, #0]
 8002aea:	3302      	addmi	r3, #2
 8002aec:	6033      	strmi	r3, [r6, #0]
 8002aee:	6825      	ldr	r5, [r4, #0]
 8002af0:	f015 0506 	ands.w	r5, r5, #6
 8002af4:	d106      	bne.n	8002b04 <_printf_common+0x48>
 8002af6:	f104 0a19 	add.w	sl, r4, #25
 8002afa:	68e3      	ldr	r3, [r4, #12]
 8002afc:	6832      	ldr	r2, [r6, #0]
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	42ab      	cmp	r3, r5
 8002b02:	dc28      	bgt.n	8002b56 <_printf_common+0x9a>
 8002b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b08:	1e13      	subs	r3, r2, #0
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	bf18      	it	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	0692      	lsls	r2, r2, #26
 8002b12:	d42d      	bmi.n	8002b70 <_printf_common+0xb4>
 8002b14:	4649      	mov	r1, r9
 8002b16:	4638      	mov	r0, r7
 8002b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b1c:	47c0      	blx	r8
 8002b1e:	3001      	adds	r0, #1
 8002b20:	d020      	beq.n	8002b64 <_printf_common+0xa8>
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	68e5      	ldr	r5, [r4, #12]
 8002b26:	f003 0306 	and.w	r3, r3, #6
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf18      	it	ne
 8002b2e:	2500      	movne	r5, #0
 8002b30:	6832      	ldr	r2, [r6, #0]
 8002b32:	f04f 0600 	mov.w	r6, #0
 8002b36:	68a3      	ldr	r3, [r4, #8]
 8002b38:	bf08      	it	eq
 8002b3a:	1aad      	subeq	r5, r5, r2
 8002b3c:	6922      	ldr	r2, [r4, #16]
 8002b3e:	bf08      	it	eq
 8002b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bfc4      	itt	gt
 8002b48:	1a9b      	subgt	r3, r3, r2
 8002b4a:	18ed      	addgt	r5, r5, r3
 8002b4c:	341a      	adds	r4, #26
 8002b4e:	42b5      	cmp	r5, r6
 8002b50:	d11a      	bne.n	8002b88 <_printf_common+0xcc>
 8002b52:	2000      	movs	r0, #0
 8002b54:	e008      	b.n	8002b68 <_printf_common+0xac>
 8002b56:	2301      	movs	r3, #1
 8002b58:	4652      	mov	r2, sl
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	47c0      	blx	r8
 8002b60:	3001      	adds	r0, #1
 8002b62:	d103      	bne.n	8002b6c <_printf_common+0xb0>
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6c:	3501      	adds	r5, #1
 8002b6e:	e7c4      	b.n	8002afa <_printf_common+0x3e>
 8002b70:	2030      	movs	r0, #48	; 0x30
 8002b72:	18e1      	adds	r1, r4, r3
 8002b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b7e:	4422      	add	r2, r4
 8002b80:	3302      	adds	r3, #2
 8002b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b86:	e7c5      	b.n	8002b14 <_printf_common+0x58>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	4638      	mov	r0, r7
 8002b90:	47c0      	blx	r8
 8002b92:	3001      	adds	r0, #1
 8002b94:	d0e6      	beq.n	8002b64 <_printf_common+0xa8>
 8002b96:	3601      	adds	r6, #1
 8002b98:	e7d9      	b.n	8002b4e <_printf_common+0x92>
	...

08002b9c <_printf_i>:
 8002b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba0:	7e0f      	ldrb	r7, [r1, #24]
 8002ba2:	4691      	mov	r9, r2
 8002ba4:	2f78      	cmp	r7, #120	; 0x78
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	469a      	mov	sl, r3
 8002bac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bb2:	d807      	bhi.n	8002bc4 <_printf_i+0x28>
 8002bb4:	2f62      	cmp	r7, #98	; 0x62
 8002bb6:	d80a      	bhi.n	8002bce <_printf_i+0x32>
 8002bb8:	2f00      	cmp	r7, #0
 8002bba:	f000 80d9 	beq.w	8002d70 <_printf_i+0x1d4>
 8002bbe:	2f58      	cmp	r7, #88	; 0x58
 8002bc0:	f000 80a4 	beq.w	8002d0c <_printf_i+0x170>
 8002bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bcc:	e03a      	b.n	8002c44 <_printf_i+0xa8>
 8002bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bd2:	2b15      	cmp	r3, #21
 8002bd4:	d8f6      	bhi.n	8002bc4 <_printf_i+0x28>
 8002bd6:	a101      	add	r1, pc, #4	; (adr r1, 8002bdc <_printf_i+0x40>)
 8002bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bdc:	08002c35 	.word	0x08002c35
 8002be0:	08002c49 	.word	0x08002c49
 8002be4:	08002bc5 	.word	0x08002bc5
 8002be8:	08002bc5 	.word	0x08002bc5
 8002bec:	08002bc5 	.word	0x08002bc5
 8002bf0:	08002bc5 	.word	0x08002bc5
 8002bf4:	08002c49 	.word	0x08002c49
 8002bf8:	08002bc5 	.word	0x08002bc5
 8002bfc:	08002bc5 	.word	0x08002bc5
 8002c00:	08002bc5 	.word	0x08002bc5
 8002c04:	08002bc5 	.word	0x08002bc5
 8002c08:	08002d57 	.word	0x08002d57
 8002c0c:	08002c79 	.word	0x08002c79
 8002c10:	08002d39 	.word	0x08002d39
 8002c14:	08002bc5 	.word	0x08002bc5
 8002c18:	08002bc5 	.word	0x08002bc5
 8002c1c:	08002d79 	.word	0x08002d79
 8002c20:	08002bc5 	.word	0x08002bc5
 8002c24:	08002c79 	.word	0x08002c79
 8002c28:	08002bc5 	.word	0x08002bc5
 8002c2c:	08002bc5 	.word	0x08002bc5
 8002c30:	08002d41 	.word	0x08002d41
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	1d1a      	adds	r2, r3, #4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	602a      	str	r2, [r5, #0]
 8002c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0a4      	b.n	8002d92 <_printf_i+0x1f6>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	6829      	ldr	r1, [r5, #0]
 8002c4c:	0606      	lsls	r6, r0, #24
 8002c4e:	f101 0304 	add.w	r3, r1, #4
 8002c52:	d50a      	bpl.n	8002c6a <_printf_i+0xce>
 8002c54:	680e      	ldr	r6, [r1, #0]
 8002c56:	602b      	str	r3, [r5, #0]
 8002c58:	2e00      	cmp	r6, #0
 8002c5a:	da03      	bge.n	8002c64 <_printf_i+0xc8>
 8002c5c:	232d      	movs	r3, #45	; 0x2d
 8002c5e:	4276      	negs	r6, r6
 8002c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c64:	230a      	movs	r3, #10
 8002c66:	485e      	ldr	r0, [pc, #376]	; (8002de0 <_printf_i+0x244>)
 8002c68:	e019      	b.n	8002c9e <_printf_i+0x102>
 8002c6a:	680e      	ldr	r6, [r1, #0]
 8002c6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c70:	602b      	str	r3, [r5, #0]
 8002c72:	bf18      	it	ne
 8002c74:	b236      	sxthne	r6, r6
 8002c76:	e7ef      	b.n	8002c58 <_printf_i+0xbc>
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	1d19      	adds	r1, r3, #4
 8002c7e:	6029      	str	r1, [r5, #0]
 8002c80:	0601      	lsls	r1, r0, #24
 8002c82:	d501      	bpl.n	8002c88 <_printf_i+0xec>
 8002c84:	681e      	ldr	r6, [r3, #0]
 8002c86:	e002      	b.n	8002c8e <_printf_i+0xf2>
 8002c88:	0646      	lsls	r6, r0, #25
 8002c8a:	d5fb      	bpl.n	8002c84 <_printf_i+0xe8>
 8002c8c:	881e      	ldrh	r6, [r3, #0]
 8002c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8002c90:	bf0c      	ite	eq
 8002c92:	2308      	moveq	r3, #8
 8002c94:	230a      	movne	r3, #10
 8002c96:	4852      	ldr	r0, [pc, #328]	; (8002de0 <_printf_i+0x244>)
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c9e:	6865      	ldr	r5, [r4, #4]
 8002ca0:	2d00      	cmp	r5, #0
 8002ca2:	bfa8      	it	ge
 8002ca4:	6821      	ldrge	r1, [r4, #0]
 8002ca6:	60a5      	str	r5, [r4, #8]
 8002ca8:	bfa4      	itt	ge
 8002caa:	f021 0104 	bicge.w	r1, r1, #4
 8002cae:	6021      	strge	r1, [r4, #0]
 8002cb0:	b90e      	cbnz	r6, 8002cb6 <_printf_i+0x11a>
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	d04d      	beq.n	8002d52 <_printf_i+0x1b6>
 8002cb6:	4615      	mov	r5, r2
 8002cb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cbc:	fb03 6711 	mls	r7, r3, r1, r6
 8002cc0:	5dc7      	ldrb	r7, [r0, r7]
 8002cc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cc6:	4637      	mov	r7, r6
 8002cc8:	42bb      	cmp	r3, r7
 8002cca:	460e      	mov	r6, r1
 8002ccc:	d9f4      	bls.n	8002cb8 <_printf_i+0x11c>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d10b      	bne.n	8002cea <_printf_i+0x14e>
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	07de      	lsls	r6, r3, #31
 8002cd6:	d508      	bpl.n	8002cea <_printf_i+0x14e>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	6861      	ldr	r1, [r4, #4]
 8002cdc:	4299      	cmp	r1, r3
 8002cde:	bfde      	ittt	le
 8002ce0:	2330      	movle	r3, #48	; 0x30
 8002ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cea:	1b52      	subs	r2, r2, r5
 8002cec:	6122      	str	r2, [r4, #16]
 8002cee:	464b      	mov	r3, r9
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	f8cd a000 	str.w	sl, [sp]
 8002cf8:	aa03      	add	r2, sp, #12
 8002cfa:	f7ff fedf 	bl	8002abc <_printf_common>
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d14c      	bne.n	8002d9c <_printf_i+0x200>
 8002d02:	f04f 30ff 	mov.w	r0, #4294967295
 8002d06:	b004      	add	sp, #16
 8002d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d0c:	4834      	ldr	r0, [pc, #208]	; (8002de0 <_printf_i+0x244>)
 8002d0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d12:	6829      	ldr	r1, [r5, #0]
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d1a:	6029      	str	r1, [r5, #0]
 8002d1c:	061d      	lsls	r5, r3, #24
 8002d1e:	d514      	bpl.n	8002d4a <_printf_i+0x1ae>
 8002d20:	07df      	lsls	r7, r3, #31
 8002d22:	bf44      	itt	mi
 8002d24:	f043 0320 	orrmi.w	r3, r3, #32
 8002d28:	6023      	strmi	r3, [r4, #0]
 8002d2a:	b91e      	cbnz	r6, 8002d34 <_printf_i+0x198>
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	f023 0320 	bic.w	r3, r3, #32
 8002d32:	6023      	str	r3, [r4, #0]
 8002d34:	2310      	movs	r3, #16
 8002d36:	e7af      	b.n	8002c98 <_printf_i+0xfc>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	6023      	str	r3, [r4, #0]
 8002d40:	2378      	movs	r3, #120	; 0x78
 8002d42:	4828      	ldr	r0, [pc, #160]	; (8002de4 <_printf_i+0x248>)
 8002d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d48:	e7e3      	b.n	8002d12 <_printf_i+0x176>
 8002d4a:	0659      	lsls	r1, r3, #25
 8002d4c:	bf48      	it	mi
 8002d4e:	b2b6      	uxthmi	r6, r6
 8002d50:	e7e6      	b.n	8002d20 <_printf_i+0x184>
 8002d52:	4615      	mov	r5, r2
 8002d54:	e7bb      	b.n	8002cce <_printf_i+0x132>
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	6826      	ldr	r6, [r4, #0]
 8002d5a:	1d18      	adds	r0, r3, #4
 8002d5c:	6961      	ldr	r1, [r4, #20]
 8002d5e:	6028      	str	r0, [r5, #0]
 8002d60:	0635      	lsls	r5, r6, #24
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	d501      	bpl.n	8002d6a <_printf_i+0x1ce>
 8002d66:	6019      	str	r1, [r3, #0]
 8002d68:	e002      	b.n	8002d70 <_printf_i+0x1d4>
 8002d6a:	0670      	lsls	r0, r6, #25
 8002d6c:	d5fb      	bpl.n	8002d66 <_printf_i+0x1ca>
 8002d6e:	8019      	strh	r1, [r3, #0]
 8002d70:	2300      	movs	r3, #0
 8002d72:	4615      	mov	r5, r2
 8002d74:	6123      	str	r3, [r4, #16]
 8002d76:	e7ba      	b.n	8002cee <_printf_i+0x152>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	1d1a      	adds	r2, r3, #4
 8002d7e:	602a      	str	r2, [r5, #0]
 8002d80:	681d      	ldr	r5, [r3, #0]
 8002d82:	6862      	ldr	r2, [r4, #4]
 8002d84:	4628      	mov	r0, r5
 8002d86:	f000 f82f 	bl	8002de8 <memchr>
 8002d8a:	b108      	cbz	r0, 8002d90 <_printf_i+0x1f4>
 8002d8c:	1b40      	subs	r0, r0, r5
 8002d8e:	6060      	str	r0, [r4, #4]
 8002d90:	6863      	ldr	r3, [r4, #4]
 8002d92:	6123      	str	r3, [r4, #16]
 8002d94:	2300      	movs	r3, #0
 8002d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d9a:	e7a8      	b.n	8002cee <_printf_i+0x152>
 8002d9c:	462a      	mov	r2, r5
 8002d9e:	4649      	mov	r1, r9
 8002da0:	4640      	mov	r0, r8
 8002da2:	6923      	ldr	r3, [r4, #16]
 8002da4:	47d0      	blx	sl
 8002da6:	3001      	adds	r0, #1
 8002da8:	d0ab      	beq.n	8002d02 <_printf_i+0x166>
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	079b      	lsls	r3, r3, #30
 8002dae:	d413      	bmi.n	8002dd8 <_printf_i+0x23c>
 8002db0:	68e0      	ldr	r0, [r4, #12]
 8002db2:	9b03      	ldr	r3, [sp, #12]
 8002db4:	4298      	cmp	r0, r3
 8002db6:	bfb8      	it	lt
 8002db8:	4618      	movlt	r0, r3
 8002dba:	e7a4      	b.n	8002d06 <_printf_i+0x16a>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	4632      	mov	r2, r6
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	47d0      	blx	sl
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	d09b      	beq.n	8002d02 <_printf_i+0x166>
 8002dca:	3501      	adds	r5, #1
 8002dcc:	68e3      	ldr	r3, [r4, #12]
 8002dce:	9903      	ldr	r1, [sp, #12]
 8002dd0:	1a5b      	subs	r3, r3, r1
 8002dd2:	42ab      	cmp	r3, r5
 8002dd4:	dcf2      	bgt.n	8002dbc <_printf_i+0x220>
 8002dd6:	e7eb      	b.n	8002db0 <_printf_i+0x214>
 8002dd8:	2500      	movs	r5, #0
 8002dda:	f104 0619 	add.w	r6, r4, #25
 8002dde:	e7f5      	b.n	8002dcc <_printf_i+0x230>
 8002de0:	0800310d 	.word	0x0800310d
 8002de4:	0800311e 	.word	0x0800311e

08002de8 <memchr>:
 8002de8:	4603      	mov	r3, r0
 8002dea:	b510      	push	{r4, lr}
 8002dec:	b2c9      	uxtb	r1, r1
 8002dee:	4402      	add	r2, r0
 8002df0:	4293      	cmp	r3, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	d101      	bne.n	8002dfa <memchr+0x12>
 8002df6:	2000      	movs	r0, #0
 8002df8:	e003      	b.n	8002e02 <memchr+0x1a>
 8002dfa:	7804      	ldrb	r4, [r0, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	428c      	cmp	r4, r1
 8002e00:	d1f6      	bne.n	8002df0 <memchr+0x8>
 8002e02:	bd10      	pop	{r4, pc}

08002e04 <memmove>:
 8002e04:	4288      	cmp	r0, r1
 8002e06:	b510      	push	{r4, lr}
 8002e08:	eb01 0402 	add.w	r4, r1, r2
 8002e0c:	d902      	bls.n	8002e14 <memmove+0x10>
 8002e0e:	4284      	cmp	r4, r0
 8002e10:	4623      	mov	r3, r4
 8002e12:	d807      	bhi.n	8002e24 <memmove+0x20>
 8002e14:	1e43      	subs	r3, r0, #1
 8002e16:	42a1      	cmp	r1, r4
 8002e18:	d008      	beq.n	8002e2c <memmove+0x28>
 8002e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e22:	e7f8      	b.n	8002e16 <memmove+0x12>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4402      	add	r2, r0
 8002e28:	428a      	cmp	r2, r1
 8002e2a:	d100      	bne.n	8002e2e <memmove+0x2a>
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e36:	e7f7      	b.n	8002e28 <memmove+0x24>

08002e38 <_free_r>:
 8002e38:	b538      	push	{r3, r4, r5, lr}
 8002e3a:	4605      	mov	r5, r0
 8002e3c:	2900      	cmp	r1, #0
 8002e3e:	d040      	beq.n	8002ec2 <_free_r+0x8a>
 8002e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e44:	1f0c      	subs	r4, r1, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bfb8      	it	lt
 8002e4a:	18e4      	addlt	r4, r4, r3
 8002e4c:	f000 f910 	bl	8003070 <__malloc_lock>
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <_free_r+0x8c>)
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	b933      	cbnz	r3, 8002e64 <_free_r+0x2c>
 8002e56:	6063      	str	r3, [r4, #4]
 8002e58:	6014      	str	r4, [r2, #0]
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e60:	f000 b90c 	b.w	800307c <__malloc_unlock>
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	d908      	bls.n	8002e7a <_free_r+0x42>
 8002e68:	6820      	ldr	r0, [r4, #0]
 8002e6a:	1821      	adds	r1, r4, r0
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	bf01      	itttt	eq
 8002e70:	6819      	ldreq	r1, [r3, #0]
 8002e72:	685b      	ldreq	r3, [r3, #4]
 8002e74:	1809      	addeq	r1, r1, r0
 8002e76:	6021      	streq	r1, [r4, #0]
 8002e78:	e7ed      	b.n	8002e56 <_free_r+0x1e>
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b10b      	cbz	r3, 8002e84 <_free_r+0x4c>
 8002e80:	42a3      	cmp	r3, r4
 8002e82:	d9fa      	bls.n	8002e7a <_free_r+0x42>
 8002e84:	6811      	ldr	r1, [r2, #0]
 8002e86:	1850      	adds	r0, r2, r1
 8002e88:	42a0      	cmp	r0, r4
 8002e8a:	d10b      	bne.n	8002ea4 <_free_r+0x6c>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	4401      	add	r1, r0
 8002e90:	1850      	adds	r0, r2, r1
 8002e92:	4283      	cmp	r3, r0
 8002e94:	6011      	str	r1, [r2, #0]
 8002e96:	d1e0      	bne.n	8002e5a <_free_r+0x22>
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4401      	add	r1, r0
 8002e9e:	6011      	str	r1, [r2, #0]
 8002ea0:	6053      	str	r3, [r2, #4]
 8002ea2:	e7da      	b.n	8002e5a <_free_r+0x22>
 8002ea4:	d902      	bls.n	8002eac <_free_r+0x74>
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	e7d6      	b.n	8002e5a <_free_r+0x22>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	1821      	adds	r1, r4, r0
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	bf01      	itttt	eq
 8002eb4:	6819      	ldreq	r1, [r3, #0]
 8002eb6:	685b      	ldreq	r3, [r3, #4]
 8002eb8:	1809      	addeq	r1, r1, r0
 8002eba:	6021      	streq	r1, [r4, #0]
 8002ebc:	6063      	str	r3, [r4, #4]
 8002ebe:	6054      	str	r4, [r2, #4]
 8002ec0:	e7cb      	b.n	8002e5a <_free_r+0x22>
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	20000240 	.word	0x20000240

08002ec8 <sbrk_aligned>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4e0e      	ldr	r6, [pc, #56]	; (8002f04 <sbrk_aligned+0x3c>)
 8002ecc:	460c      	mov	r4, r1
 8002ece:	6831      	ldr	r1, [r6, #0]
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	b911      	cbnz	r1, 8002eda <sbrk_aligned+0x12>
 8002ed4:	f000 f8bc 	bl	8003050 <_sbrk_r>
 8002ed8:	6030      	str	r0, [r6, #0]
 8002eda:	4621      	mov	r1, r4
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 f8b7 	bl	8003050 <_sbrk_r>
 8002ee2:	1c43      	adds	r3, r0, #1
 8002ee4:	d00a      	beq.n	8002efc <sbrk_aligned+0x34>
 8002ee6:	1cc4      	adds	r4, r0, #3
 8002ee8:	f024 0403 	bic.w	r4, r4, #3
 8002eec:	42a0      	cmp	r0, r4
 8002eee:	d007      	beq.n	8002f00 <sbrk_aligned+0x38>
 8002ef0:	1a21      	subs	r1, r4, r0
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f000 f8ac 	bl	8003050 <_sbrk_r>
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d101      	bne.n	8002f00 <sbrk_aligned+0x38>
 8002efc:	f04f 34ff 	mov.w	r4, #4294967295
 8002f00:	4620      	mov	r0, r4
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	20000244 	.word	0x20000244

08002f08 <_malloc_r>:
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	1ccd      	adds	r5, r1, #3
 8002f0e:	f025 0503 	bic.w	r5, r5, #3
 8002f12:	3508      	adds	r5, #8
 8002f14:	2d0c      	cmp	r5, #12
 8002f16:	bf38      	it	cc
 8002f18:	250c      	movcc	r5, #12
 8002f1a:	2d00      	cmp	r5, #0
 8002f1c:	4607      	mov	r7, r0
 8002f1e:	db01      	blt.n	8002f24 <_malloc_r+0x1c>
 8002f20:	42a9      	cmp	r1, r5
 8002f22:	d905      	bls.n	8002f30 <_malloc_r+0x28>
 8002f24:	230c      	movs	r3, #12
 8002f26:	2600      	movs	r6, #0
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f30:	4e2e      	ldr	r6, [pc, #184]	; (8002fec <_malloc_r+0xe4>)
 8002f32:	f000 f89d 	bl	8003070 <__malloc_lock>
 8002f36:	6833      	ldr	r3, [r6, #0]
 8002f38:	461c      	mov	r4, r3
 8002f3a:	bb34      	cbnz	r4, 8002f8a <_malloc_r+0x82>
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4638      	mov	r0, r7
 8002f40:	f7ff ffc2 	bl	8002ec8 <sbrk_aligned>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	4604      	mov	r4, r0
 8002f48:	d14d      	bne.n	8002fe6 <_malloc_r+0xde>
 8002f4a:	6834      	ldr	r4, [r6, #0]
 8002f4c:	4626      	mov	r6, r4
 8002f4e:	2e00      	cmp	r6, #0
 8002f50:	d140      	bne.n	8002fd4 <_malloc_r+0xcc>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	4631      	mov	r1, r6
 8002f56:	4638      	mov	r0, r7
 8002f58:	eb04 0803 	add.w	r8, r4, r3
 8002f5c:	f000 f878 	bl	8003050 <_sbrk_r>
 8002f60:	4580      	cmp	r8, r0
 8002f62:	d13a      	bne.n	8002fda <_malloc_r+0xd2>
 8002f64:	6821      	ldr	r1, [r4, #0]
 8002f66:	3503      	adds	r5, #3
 8002f68:	1a6d      	subs	r5, r5, r1
 8002f6a:	f025 0503 	bic.w	r5, r5, #3
 8002f6e:	3508      	adds	r5, #8
 8002f70:	2d0c      	cmp	r5, #12
 8002f72:	bf38      	it	cc
 8002f74:	250c      	movcc	r5, #12
 8002f76:	4638      	mov	r0, r7
 8002f78:	4629      	mov	r1, r5
 8002f7a:	f7ff ffa5 	bl	8002ec8 <sbrk_aligned>
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d02b      	beq.n	8002fda <_malloc_r+0xd2>
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	442b      	add	r3, r5
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	e00e      	b.n	8002fa8 <_malloc_r+0xa0>
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	1b52      	subs	r2, r2, r5
 8002f8e:	d41e      	bmi.n	8002fce <_malloc_r+0xc6>
 8002f90:	2a0b      	cmp	r2, #11
 8002f92:	d916      	bls.n	8002fc2 <_malloc_r+0xba>
 8002f94:	1961      	adds	r1, r4, r5
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	6025      	str	r5, [r4, #0]
 8002f9a:	bf18      	it	ne
 8002f9c:	6059      	strne	r1, [r3, #4]
 8002f9e:	6863      	ldr	r3, [r4, #4]
 8002fa0:	bf08      	it	eq
 8002fa2:	6031      	streq	r1, [r6, #0]
 8002fa4:	5162      	str	r2, [r4, r5]
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	4638      	mov	r0, r7
 8002faa:	f104 060b 	add.w	r6, r4, #11
 8002fae:	f000 f865 	bl	800307c <__malloc_unlock>
 8002fb2:	f026 0607 	bic.w	r6, r6, #7
 8002fb6:	1d23      	adds	r3, r4, #4
 8002fb8:	1af2      	subs	r2, r6, r3
 8002fba:	d0b6      	beq.n	8002f2a <_malloc_r+0x22>
 8002fbc:	1b9b      	subs	r3, r3, r6
 8002fbe:	50a3      	str	r3, [r4, r2]
 8002fc0:	e7b3      	b.n	8002f2a <_malloc_r+0x22>
 8002fc2:	6862      	ldr	r2, [r4, #4]
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	bf0c      	ite	eq
 8002fc8:	6032      	streq	r2, [r6, #0]
 8002fca:	605a      	strne	r2, [r3, #4]
 8002fcc:	e7ec      	b.n	8002fa8 <_malloc_r+0xa0>
 8002fce:	4623      	mov	r3, r4
 8002fd0:	6864      	ldr	r4, [r4, #4]
 8002fd2:	e7b2      	b.n	8002f3a <_malloc_r+0x32>
 8002fd4:	4634      	mov	r4, r6
 8002fd6:	6876      	ldr	r6, [r6, #4]
 8002fd8:	e7b9      	b.n	8002f4e <_malloc_r+0x46>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	4638      	mov	r0, r7
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	f000 f84c 	bl	800307c <__malloc_unlock>
 8002fe4:	e7a1      	b.n	8002f2a <_malloc_r+0x22>
 8002fe6:	6025      	str	r5, [r4, #0]
 8002fe8:	e7de      	b.n	8002fa8 <_malloc_r+0xa0>
 8002fea:	bf00      	nop
 8002fec:	20000240 	.word	0x20000240

08002ff0 <_realloc_r>:
 8002ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff4:	4680      	mov	r8, r0
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	460e      	mov	r6, r1
 8002ffa:	b921      	cbnz	r1, 8003006 <_realloc_r+0x16>
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003002:	f7ff bf81 	b.w	8002f08 <_malloc_r>
 8003006:	b92a      	cbnz	r2, 8003014 <_realloc_r+0x24>
 8003008:	f7ff ff16 	bl	8002e38 <_free_r>
 800300c:	4625      	mov	r5, r4
 800300e:	4628      	mov	r0, r5
 8003010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003014:	f000 f838 	bl	8003088 <_malloc_usable_size_r>
 8003018:	4284      	cmp	r4, r0
 800301a:	4607      	mov	r7, r0
 800301c:	d802      	bhi.n	8003024 <_realloc_r+0x34>
 800301e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003022:	d812      	bhi.n	800304a <_realloc_r+0x5a>
 8003024:	4621      	mov	r1, r4
 8003026:	4640      	mov	r0, r8
 8003028:	f7ff ff6e 	bl	8002f08 <_malloc_r>
 800302c:	4605      	mov	r5, r0
 800302e:	2800      	cmp	r0, #0
 8003030:	d0ed      	beq.n	800300e <_realloc_r+0x1e>
 8003032:	42bc      	cmp	r4, r7
 8003034:	4622      	mov	r2, r4
 8003036:	4631      	mov	r1, r6
 8003038:	bf28      	it	cs
 800303a:	463a      	movcs	r2, r7
 800303c:	f7ff fbac 	bl	8002798 <memcpy>
 8003040:	4631      	mov	r1, r6
 8003042:	4640      	mov	r0, r8
 8003044:	f7ff fef8 	bl	8002e38 <_free_r>
 8003048:	e7e1      	b.n	800300e <_realloc_r+0x1e>
 800304a:	4635      	mov	r5, r6
 800304c:	e7df      	b.n	800300e <_realloc_r+0x1e>
	...

08003050 <_sbrk_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	2300      	movs	r3, #0
 8003054:	4d05      	ldr	r5, [pc, #20]	; (800306c <_sbrk_r+0x1c>)
 8003056:	4604      	mov	r4, r0
 8003058:	4608      	mov	r0, r1
 800305a:	602b      	str	r3, [r5, #0]
 800305c:	f7fd fa5a 	bl	8000514 <_sbrk>
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	d102      	bne.n	800306a <_sbrk_r+0x1a>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	b103      	cbz	r3, 800306a <_sbrk_r+0x1a>
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	bd38      	pop	{r3, r4, r5, pc}
 800306c:	20000248 	.word	0x20000248

08003070 <__malloc_lock>:
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <__malloc_lock+0x8>)
 8003072:	f000 b811 	b.w	8003098 <__retarget_lock_acquire_recursive>
 8003076:	bf00      	nop
 8003078:	2000024c 	.word	0x2000024c

0800307c <__malloc_unlock>:
 800307c:	4801      	ldr	r0, [pc, #4]	; (8003084 <__malloc_unlock+0x8>)
 800307e:	f000 b80c 	b.w	800309a <__retarget_lock_release_recursive>
 8003082:	bf00      	nop
 8003084:	2000024c 	.word	0x2000024c

08003088 <_malloc_usable_size_r>:
 8003088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800308c:	1f18      	subs	r0, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	bfbc      	itt	lt
 8003092:	580b      	ldrlt	r3, [r1, r0]
 8003094:	18c0      	addlt	r0, r0, r3
 8003096:	4770      	bx	lr

08003098 <__retarget_lock_acquire_recursive>:
 8003098:	4770      	bx	lr

0800309a <__retarget_lock_release_recursive>:
 800309a:	4770      	bx	lr

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
