
imuTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000669c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080067b0  080067b0  000167b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf4  08006bf4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006bf4  08006bf4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bf4  08006bf4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001dc  08006dd8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006dd8  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eac3  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb6  00000000  00000000  0002ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00030b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00031a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e34  00000000  00000000  000328c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa56  00000000  00000000  0004b6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea6a  00000000  00000000  0005b14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  000e9c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006794 	.word	0x08006794

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006794 	.word	0x08006794

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;
int milliSec;

void MPU6050_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, HAL_MAX_DELAY);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	2301      	movs	r3, #1
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	2275      	movs	r2, #117	; 0x75
 8000b40:	21d0      	movs	r1, #208	; 0xd0
 8000b42:	4823      	ldr	r0, [pc, #140]	; (8000bd0 <MPU6050_Init+0xa8>)
 8000b44:	f001 fac4 	bl	80020d0 <HAL_I2C_Mem_Read>

	if (check == 104)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b68      	cmp	r3, #104	; 0x68
 8000b4c:	d13b      	bne.n	8000bc6 <MPU6050_Init+0x9e>
	{
		Data = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, HAL_MAX_DELAY);
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	9302      	str	r3, [sp, #8]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2301      	movs	r3, #1
 8000b62:	226b      	movs	r2, #107	; 0x6b
 8000b64:	21d0      	movs	r1, #208	; 0xd0
 8000b66:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <MPU6050_Init+0xa8>)
 8000b68:	f001 f9b8 	bl	8001edc <HAL_I2C_Mem_Write>

		Data = 0x07;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, HAL_MAX_DELAY);
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	2301      	movs	r3, #1
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	1dbb      	adds	r3, r7, #6
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	2219      	movs	r2, #25
 8000b82:	21d0      	movs	r1, #208	; 0xd0
 8000b84:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <MPU6050_Init+0xa8>)
 8000b86:	f001 f9a9 	bl	8001edc <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, HAL_MAX_DELAY);
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	2301      	movs	r3, #1
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	1dbb      	adds	r3, r7, #6
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	221c      	movs	r2, #28
 8000ba0:	21d0      	movs	r1, #208	; 0xd0
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MPU6050_Init+0xa8>)
 8000ba4:	f001 f99a 	bl	8001edc <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, HAL_MAX_DELAY);
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	221b      	movs	r2, #27
 8000bbe:	21d0      	movs	r1, #208	; 0xd0
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MPU6050_Init+0xa8>)
 8000bc2:	f001 f98b 	bl	8001edc <HAL_I2C_Mem_Write>

	}
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000214 	.word	0x20000214

08000bd4 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	2306      	movs	r3, #6
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	463b      	mov	r3, r7
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2301      	movs	r3, #1
 8000bea:	223b      	movs	r2, #59	; 0x3b
 8000bec:	21d0      	movs	r1, #208	; 0xd0
 8000bee:	482f      	ldr	r0, [pc, #188]	; (8000cac <MPU6050_Read_Accel+0xd8>)
 8000bf0:	f001 fa6e 	bl	80020d0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000bf4:	783b      	ldrb	r3, [r7, #0]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	787b      	ldrb	r3, [r7, #1]
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <MPU6050_Read_Accel+0xdc>)
 8000c04:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000c06:	78bb      	ldrb	r3, [r7, #2]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MPU6050_Read_Accel+0xe0>)
 8000c16:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000c18:	793b      	ldrb	r3, [r7, #4]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <MPU6050_Read_Accel+0xe4>)
 8000c28:	801a      	strh	r2, [r3, #0]

	Ax = Accel_X_RAW / 16384.0;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MPU6050_Read_Accel+0xdc>)
 8000c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fbe7 	bl	8000404 <__aeabi_i2d>
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <MPU6050_Read_Accel+0xe8>)
 8000c3c:	f7ff fd76 	bl	800072c <__aeabi_ddiv>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f7ff ff1e 	bl	8000a88 <__aeabi_d2f>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <MPU6050_Read_Accel+0xec>)
 8000c50:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW / 16384.0;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MPU6050_Read_Accel+0xe0>)
 8000c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fbd3 	bl	8000404 <__aeabi_i2d>
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MPU6050_Read_Accel+0xe8>)
 8000c64:	f7ff fd62 	bl	800072c <__aeabi_ddiv>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f7ff ff0a 	bl	8000a88 <__aeabi_d2f>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <MPU6050_Read_Accel+0xf0>)
 8000c78:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW / 16384.0;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MPU6050_Read_Accel+0xe4>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fbbf 	bl	8000404 <__aeabi_i2d>
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MPU6050_Read_Accel+0xe8>)
 8000c8c:	f7ff fd4e 	bl	800072c <__aeabi_ddiv>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f7ff fef6 	bl	8000a88 <__aeabi_d2f>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <MPU6050_Read_Accel+0xf4>)
 8000ca0:	6013      	str	r3, [r2, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000214 	.word	0x20000214
 8000cb0:	200001f8 	.word	0x200001f8
 8000cb4:	200001fa 	.word	0x200001fa
 8000cb8:	200001fc 	.word	0x200001fc
 8000cbc:	40d00000 	.word	0x40d00000
 8000cc0:	20000270 	.word	0x20000270
 8000cc4:	20000268 	.word	0x20000268
 8000cc8:	200002c0 	.word	0x200002c0
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2306      	movs	r3, #6
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	2243      	movs	r2, #67	; 0x43
 8000ce8:	21d0      	movs	r1, #208	; 0xd0
 8000cea:	4831      	ldr	r0, [pc, #196]	; (8000db0 <MPU6050_Read_Gyro+0xe0>)
 8000cec:	f001 f9f0 	bl	80020d0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000cf0:	783b      	ldrb	r3, [r7, #0]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	787b      	ldrb	r3, [r7, #1]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <MPU6050_Read_Gyro+0xe4>)
 8000d00:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000d02:	78bb      	ldrb	r3, [r7, #2]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MPU6050_Read_Gyro+0xe8>)
 8000d12:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000d14:	793b      	ldrb	r3, [r7, #4]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	797b      	ldrb	r3, [r7, #5]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MPU6050_Read_Gyro+0xec>)
 8000d24:	801a      	strh	r2, [r3, #0]

	Gx = Gyro_X_RAW / 131.0;
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MPU6050_Read_Gyro+0xe4>)
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb69 	bl	8000404 <__aeabi_i2d>
 8000d32:	a31d      	add	r3, pc, #116	; (adr r3, 8000da8 <MPU6050_Read_Gyro+0xd8>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fcf8 	bl	800072c <__aeabi_ddiv>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f7ff fea0 	bl	8000a88 <__aeabi_d2f>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <MPU6050_Read_Gyro+0xf0>)
 8000d4c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW / 131.0;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MPU6050_Read_Gyro+0xe8>)
 8000d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fb55 	bl	8000404 <__aeabi_i2d>
 8000d5a:	a313      	add	r3, pc, #76	; (adr r3, 8000da8 <MPU6050_Read_Gyro+0xd8>)
 8000d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d60:	f7ff fce4 	bl	800072c <__aeabi_ddiv>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f7ff fe8c 	bl	8000a88 <__aeabi_d2f>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <MPU6050_Read_Gyro+0xf4>)
 8000d74:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW / 131.0;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MPU6050_Read_Gyro+0xec>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb41 	bl	8000404 <__aeabi_i2d>
 8000d82:	a309      	add	r3, pc, #36	; (adr r3, 8000da8 <MPU6050_Read_Gyro+0xd8>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fcd0 	bl	800072c <__aeabi_ddiv>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fe78 	bl	8000a88 <__aeabi_d2f>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MPU6050_Read_Gyro+0xf8>)
 8000d9c:	6013      	str	r3, [r2, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	00000000 	.word	0x00000000
 8000dac:	40606000 	.word	0x40606000
 8000db0:	20000214 	.word	0x20000214
 8000db4:	200001fe 	.word	0x200001fe
 8000db8:	20000200 	.word	0x20000200
 8000dbc:	20000202 	.word	0x20000202
 8000dc0:	20000210 	.word	0x20000210
 8000dc4:	2000026c 	.word	0x2000026c
 8000dc8:	20000350 	.word	0x20000350

08000dcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dd0:	b090      	sub	sp, #64	; 0x40
 8000dd2:	af0a      	add	r7, sp, #40	; 0x28
 8000dd4:	6178      	str	r0, [r7, #20]
	HAL_GPIO_TogglePin(Ld2_GPIO_Port, Ld2_Pin);
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	482b      	ldr	r0, [pc, #172]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ddc:	f000 ff20 	bl	8001c20 <HAL_GPIO_TogglePin>
	MPU6050_Read_Accel();
 8000de0:	f7ff fef8 	bl	8000bd4 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8000de4:	f7ff ff74 	bl	8000cd0 <MPU6050_Read_Gyro>

	milliSec +=1;
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000df0:	6013      	str	r3, [r2, #0]
	while(milliSec >= 500)
 8000df2:	e03d      	b.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0xa4>
	{
		printf("Gx: %f Gy: %f Gz: %f\n Ax: %f Ay: %f Az: %f\n ==============\n", Gx, Gy, Gz, Ax, Ay, Az);
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb15 	bl	8000428 <__aeabi_f2d>
 8000dfe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fb0e 	bl	8000428 <__aeabi_f2d>
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460d      	mov	r5, r1
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fb07 	bl	8000428 <__aeabi_f2d>
 8000e1a:	4680      	mov	r8, r0
 8000e1c:	4689      	mov	r9, r1
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb00 	bl	8000428 <__aeabi_f2d>
 8000e28:	4682      	mov	sl, r0
 8000e2a:	468b      	mov	fp, r1
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff faf9 	bl	8000428 <__aeabi_f2d>
 8000e36:	e9c7 0100 	strd	r0, r1, [r7]
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff faf2 	bl	8000428 <__aeabi_f2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000e4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000e50:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8000e54:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000e58:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000e5c:	e9cd 4500 	strd	r4, r5, [sp]
 8000e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e64:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000e66:	f003 fc09 	bl	800467c <iprintf>
		milliSec = 0;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	while(milliSec >= 500)
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e78:	dabc      	bge.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0x28>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e86:	bf00      	nop
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	200002bc 	.word	0x200002bc
 8000e90:	20000210 	.word	0x20000210
 8000e94:	2000026c 	.word	0x2000026c
 8000e98:	20000350 	.word	0x20000350
 8000e9c:	20000270 	.word	0x20000270
 8000ea0:	20000268 	.word	0x20000268
 8000ea4:	200002c0 	.word	0x200002c0
 8000ea8:	080067b0 	.word	0x080067b0

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fbd4 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f816 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 f954 	bl	8001164 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ebc:	f000 f856 	bl	8000f6c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 f926 	bl	8001110 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ec4:	f000 f880 	bl	8000fc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ec8:	f000 f8d0 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000ecc:	f7ff fe2c 	bl	8000b28 <MPU6050_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <main+0x34>)
 8000ed2:	f002 fb29 	bl	8003528 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_TIM_PeriodElapsedCallback(&htim2);
 8000ed6:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <main+0x34>)
 8000ed8:	f7ff ff78 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
 8000edc:	e7fb      	b.n	8000ed6 <main+0x2a>
 8000ede:	bf00      	nop
 8000ee0:	200002c4 	.word	0x200002c4

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b090      	sub	sp, #64	; 0x40
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	2228      	movs	r2, #40	; 0x28
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 ff5a 	bl	8003dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0318 	add.w	r3, r7, #24
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fe92 	bl	8002c54 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000f36:	f000 f96d 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 f8fe 	bl	8003154 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f5e:	f000 f959 	bl	8001214 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3740      	adds	r7, #64	; 0x40
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <MX_I2C1_Init+0x54>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_I2C1_Init+0x58>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000faa:	f000 fe53 	bl	8001c54 <HAL_I2C_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb4:	f000 f92e 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000214 	.word	0x20000214
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	00061a80 	.word	0x00061a80

08000fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_TIM1_Init+0x9c>)
 8000fe8:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <MX_TIM1_Init+0xa0>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_TIM1_Init+0x9c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_TIM1_Init+0x9c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_TIM1_Init+0x9c>)
 8000ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_TIM1_Init+0x9c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_TIM1_Init+0x9c>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_TIM1_Init+0x9c>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <MX_TIM1_Init+0x9c>)
 8001014:	f002 fa38 	bl	8003488 <HAL_TIM_Base_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800101e:	f000 f8f9 	bl	8001214 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_TIM1_Init+0x9c>)
 8001032:	f002 fb8f 	bl	8003754 <HAL_TIM_SlaveConfigSynchro>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800103c:	f000 f8ea 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_TIM1_Init+0x9c>)
 800104e:	f002 fd49 	bl	8003ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001058:	f000 f8dc 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000274 	.word	0x20000274
 8001068:	40012c00 	.word	0x40012c00

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_TIM2_Init+0xa0>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_TIM2_Init+0xa0>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_TIM2_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_TIM2_Init+0xa0>)
 800109e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_TIM2_Init+0xa0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_TIM2_Init+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b0:	4816      	ldr	r0, [pc, #88]	; (800110c <MX_TIM2_Init+0xa0>)
 80010b2:	f002 f9e9 	bl	8003488 <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010bc:	f000 f8aa 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_TIM2_Init+0xa0>)
 80010da:	f002 fa77 	bl	80035cc <HAL_TIM_ConfigClockSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80010e4:	f000 f896 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM2_Init+0xa0>)
 80010f6:	f002 fcf5 	bl	8003ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001100:	f000 f888 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200002c4 	.word	0x200002c4

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_USART2_UART_Init+0x50>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800111c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001148:	f002 fd2a 	bl	8003ba0 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001152:	f000 f85f 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000030c 	.word	0x2000030c
 8001160:	40004400 	.word	0x40004400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_GPIO_Init+0xa8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a23      	ldr	r2, [pc, #140]	; (800120c <MX_GPIO_Init+0xa8>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_GPIO_Init+0xa8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <MX_GPIO_Init+0xa8>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_GPIO_Init+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_GPIO_Init+0xa8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_GPIO_Init+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_GPIO_Init+0xac>)
 80011e0:	f000 fd06 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_GPIO_Init+0xac>)
 80011fe:	f000 fb73 	bl	80018e8 <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40011000 	.word	0x40011000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_MspInit+0x5c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <HAL_MspInit+0x5c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_MspInit+0x5c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x5c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_MspInit+0x5c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x5c>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_MspInit+0x60>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_MspInit+0x60>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000

08001284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <HAL_I2C_MspInit+0x70>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d123      	bne.n	80012ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_I2C_MspInit+0x74>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <HAL_I2C_MspInit+0x74>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_I2C_MspInit+0x74>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012bc:	23c0      	movs	r3, #192	; 0xc0
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c0:	2312      	movs	r3, #18
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <HAL_I2C_MspInit+0x78>)
 80012d0:	f000 fb0a 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_I2C_MspInit+0x74>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_I2C_MspInit+0x74>)
 80012da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012de:	61d3      	str	r3, [r2, #28]
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_I2C_MspInit+0x74>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40005400 	.word	0x40005400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010c00 	.word	0x40010c00

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_TIM_Base_MspInit+0x94>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d10c      	bne.n	800133a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 8001326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001338:	e028      	b.n	800138c <HAL_TIM_Base_MspInit+0x8c>
  else if(htim_base->Instance==TIM2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001342:	d123      	bne.n	800138c <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	61d3      	str	r3, [r2, #28]
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_TIM_Base_MspInit+0x98>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001388:	f000 faae 	bl	80018e8 <HAL_GPIO_Init>
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40012c00 	.word	0x40012c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HAL_UART_MspInit+0x88>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d12f      	bne.n	8001420 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_UART_MspInit+0x8c>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_UART_MspInit+0x8c>)
 80013c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ca:	61d3      	str	r3, [r2, #28]
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_UART_MspInit+0x8c>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_UART_MspInit+0x8c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a13      	ldr	r2, [pc, #76]	; (800142c <HAL_UART_MspInit+0x8c>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_UART_MspInit+0x8c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013f0:	2304      	movs	r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <HAL_UART_MspInit+0x90>)
 8001404:	f000 fa70 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001408:	2308      	movs	r3, #8
 800140a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_UART_MspInit+0x90>)
 800141c:	f000 fa64 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40004400 	.word	0x40004400
 800142c:	40021000 	.word	0x40021000
 8001430:	40010800 	.word	0x40010800

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147a:	f000 f935 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}

08001482 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
	return 1;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <_kill>:

int _kill(int pid, int sig)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800149a:	f002 fc5d 	bl	8003d58 <__errno>
 800149e:	4603      	mov	r3, r0
 80014a0:	2216      	movs	r2, #22
 80014a2:	601a      	str	r2, [r3, #0]
	return -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_exit>:

void _exit (int status)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffe7 	bl	8001490 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014c2:	e7fe      	b.n	80014c2 <_exit+0x12>

080014c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00a      	b.n	80014ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d6:	f3af 8000 	nop.w
 80014da:	4601      	mov	r1, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <_read+0x12>
	}

return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e009      	b.n	8001524 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbf1      	blt.n	8001510 <_write+0x12>
	}
	return len;
 800152c:	687b      	ldr	r3, [r7, #4]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_close>:

int _close(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155c:	605a      	str	r2, [r3, #4]
	return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
	return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
	...

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f002 fbc6 	bl	8003d58 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20005000 	.word	0x20005000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	20000204 	.word	0x20000204
 8001600:	20000368 	.word	0x20000368

08001604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001636:	f7ff ffe5 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f002 fb93 	bl	8003d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff fc35 	bl	8000eac <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800164c:	08006bfc 	.word	0x08006bfc
  ldr r2, =_sbss
 8001650:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001654:	20000368 	.word	0x20000368

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f907 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fdd2 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f911 	bl	80018ce <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f8e7 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000008 	.word	0x20000008
 8001708:	20000354 	.word	0x20000354

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000354 	.word	0x20000354

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff90 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff49 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff5e 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff90 	bl	80017d8 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5f 	bl	8001784 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffb0 	bl	800183c <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b08b      	sub	sp, #44	; 0x2c
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fa:	e169      	b.n	8001bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018fc:	2201      	movs	r2, #1
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8158 	bne.w	8001bca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a9a      	ldr	r2, [pc, #616]	; (8001b88 <HAL_GPIO_Init+0x2a0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d05e      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001924:	4a98      	ldr	r2, [pc, #608]	; (8001b88 <HAL_GPIO_Init+0x2a0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d875      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800192a:	4a98      	ldr	r2, [pc, #608]	; (8001b8c <HAL_GPIO_Init+0x2a4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d058      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001930:	4a96      	ldr	r2, [pc, #600]	; (8001b8c <HAL_GPIO_Init+0x2a4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d86f      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001936:	4a96      	ldr	r2, [pc, #600]	; (8001b90 <HAL_GPIO_Init+0x2a8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d052      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 800193c:	4a94      	ldr	r2, [pc, #592]	; (8001b90 <HAL_GPIO_Init+0x2a8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d869      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001942:	4a94      	ldr	r2, [pc, #592]	; (8001b94 <HAL_GPIO_Init+0x2ac>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d04c      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001948:	4a92      	ldr	r2, [pc, #584]	; (8001b94 <HAL_GPIO_Init+0x2ac>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d863      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800194e:	4a92      	ldr	r2, [pc, #584]	; (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d046      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001954:	4a90      	ldr	r2, [pc, #576]	; (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d85d      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800195a:	2b12      	cmp	r3, #18
 800195c:	d82a      	bhi.n	80019b4 <HAL_GPIO_Init+0xcc>
 800195e:	2b12      	cmp	r3, #18
 8001960:	d859      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <HAL_GPIO_Init+0x80>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	080019e3 	.word	0x080019e3
 800196c:	080019bd 	.word	0x080019bd
 8001970:	080019cf 	.word	0x080019cf
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a17 	.word	0x08001a17
 800197c:	08001a17 	.word	0x08001a17
 8001980:	08001a17 	.word	0x08001a17
 8001984:	08001a17 	.word	0x08001a17
 8001988:	08001a17 	.word	0x08001a17
 800198c:	08001a17 	.word	0x08001a17
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a17 	.word	0x08001a17
 8001998:	08001a17 	.word	0x08001a17
 800199c:	08001a17 	.word	0x08001a17
 80019a0:	08001a17 	.word	0x08001a17
 80019a4:	08001a17 	.word	0x08001a17
 80019a8:	08001a17 	.word	0x08001a17
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	080019d9 	.word	0x080019d9
 80019b4:	4a79      	ldr	r2, [pc, #484]	; (8001b9c <HAL_GPIO_Init+0x2b4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ba:	e02c      	b.n	8001a16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e029      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	3304      	adds	r3, #4
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e024      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	3308      	adds	r3, #8
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e01f      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	330c      	adds	r3, #12
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e01a      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ea:	2304      	movs	r3, #4
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e013      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	611a      	str	r2, [r3, #16]
          break;
 8001a02:	e009      	b.n	8001a18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	615a      	str	r2, [r3, #20]
          break;
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          break;
 8001a16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d801      	bhi.n	8001a22 <HAL_GPIO_Init+0x13a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d802      	bhi.n	8001a34 <HAL_GPIO_Init+0x14c>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x152>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3b08      	subs	r3, #8
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	210f      	movs	r1, #15
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80b1 	beq.w	8001bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a68:	4b4d      	ldr	r3, [pc, #308]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a80:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a40      	ldr	r2, [pc, #256]	; (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_GPIO_Init+0x1ec>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3f      	ldr	r2, [pc, #252]	; (8001bac <HAL_GPIO_Init+0x2c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3e      	ldr	r2, [pc, #248]	; (8001bb0 <HAL_GPIO_Init+0x2c8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <HAL_GPIO_Init+0x1e4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3d      	ldr	r2, [pc, #244]	; (8001bb4 <HAL_GPIO_Init+0x2cc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_GPIO_Init+0x1e0>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e006      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ac8:	2304      	movs	r3, #4
 8001aca:	e004      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	f002 0203 	and.w	r2, r2, #3
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae6:	492f      	ldr	r1, [pc, #188]	; (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4928      	ldr	r1, [pc, #160]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4922      	ldr	r1, [pc, #136]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	491e      	ldr	r1, [pc, #120]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4918      	ldr	r1, [pc, #96]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4914      	ldr	r1, [pc, #80]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d021      	beq.n	8001bbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
 8001b84:	e021      	b.n	8001bca <HAL_GPIO_Init+0x2e2>
 8001b86:	bf00      	nop
 8001b88:	10320000 	.word	0x10320000
 8001b8c:	10310000 	.word	0x10310000
 8001b90:	10220000 	.word	0x10220000
 8001b94:	10210000 	.word	0x10210000
 8001b98:	10120000 	.word	0x10120000
 8001b9c:	10110000 	.word	0x10110000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40011400 	.word	0x40011400
 8001bb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4909      	ldr	r1, [pc, #36]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f ae8e 	bne.w	80018fc <HAL_GPIO_Init+0x14>
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	372c      	adds	r7, #44	; 0x2c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43d9      	mvns	r1, r3
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	400b      	ands	r3, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	611a      	str	r2, [r3, #16]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e12b      	b.n	8001ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fb02 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb8:	f001 fba0 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8001cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a81      	ldr	r2, [pc, #516]	; (8001ec8 <HAL_I2C_Init+0x274>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d807      	bhi.n	8001cd8 <HAL_I2C_Init+0x84>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <HAL_I2C_Init+0x278>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e006      	b.n	8001ce6 <HAL_I2C_Init+0x92>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a7d      	ldr	r2, [pc, #500]	; (8001ed0 <HAL_I2C_Init+0x27c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	bf94      	ite	ls
 8001ce0:	2301      	movls	r3, #1
 8001ce2:	2300      	movhi	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0e7      	b.n	8001ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a78      	ldr	r2, [pc, #480]	; (8001ed4 <HAL_I2C_Init+0x280>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_I2C_Init+0x274>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d802      	bhi.n	8001d28 <HAL_I2C_Init+0xd4>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3301      	adds	r3, #1
 8001d26:	e009      	b.n	8001d3c <HAL_I2C_Init+0xe8>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4a69      	ldr	r2, [pc, #420]	; (8001ed8 <HAL_I2C_Init+0x284>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	495c      	ldr	r1, [pc, #368]	; (8001ec8 <HAL_I2C_Init+0x274>)
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d819      	bhi.n	8001d90 <HAL_I2C_Init+0x13c>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e59      	subs	r1, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6a:	1c59      	adds	r1, r3, #1
 8001d6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d70:	400b      	ands	r3, r1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_I2C_Init+0x138>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e59      	subs	r1, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8a:	e051      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e04f      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <HAL_I2C_Init+0x168>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e58      	subs	r0, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	440b      	add	r3, r1
 8001da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e012      	b.n	8001de2 <HAL_I2C_Init+0x18e>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e58      	subs	r0, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	0099      	lsls	r1, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Init+0x196>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e022      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10e      	bne.n	8001e10 <HAL_I2C_Init+0x1bc>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1e58      	subs	r0, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	440b      	add	r3, r1
 8001e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0e:	e00f      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	0099      	lsls	r1, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	6809      	ldr	r1, [r1, #0]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6911      	ldr	r1, [r2, #16]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68d2      	ldr	r2, [r2, #12]
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	000186a0 	.word	0x000186a0
 8001ecc:	001e847f 	.word	0x001e847f
 8001ed0:	003d08ff 	.word	0x003d08ff
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	817b      	strh	r3, [r7, #10]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	813b      	strh	r3, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ef6:	f7ff fc09 	bl	800170c <HAL_GetTick>
 8001efa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	f040 80d9 	bne.w	80020bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2319      	movs	r3, #25
 8001f10:	2201      	movs	r2, #1
 8001f12:	496d      	ldr	r1, [pc, #436]	; (80020c8 <HAL_I2C_Mem_Write+0x1ec>)
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fcc1 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	e0cc      	b.n	80020be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2C_Mem_Write+0x56>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0c5      	b.n	80020be <HAL_I2C_Mem_Write+0x1e2>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d007      	beq.n	8001f58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2221      	movs	r2, #33	; 0x21
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a3a      	ldr	r2, [r7, #32]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <HAL_I2C_Mem_Write+0x1f0>)
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f9a:	88f8      	ldrh	r0, [r7, #6]
 8001f9c:	893a      	ldrh	r2, [r7, #8]
 8001f9e:	8979      	ldrh	r1, [r7, #10]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	4603      	mov	r3, r0
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 faf8 	bl	80025a0 <I2C_RequestMemoryWrite>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d052      	beq.n	800205c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e081      	b.n	80020be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fd42 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d107      	bne.n	8001fe2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06b      	b.n	80020be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b04      	cmp	r3, #4
 8002022:	d11b      	bne.n	800205c <HAL_I2C_Mem_Write+0x180>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d017      	beq.n	800205c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1aa      	bne.n	8001fba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fd2e 	bl	8002aca <I2C_WaitOnBTFFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	2b04      	cmp	r3, #4
 800207a:	d107      	bne.n	800208c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e016      	b.n	80020be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	00100002 	.word	0x00100002
 80020cc:	ffff0000 	.word	0xffff0000

080020d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	4608      	mov	r0, r1
 80020da:	4611      	mov	r1, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	817b      	strh	r3, [r7, #10]
 80020e2:	460b      	mov	r3, r1
 80020e4:	813b      	strh	r3, [r7, #8]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ee:	f7ff fb0d 	bl	800170c <HAL_GetTick>
 80020f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	f040 8244 	bne.w	800258a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2319      	movs	r3, #25
 8002108:	2201      	movs	r2, #1
 800210a:	4982      	ldr	r1, [pc, #520]	; (8002314 <HAL_I2C_Mem_Read+0x244>)
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fbc5 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
 800211a:	e237      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_I2C_Mem_Read+0x5a>
 8002126:	2302      	movs	r3, #2
 8002128:	e230      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d007      	beq.n	8002150 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2222      	movs	r2, #34	; 0x22
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a62      	ldr	r2, [pc, #392]	; (8002318 <HAL_I2C_Mem_Read+0x248>)
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002192:	88f8      	ldrh	r0, [r7, #6]
 8002194:	893a      	ldrh	r2, [r7, #8]
 8002196:	8979      	ldrh	r1, [r7, #10]
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4603      	mov	r3, r0
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fa92 	bl	80026cc <I2C_RequestMemoryRead>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1ec      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e1c0      	b.n	8002564 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d11e      	bne.n	8002228 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002224:	b662      	cpsie	i
}
 8002226:	e035      	b.n	8002294 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b02      	cmp	r3, #2
 800222e:	d11e      	bne.n	800226e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i
}
 8002242:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002268:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800226a:	b662      	cpsie	i
}
 800226c:	e012      	b.n	8002294 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800227c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002294:	e166      	b.n	8002564 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	2b03      	cmp	r3, #3
 800229c:	f200 811f 	bhi.w	80024de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d123      	bne.n	80022f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fc4d 	bl	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e167      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ee:	e139      	b.n	8002564 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d152      	bne.n	800239e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fe:	2200      	movs	r2, #0
 8002300:	4906      	ldr	r1, [pc, #24]	; (800231c <HAL_I2C_Mem_Read+0x24c>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 faca 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e13c      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
 8002312:	bf00      	nop
 8002314:	00100002 	.word	0x00100002
 8002318:	ffff0000 	.word	0xffff0000
 800231c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002366:	b662      	cpsie	i
}
 8002368:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800239c:	e0e2      	b.n	8002564 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	2200      	movs	r2, #0
 80023a6:	497b      	ldr	r1, [pc, #492]	; (8002594 <HAL_I2C_Mem_Read+0x4c4>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fa77 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0e9      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_I2C_Mem_Read+0x4c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_I2C_Mem_Read+0x4cc>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0a1a      	lsrs	r2, r3, #8
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00da      	lsls	r2, r3, #3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	3b01      	subs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d118      	bne.n	8002456 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002446:	b662      	cpsie	i
}
 8002448:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e09a      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d1d9      	bne.n	8002418 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024a6:	b662      	cpsie	i
}
 80024a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024dc:	e042      	b.n	8002564 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fb32 	bl	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e04c      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d118      	bne.n	8002564 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f ae94 	bne.w	8002296 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	00010004 	.word	0x00010004
 8002598:	20000000 	.word	0x20000000
 800259c:	14f8b589 	.word	0x14f8b589

080025a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	817b      	strh	r3, [r7, #10]
 80025b2:	460b      	mov	r3, r1
 80025b4:	813b      	strh	r3, [r7, #8]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f960 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00d      	beq.n	80025fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f0:	d103      	bne.n	80025fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e05f      	b.n	80026be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800260c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	492d      	ldr	r1, [pc, #180]	; (80026c8 <I2C_RequestMemoryWrite+0x128>)
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f998 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04c      	b.n	80026be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	6a39      	ldr	r1, [r7, #32]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fa02 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00d      	beq.n	8002666 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b04      	cmp	r3, #4
 8002650:	d107      	bne.n	8002662 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002660:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e02b      	b.n	80026be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800266c:	893b      	ldrh	r3, [r7, #8]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	e021      	b.n	80026bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002678:	893b      	ldrh	r3, [r7, #8]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	b29b      	uxth	r3, r3
 800267e:	b2da      	uxtb	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	6a39      	ldr	r1, [r7, #32]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f9dc 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b04      	cmp	r3, #4
 800269c:	d107      	bne.n	80026ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e005      	b.n	80026be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b2:	893b      	ldrh	r3, [r7, #8]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	00010002 	.word	0x00010002

080026cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	460b      	mov	r3, r1
 80026e0:	813b      	strh	r3, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002704:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	2200      	movs	r2, #0
 800270e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8c2 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272c:	d103      	bne.n	8002736 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0aa      	b.n	8002890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002748:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	6a3a      	ldr	r2, [r7, #32]
 800274e:	4952      	ldr	r1, [pc, #328]	; (8002898 <I2C_RequestMemoryRead+0x1cc>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f8fa 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e097      	b.n	8002890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	6a39      	ldr	r1, [r7, #32]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f964 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2b04      	cmp	r3, #4
 800278c:	d107      	bne.n	800279e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e076      	b.n	8002890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027a8:	893b      	ldrh	r3, [r7, #8]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	611a      	str	r2, [r3, #16]
 80027b2:	e021      	b.n	80027f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027b4:	893b      	ldrh	r3, [r7, #8]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c4:	6a39      	ldr	r1, [r7, #32]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f93e 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00d      	beq.n	80027ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d107      	bne.n	80027ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e050      	b.n	8002890 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ee:	893b      	ldrh	r3, [r7, #8]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	6a39      	ldr	r1, [r7, #32]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f923 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b04      	cmp	r3, #4
 800280e:	d107      	bne.n	8002820 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e035      	b.n	8002890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002832:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2200      	movs	r2, #0
 800283c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f82b 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285a:	d103      	bne.n	8002864 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e013      	b.n	8002890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002868:	897b      	ldrh	r3, [r7, #10]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	6a3a      	ldr	r2, [r7, #32]
 800287c:	4906      	ldr	r1, [pc, #24]	; (8002898 <I2C_RequestMemoryRead+0x1cc>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f863 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	00010002 	.word	0x00010002

0800289c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ac:	e025      	b.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d021      	beq.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7fe ff29 	bl	800170c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e023      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	e00c      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	429a      	cmp	r2, r3
 800293e:	d0b6      	beq.n	80028ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002958:	e051      	b.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d123      	bne.n	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002982:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0204 	orr.w	r2, r3, #4
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e046      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d021      	beq.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7fe fea7 	bl	800170c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e020      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10c      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e00b      	b.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d18d      	bne.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a54:	e02d      	b.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f8ce 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e02d      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d021      	beq.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fe fe4d 	bl	800170c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d1ca      	bne.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad6:	e02d      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f88d 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e02d      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d021      	beq.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7fe fe0c 	bl	800170c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d1ca      	bne.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b58:	e042      	b.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d119      	bne.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0210 	mvn.w	r2, #16
 8002b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e029      	b.n	8002bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9c:	f7fe fdb6 	bl	800170c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e007      	b.n	8002bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d1b5      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d11b      	bne.n	8002c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e26c      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8087 	beq.w	8002d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c74:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d00c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c80:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d112      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5e>
 8002c8c:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d10b      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9a:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d06c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x12c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d168      	bne.n	8002d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e246      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x76>
 8002cbc:	4b80      	ldr	r3, [pc, #512]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7f      	ldr	r2, [pc, #508]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e02e      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x98>
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7a      	ldr	r2, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a77      	ldr	r2, [pc, #476]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e01d      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0xbc>
 8002cf6:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6e      	ldr	r2, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002d10:	4b6b      	ldr	r3, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a67      	ldr	r2, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fcec 	bl	800170c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe fce8 	bl	800170c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1fa      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe4>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe fcd8 	bl	800170c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe fcd4 	bl	800170c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1e6      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x10c>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x18c>
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x176>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1ba      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4939      	ldr	r1, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	e03a      	b.n	8002e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCC_OscConfig+0x270>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe fc8d 	bl	800170c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe fc89 	bl	800170c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e19b      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4927      	ldr	r1, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fc6c 	bl	800170c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e38:	f7fe fc68 	bl	800170c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e17a      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d03a      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fe fc4c 	bl	800170c <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe fc48 	bl	800170c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e15a      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f000 fad8 	bl	800344c <RCC_Delay>
 8002e9c:	e01c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fc32 	bl	800170c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eaa:	e00f      	b.n	8002ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fc2e 	bl	800170c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d908      	bls.n	8002ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e140      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	42420000 	.word	0x42420000
 8002ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e9      	bne.n	8002eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a6 	beq.w	8003032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b97      	ldr	r3, [pc, #604]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4a93      	ldr	r2, [pc, #588]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	61d3      	str	r3, [r2, #28]
 8002f02:	4b91      	ldr	r3, [pc, #580]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f12:	4b8e      	ldr	r3, [pc, #568]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d118      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a8a      	ldr	r2, [pc, #552]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fbef 	bl	800170c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7fe fbeb 	bl	800170c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b64      	cmp	r3, #100	; 0x64
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0fd      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f44:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x312>
 8002f58:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a7a      	ldr	r2, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	e02d      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x334>
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a72      	ldr	r2, [pc, #456]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	e01c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d10c      	bne.n	8002faa <HAL_RCC_OscConfig+0x356>
 8002f90:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a6c      	ldr	r2, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	f043 0304 	orr.w	r3, r3, #4
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a69      	ldr	r2, [pc, #420]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a66      	ldr	r2, [pc, #408]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6213      	str	r3, [r2, #32]
 8002fb6:	4b64      	ldr	r3, [pc, #400]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d015      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fb9f 	bl	800170c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe fb9b 	bl	800170c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0ab      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	4b57      	ldr	r3, [pc, #348]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ee      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x37e>
 8002ff4:	e014      	b.n	8003020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fb89 	bl	800170c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe fb85 	bl	800170c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e095      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ee      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4b48      	ldr	r3, [pc, #288]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4a47      	ldr	r2, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8081 	beq.w	800313e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800303c:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d061      	beq.n	800310c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d146      	bne.n	80030de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe fb59 	bl	800170c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fb55 	bl	800170c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e067      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003070:	4b35      	ldr	r3, [pc, #212]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	492d      	ldr	r1, [pc, #180]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a19      	ldr	r1, [r3, #32]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	430b      	orrs	r3, r1
 80030aa:	4927      	ldr	r1, [pc, #156]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fb29 	bl	800170c <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe fb25 	bl	800170c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e037      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x46a>
 80030dc:	e02f      	b.n	800313e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fb12 	bl	800170c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fb0e 	bl	800170c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e020      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x498>
 800310a:	e018      	b.n	800313e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e013      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	40007000 	.word	0x40007000
 8003150:	42420060 	.word	0x42420060

08003154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0d0      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	4965      	ldr	r1, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d040      	beq.n	8003274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e073      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06b      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f023 0203 	bic.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4936      	ldr	r1, [pc, #216]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003244:	f7fe fa62 	bl	800170c <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fe fa5e 	bl	800170c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e053      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 020c 	and.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1eb      	bne.n	800324c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d210      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4922      	ldr	r1, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1cc>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f9c0 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
 800331c:	080067fc 	.word	0x080067fc
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b490      	push	{r4, r7}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003330:	1d3c      	adds	r4, r7, #4
 8003332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003338:	f240 2301 	movw	r3, #513	; 0x201
 800333c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d002      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x40>
 8003362:	2b08      	cmp	r3, #8
 8003364:	d003      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x46>
 8003366:	e02d      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800336a:	623b      	str	r3, [r7, #32]
      break;
 800336c:	e02d      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800337a:	4413      	add	r3, r2
 800337c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003380:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800338c:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c5b      	lsrs	r3, r3, #17
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800339a:	4413      	add	r3, r2
 800339c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a6:	fb02 f203 	mul.w	r2, r2, r3
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	e004      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033b8:	fb02 f303 	mul.w	r3, r2, r3
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	623b      	str	r3, [r7, #32]
      break;
 80033c2:	e002      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c6:	623b      	str	r3, [r7, #32]
      break;
 80033c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc90      	pop	{r4, r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	080067ec 	.word	0x080067ec
 80033dc:	40021000 	.word	0x40021000
 80033e0:	007a1200 	.word	0x007a1200
 80033e4:	003d0900 	.word	0x003d0900

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	20000000 	.word	0x20000000

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003400:	f7ff fff2 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	0800680c 	.word	0x0800680c

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003428:	f7ff ffde 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0adb      	lsrs	r3, r3, #11
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	0800680c 	.word	0x0800680c

0800344c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <RCC_Delay+0x34>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <RCC_Delay+0x38>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0a5b      	lsrs	r3, r3, #9
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003468:	bf00      	nop
  }
  while (Delay --);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	60fa      	str	r2, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <RCC_Delay+0x1c>
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	20000000 	.word	0x20000000
 8003484:	10624dd3 	.word	0x10624dd3

08003488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e041      	b.n	800351e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd ff26 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f000 f986 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d001      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e03a      	b.n	80035b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_TIM_Base_Start_IT+0x98>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x58>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d009      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x58>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x58>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d111      	bne.n	80035a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d010      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a2:	e007      	b.n	80035b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800

080035cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_ConfigClockSource+0x18>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0b3      	b.n	800374c <HAL_TIM_ConfigClockSource+0x180>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003602:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361c:	d03e      	beq.n	800369c <HAL_TIM_ConfigClockSource+0xd0>
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	f200 8087 	bhi.w	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362a:	f000 8085 	beq.w	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 800362e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003632:	d87f      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003634:	2b70      	cmp	r3, #112	; 0x70
 8003636:	d01a      	beq.n	800366e <HAL_TIM_ConfigClockSource+0xa2>
 8003638:	2b70      	cmp	r3, #112	; 0x70
 800363a:	d87b      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 800363c:	2b60      	cmp	r3, #96	; 0x60
 800363e:	d050      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x116>
 8003640:	2b60      	cmp	r3, #96	; 0x60
 8003642:	d877      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003644:	2b50      	cmp	r3, #80	; 0x50
 8003646:	d03c      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0xf6>
 8003648:	2b50      	cmp	r3, #80	; 0x50
 800364a:	d873      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d058      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x136>
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d86f      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003654:	2b30      	cmp	r3, #48	; 0x30
 8003656:	d064      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
 8003658:	2b30      	cmp	r3, #48	; 0x30
 800365a:	d86b      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 800365c:	2b20      	cmp	r3, #32
 800365e:	d060      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d867      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d05c      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d05a      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800366c:	e062      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6899      	ldr	r1, [r3, #8]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f000 fa12 	bl	8003aa6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003690:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	609a      	str	r2, [r3, #8]
      break;
 800369a:	e04e      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f000 f9fb 	bl	8003aa6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036be:	609a      	str	r2, [r3, #8]
      break;
 80036c0:	e03b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 f972 	bl	80039b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2150      	movs	r1, #80	; 0x50
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f9c9 	bl	8003a72 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e02b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f000 f990 	bl	8003a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2160      	movs	r1, #96	; 0x60
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f9b9 	bl	8003a72 <TIM_ITRx_SetConfig>
      break;
 8003700:	e01b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	461a      	mov	r2, r3
 8003710:	f000 f952 	bl	80039b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2140      	movs	r1, #64	; 0x40
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f9a9 	bl	8003a72 <TIM_ITRx_SetConfig>
      break;
 8003720:	e00b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f000 f9a0 	bl	8003a72 <TIM_ITRx_SetConfig>
        break;
 8003732:	e002      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003734:	bf00      	nop
 8003736:	e000      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003738:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003768:	2302      	movs	r3, #2
 800376a:	e031      	b.n	80037d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f88c 	bl	800389c <TIM_SlaveTimer_SetConfig>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e018      	b.n	80037d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037bc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <TIM_Base_SetConfig+0xb8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00b      	beq.n	8003808 <TIM_Base_SetConfig+0x30>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0x30>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a26      	ldr	r2, [pc, #152]	; (8003894 <TIM_Base_SetConfig+0xbc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0x30>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a25      	ldr	r2, [pc, #148]	; (8003898 <TIM_Base_SetConfig+0xc0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <TIM_Base_SetConfig+0xb8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00b      	beq.n	800383a <TIM_Base_SetConfig+0x62>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003828:	d007      	beq.n	800383a <TIM_Base_SetConfig+0x62>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <TIM_Base_SetConfig+0xbc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_Base_SetConfig+0x62>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a18      	ldr	r2, [pc, #96]	; (8003898 <TIM_Base_SetConfig+0xc0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d108      	bne.n	800384c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a07      	ldr	r2, [pc, #28]	; (8003890 <TIM_Base_SetConfig+0xb8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d103      	bne.n	8003880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	615a      	str	r2, [r3, #20]
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800

0800389c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0307 	bic.w	r3, r3, #7
 80038c6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b70      	cmp	r3, #112	; 0x70
 80038e0:	d01a      	beq.n	8003918 <TIM_SlaveTimer_SetConfig+0x7c>
 80038e2:	2b70      	cmp	r3, #112	; 0x70
 80038e4:	d860      	bhi.n	80039a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80038e6:	2b60      	cmp	r3, #96	; 0x60
 80038e8:	d054      	beq.n	8003994 <TIM_SlaveTimer_SetConfig+0xf8>
 80038ea:	2b60      	cmp	r3, #96	; 0x60
 80038ec:	d85c      	bhi.n	80039a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80038ee:	2b50      	cmp	r3, #80	; 0x50
 80038f0:	d046      	beq.n	8003980 <TIM_SlaveTimer_SetConfig+0xe4>
 80038f2:	2b50      	cmp	r3, #80	; 0x50
 80038f4:	d858      	bhi.n	80039a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d019      	beq.n	800392e <TIM_SlaveTimer_SetConfig+0x92>
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d854      	bhi.n	80039a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80038fe:	2b30      	cmp	r3, #48	; 0x30
 8003900:	d054      	beq.n	80039ac <TIM_SlaveTimer_SetConfig+0x110>
 8003902:	2b30      	cmp	r3, #48	; 0x30
 8003904:	d850      	bhi.n	80039a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8003906:	2b20      	cmp	r3, #32
 8003908:	d050      	beq.n	80039ac <TIM_SlaveTimer_SetConfig+0x110>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d84c      	bhi.n	80039a8 <TIM_SlaveTimer_SetConfig+0x10c>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04c      	beq.n	80039ac <TIM_SlaveTimer_SetConfig+0x110>
 8003912:	2b10      	cmp	r3, #16
 8003914:	d04a      	beq.n	80039ac <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003916:	e047      	b.n	80039a8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68d9      	ldr	r1, [r3, #12]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f000 f8bd 	bl	8003aa6 <TIM_ETR_SetConfig>
      break;
 800392c:	e03f      	b.n	80039ae <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d101      	bne.n	800393a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e03a      	b.n	80039b0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003960:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	621a      	str	r2, [r3, #32]
      break;
 800397e:	e016      	b.n	80039ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	461a      	mov	r2, r3
 800398e:	f000 f813 	bl	80039b8 <TIM_TI1_ConfigInputStage>
      break;
 8003992:	e00c      	b.n	80039ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	461a      	mov	r2, r3
 80039a2:	f000 f837 	bl	8003a14 <TIM_TI2_ConfigInputStage>
      break;
 80039a6:	e002      	b.n	80039ae <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80039ac:	bf00      	nop
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f023 0201 	bic.w	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 030a 	bic.w	r3, r3, #10
 80039f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 0210 	bic.w	r2, r3, #16
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	031b      	lsls	r3, r3, #12
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f043 0307 	orr.w	r3, r3, #7
 8003a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	609a      	str	r2, [r3, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b087      	sub	sp, #28
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	021a      	lsls	r2, r3, #8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	609a      	str	r2, [r3, #8]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e046      	b.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d009      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d10c      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800

08003ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e03f      	b.n	8003c32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd fbea 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	; 0x24
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f829 	bl	8003c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c76:	f023 030c 	bic.w	r3, r3, #12
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <UART_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d103      	bne.n	8003cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7ff fbbe 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	e002      	b.n	8003cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7ff fba6 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8003cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	441a      	add	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <UART_SetConfig+0x118>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	0119      	lsls	r1, r3, #4
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009a      	lsls	r2, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <UART_SetConfig+0x118>)
 8003cea:	fba3 0302 	umull	r0, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2064      	movs	r0, #100	; 0x64
 8003cf2:	fb00 f303 	mul.w	r3, r0, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	; 0x32
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <UART_SetConfig+0x118>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d08:	4419      	add	r1, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <UART_SetConfig+0x118>)
 8003d22:	fba3 0302 	umull	r0, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2064      	movs	r0, #100	; 0x64
 8003d2a:	fb00 f303 	mul.w	r3, r0, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	; 0x32
 8003d34:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <UART_SetConfig+0x118>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 020f 	and.w	r2, r3, #15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	440a      	add	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40013800 	.word	0x40013800
 8003d54:	51eb851f 	.word	0x51eb851f

08003d58 <__errno>:
 8003d58:	4b01      	ldr	r3, [pc, #4]	; (8003d60 <__errno+0x8>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	2000000c 	.word	0x2000000c

08003d64 <__libc_init_array>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	2600      	movs	r6, #0
 8003d68:	4d0c      	ldr	r5, [pc, #48]	; (8003d9c <__libc_init_array+0x38>)
 8003d6a:	4c0d      	ldr	r4, [pc, #52]	; (8003da0 <__libc_init_array+0x3c>)
 8003d6c:	1b64      	subs	r4, r4, r5
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	42a6      	cmp	r6, r4
 8003d72:	d109      	bne.n	8003d88 <__libc_init_array+0x24>
 8003d74:	f002 fd0e 	bl	8006794 <_init>
 8003d78:	2600      	movs	r6, #0
 8003d7a:	4d0a      	ldr	r5, [pc, #40]	; (8003da4 <__libc_init_array+0x40>)
 8003d7c:	4c0a      	ldr	r4, [pc, #40]	; (8003da8 <__libc_init_array+0x44>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	42a6      	cmp	r6, r4
 8003d84:	d105      	bne.n	8003d92 <__libc_init_array+0x2e>
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8c:	4798      	blx	r3
 8003d8e:	3601      	adds	r6, #1
 8003d90:	e7ee      	b.n	8003d70 <__libc_init_array+0xc>
 8003d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d96:	4798      	blx	r3
 8003d98:	3601      	adds	r6, #1
 8003d9a:	e7f2      	b.n	8003d82 <__libc_init_array+0x1e>
 8003d9c:	08006bf4 	.word	0x08006bf4
 8003da0:	08006bf4 	.word	0x08006bf4
 8003da4:	08006bf4 	.word	0x08006bf4
 8003da8:	08006bf8 	.word	0x08006bf8

08003dac <memset>:
 8003dac:	4603      	mov	r3, r0
 8003dae:	4402      	add	r2, r0
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d100      	bne.n	8003db6 <memset+0xa>
 8003db4:	4770      	bx	lr
 8003db6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dba:	e7f9      	b.n	8003db0 <memset+0x4>

08003dbc <__cvt>:
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc2:	461f      	mov	r7, r3
 8003dc4:	bfbb      	ittet	lt
 8003dc6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003dca:	461f      	movlt	r7, r3
 8003dcc:	2300      	movge	r3, #0
 8003dce:	232d      	movlt	r3, #45	; 0x2d
 8003dd0:	b088      	sub	sp, #32
 8003dd2:	4614      	mov	r4, r2
 8003dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003dd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003dd8:	7013      	strb	r3, [r2, #0]
 8003dda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ddc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003de0:	f023 0820 	bic.w	r8, r3, #32
 8003de4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003de8:	d005      	beq.n	8003df6 <__cvt+0x3a>
 8003dea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dee:	d100      	bne.n	8003df2 <__cvt+0x36>
 8003df0:	3501      	adds	r5, #1
 8003df2:	2302      	movs	r3, #2
 8003df4:	e000      	b.n	8003df8 <__cvt+0x3c>
 8003df6:	2303      	movs	r3, #3
 8003df8:	aa07      	add	r2, sp, #28
 8003dfa:	9204      	str	r2, [sp, #16]
 8003dfc:	aa06      	add	r2, sp, #24
 8003dfe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e02:	e9cd 3500 	strd	r3, r5, [sp]
 8003e06:	4622      	mov	r2, r4
 8003e08:	463b      	mov	r3, r7
 8003e0a:	f000 fcdd 	bl	80047c8 <_dtoa_r>
 8003e0e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e12:	4606      	mov	r6, r0
 8003e14:	d102      	bne.n	8003e1c <__cvt+0x60>
 8003e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e18:	07db      	lsls	r3, r3, #31
 8003e1a:	d522      	bpl.n	8003e62 <__cvt+0xa6>
 8003e1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e20:	eb06 0905 	add.w	r9, r6, r5
 8003e24:	d110      	bne.n	8003e48 <__cvt+0x8c>
 8003e26:	7833      	ldrb	r3, [r6, #0]
 8003e28:	2b30      	cmp	r3, #48	; 0x30
 8003e2a:	d10a      	bne.n	8003e42 <__cvt+0x86>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4620      	mov	r0, r4
 8003e32:	4639      	mov	r1, r7
 8003e34:	f7fc fdb8 	bl	80009a8 <__aeabi_dcmpeq>
 8003e38:	b918      	cbnz	r0, 8003e42 <__cvt+0x86>
 8003e3a:	f1c5 0501 	rsb	r5, r5, #1
 8003e3e:	f8ca 5000 	str.w	r5, [sl]
 8003e42:	f8da 3000 	ldr.w	r3, [sl]
 8003e46:	4499      	add	r9, r3
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	4639      	mov	r1, r7
 8003e50:	f7fc fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8003e54:	b108      	cbz	r0, 8003e5a <__cvt+0x9e>
 8003e56:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e5a:	2230      	movs	r2, #48	; 0x30
 8003e5c:	9b07      	ldr	r3, [sp, #28]
 8003e5e:	454b      	cmp	r3, r9
 8003e60:	d307      	bcc.n	8003e72 <__cvt+0xb6>
 8003e62:	4630      	mov	r0, r6
 8003e64:	9b07      	ldr	r3, [sp, #28]
 8003e66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e68:	1b9b      	subs	r3, r3, r6
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	b008      	add	sp, #32
 8003e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e72:	1c59      	adds	r1, r3, #1
 8003e74:	9107      	str	r1, [sp, #28]
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e7f0      	b.n	8003e5c <__cvt+0xa0>

08003e7a <__exponent>:
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	f803 2b02 	strb.w	r2, [r3], #2
 8003e84:	bfb6      	itet	lt
 8003e86:	222d      	movlt	r2, #45	; 0x2d
 8003e88:	222b      	movge	r2, #43	; 0x2b
 8003e8a:	4249      	neglt	r1, r1
 8003e8c:	2909      	cmp	r1, #9
 8003e8e:	7042      	strb	r2, [r0, #1]
 8003e90:	dd2b      	ble.n	8003eea <__exponent+0x70>
 8003e92:	f10d 0407 	add.w	r4, sp, #7
 8003e96:	46a4      	mov	ip, r4
 8003e98:	270a      	movs	r7, #10
 8003e9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	46a6      	mov	lr, r4
 8003ea2:	fb07 1516 	mls	r5, r7, r6, r1
 8003ea6:	2a63      	cmp	r2, #99	; 0x63
 8003ea8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003eac:	4631      	mov	r1, r6
 8003eae:	f104 34ff 	add.w	r4, r4, #4294967295
 8003eb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003eb6:	dcf0      	bgt.n	8003e9a <__exponent+0x20>
 8003eb8:	3130      	adds	r1, #48	; 0x30
 8003eba:	f1ae 0502 	sub.w	r5, lr, #2
 8003ebe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	1c44      	adds	r4, r0, #1
 8003ec6:	4561      	cmp	r1, ip
 8003ec8:	d30a      	bcc.n	8003ee0 <__exponent+0x66>
 8003eca:	f10d 0209 	add.w	r2, sp, #9
 8003ece:	eba2 020e 	sub.w	r2, r2, lr
 8003ed2:	4565      	cmp	r5, ip
 8003ed4:	bf88      	it	hi
 8003ed6:	2200      	movhi	r2, #0
 8003ed8:	4413      	add	r3, r2
 8003eda:	1a18      	subs	r0, r3, r0
 8003edc:	b003      	add	sp, #12
 8003ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ee4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003ee8:	e7ed      	b.n	8003ec6 <__exponent+0x4c>
 8003eea:	2330      	movs	r3, #48	; 0x30
 8003eec:	3130      	adds	r1, #48	; 0x30
 8003eee:	7083      	strb	r3, [r0, #2]
 8003ef0:	70c1      	strb	r1, [r0, #3]
 8003ef2:	1d03      	adds	r3, r0, #4
 8003ef4:	e7f1      	b.n	8003eda <__exponent+0x60>
	...

08003ef8 <_printf_float>:
 8003ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003efc:	b091      	sub	sp, #68	; 0x44
 8003efe:	460c      	mov	r4, r1
 8003f00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f04:	4616      	mov	r6, r2
 8003f06:	461f      	mov	r7, r3
 8003f08:	4605      	mov	r5, r0
 8003f0a:	f001 fb41 	bl	8005590 <_localeconv_r>
 8003f0e:	6803      	ldr	r3, [r0, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	9309      	str	r3, [sp, #36]	; 0x24
 8003f14:	f7fc f91c 	bl	8000150 <strlen>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	930e      	str	r3, [sp, #56]	; 0x38
 8003f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f20:	900a      	str	r0, [sp, #40]	; 0x28
 8003f22:	3307      	adds	r3, #7
 8003f24:	f023 0307 	bic.w	r3, r3, #7
 8003f28:	f103 0208 	add.w	r2, r3, #8
 8003f2c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f30:	f8d4 b000 	ldr.w	fp, [r4]
 8003f34:	f8c8 2000 	str.w	r2, [r8]
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f40:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003f44:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4e:	4640      	mov	r0, r8
 8003f50:	4b9c      	ldr	r3, [pc, #624]	; (80041c4 <_printf_float+0x2cc>)
 8003f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f54:	f7fc fd5a 	bl	8000a0c <__aeabi_dcmpun>
 8003f58:	bb70      	cbnz	r0, 8003fb8 <_printf_float+0xc0>
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5e:	4640      	mov	r0, r8
 8003f60:	4b98      	ldr	r3, [pc, #608]	; (80041c4 <_printf_float+0x2cc>)
 8003f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f64:	f7fc fd34 	bl	80009d0 <__aeabi_dcmple>
 8003f68:	bb30      	cbnz	r0, 8003fb8 <_printf_float+0xc0>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4640      	mov	r0, r8
 8003f70:	4651      	mov	r1, sl
 8003f72:	f7fc fd23 	bl	80009bc <__aeabi_dcmplt>
 8003f76:	b110      	cbz	r0, 8003f7e <_printf_float+0x86>
 8003f78:	232d      	movs	r3, #45	; 0x2d
 8003f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7e:	4b92      	ldr	r3, [pc, #584]	; (80041c8 <_printf_float+0x2d0>)
 8003f80:	4892      	ldr	r0, [pc, #584]	; (80041cc <_printf_float+0x2d4>)
 8003f82:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f86:	bf94      	ite	ls
 8003f88:	4698      	movls	r8, r3
 8003f8a:	4680      	movhi	r8, r0
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	f04f 0a00 	mov.w	sl, #0
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	f02b 0304 	bic.w	r3, fp, #4
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	4633      	mov	r3, r6
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	9700      	str	r7, [sp, #0]
 8003fa2:	aa0f      	add	r2, sp, #60	; 0x3c
 8003fa4:	f000 f9d4 	bl	8004350 <_printf_common>
 8003fa8:	3001      	adds	r0, #1
 8003faa:	f040 8090 	bne.w	80040ce <_printf_float+0x1d6>
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	b011      	add	sp, #68	; 0x44
 8003fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb8:	4642      	mov	r2, r8
 8003fba:	4653      	mov	r3, sl
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	f7fc fd24 	bl	8000a0c <__aeabi_dcmpun>
 8003fc4:	b148      	cbz	r0, 8003fda <_printf_float+0xe2>
 8003fc6:	f1ba 0f00 	cmp.w	sl, #0
 8003fca:	bfb8      	it	lt
 8003fcc:	232d      	movlt	r3, #45	; 0x2d
 8003fce:	4880      	ldr	r0, [pc, #512]	; (80041d0 <_printf_float+0x2d8>)
 8003fd0:	bfb8      	it	lt
 8003fd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fd6:	4b7f      	ldr	r3, [pc, #508]	; (80041d4 <_printf_float+0x2dc>)
 8003fd8:	e7d3      	b.n	8003f82 <_printf_float+0x8a>
 8003fda:	6863      	ldr	r3, [r4, #4]
 8003fdc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	d142      	bne.n	800406a <_printf_float+0x172>
 8003fe4:	2306      	movs	r3, #6
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	9206      	str	r2, [sp, #24]
 8003fec:	aa0e      	add	r2, sp, #56	; 0x38
 8003fee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003ff2:	aa0d      	add	r2, sp, #52	; 0x34
 8003ff4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ff8:	9203      	str	r2, [sp, #12]
 8003ffa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003ffe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	6863      	ldr	r3, [r4, #4]
 8004006:	4642      	mov	r2, r8
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4628      	mov	r0, r5
 800400c:	4653      	mov	r3, sl
 800400e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004010:	f7ff fed4 	bl	8003dbc <__cvt>
 8004014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004016:	4680      	mov	r8, r0
 8004018:	2947      	cmp	r1, #71	; 0x47
 800401a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800401c:	d108      	bne.n	8004030 <_printf_float+0x138>
 800401e:	1cc8      	adds	r0, r1, #3
 8004020:	db02      	blt.n	8004028 <_printf_float+0x130>
 8004022:	6863      	ldr	r3, [r4, #4]
 8004024:	4299      	cmp	r1, r3
 8004026:	dd40      	ble.n	80040aa <_printf_float+0x1b2>
 8004028:	f1a9 0902 	sub.w	r9, r9, #2
 800402c:	fa5f f989 	uxtb.w	r9, r9
 8004030:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004034:	d81f      	bhi.n	8004076 <_printf_float+0x17e>
 8004036:	464a      	mov	r2, r9
 8004038:	3901      	subs	r1, #1
 800403a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800403e:	910d      	str	r1, [sp, #52]	; 0x34
 8004040:	f7ff ff1b 	bl	8003e7a <__exponent>
 8004044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004046:	4682      	mov	sl, r0
 8004048:	1813      	adds	r3, r2, r0
 800404a:	2a01      	cmp	r2, #1
 800404c:	6123      	str	r3, [r4, #16]
 800404e:	dc02      	bgt.n	8004056 <_printf_float+0x15e>
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	07d2      	lsls	r2, r2, #31
 8004054:	d501      	bpl.n	800405a <_printf_float+0x162>
 8004056:	3301      	adds	r3, #1
 8004058:	6123      	str	r3, [r4, #16]
 800405a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800405e:	2b00      	cmp	r3, #0
 8004060:	d09b      	beq.n	8003f9a <_printf_float+0xa2>
 8004062:	232d      	movs	r3, #45	; 0x2d
 8004064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004068:	e797      	b.n	8003f9a <_printf_float+0xa2>
 800406a:	2947      	cmp	r1, #71	; 0x47
 800406c:	d1bc      	bne.n	8003fe8 <_printf_float+0xf0>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ba      	bne.n	8003fe8 <_printf_float+0xf0>
 8004072:	2301      	movs	r3, #1
 8004074:	e7b7      	b.n	8003fe6 <_printf_float+0xee>
 8004076:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800407a:	d118      	bne.n	80040ae <_printf_float+0x1b6>
 800407c:	2900      	cmp	r1, #0
 800407e:	6863      	ldr	r3, [r4, #4]
 8004080:	dd0b      	ble.n	800409a <_printf_float+0x1a2>
 8004082:	6121      	str	r1, [r4, #16]
 8004084:	b913      	cbnz	r3, 800408c <_printf_float+0x194>
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	07d0      	lsls	r0, r2, #31
 800408a:	d502      	bpl.n	8004092 <_printf_float+0x19a>
 800408c:	3301      	adds	r3, #1
 800408e:	440b      	add	r3, r1
 8004090:	6123      	str	r3, [r4, #16]
 8004092:	f04f 0a00 	mov.w	sl, #0
 8004096:	65a1      	str	r1, [r4, #88]	; 0x58
 8004098:	e7df      	b.n	800405a <_printf_float+0x162>
 800409a:	b913      	cbnz	r3, 80040a2 <_printf_float+0x1aa>
 800409c:	6822      	ldr	r2, [r4, #0]
 800409e:	07d2      	lsls	r2, r2, #31
 80040a0:	d501      	bpl.n	80040a6 <_printf_float+0x1ae>
 80040a2:	3302      	adds	r3, #2
 80040a4:	e7f4      	b.n	8004090 <_printf_float+0x198>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e7f2      	b.n	8004090 <_printf_float+0x198>
 80040aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80040ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040b0:	4299      	cmp	r1, r3
 80040b2:	db05      	blt.n	80040c0 <_printf_float+0x1c8>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	6121      	str	r1, [r4, #16]
 80040b8:	07d8      	lsls	r0, r3, #31
 80040ba:	d5ea      	bpl.n	8004092 <_printf_float+0x19a>
 80040bc:	1c4b      	adds	r3, r1, #1
 80040be:	e7e7      	b.n	8004090 <_printf_float+0x198>
 80040c0:	2900      	cmp	r1, #0
 80040c2:	bfcc      	ite	gt
 80040c4:	2201      	movgt	r2, #1
 80040c6:	f1c1 0202 	rsble	r2, r1, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	e7e0      	b.n	8004090 <_printf_float+0x198>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	055a      	lsls	r2, r3, #21
 80040d2:	d407      	bmi.n	80040e4 <_printf_float+0x1ec>
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	4642      	mov	r2, r8
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	d12b      	bne.n	800413a <_printf_float+0x242>
 80040e2:	e764      	b.n	8003fae <_printf_float+0xb6>
 80040e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040e8:	f240 80dd 	bls.w	80042a6 <_printf_float+0x3ae>
 80040ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040f0:	2200      	movs	r2, #0
 80040f2:	2300      	movs	r3, #0
 80040f4:	f7fc fc58 	bl	80009a8 <__aeabi_dcmpeq>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d033      	beq.n	8004164 <_printf_float+0x26c>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4631      	mov	r1, r6
 8004100:	4628      	mov	r0, r5
 8004102:	4a35      	ldr	r2, [pc, #212]	; (80041d8 <_printf_float+0x2e0>)
 8004104:	47b8      	blx	r7
 8004106:	3001      	adds	r0, #1
 8004108:	f43f af51 	beq.w	8003fae <_printf_float+0xb6>
 800410c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004110:	429a      	cmp	r2, r3
 8004112:	db02      	blt.n	800411a <_printf_float+0x222>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	07d8      	lsls	r0, r3, #31
 8004118:	d50f      	bpl.n	800413a <_printf_float+0x242>
 800411a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800411e:	4631      	mov	r1, r6
 8004120:	4628      	mov	r0, r5
 8004122:	47b8      	blx	r7
 8004124:	3001      	adds	r0, #1
 8004126:	f43f af42 	beq.w	8003fae <_printf_float+0xb6>
 800412a:	f04f 0800 	mov.w	r8, #0
 800412e:	f104 091a 	add.w	r9, r4, #26
 8004132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004134:	3b01      	subs	r3, #1
 8004136:	4543      	cmp	r3, r8
 8004138:	dc09      	bgt.n	800414e <_printf_float+0x256>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	079b      	lsls	r3, r3, #30
 800413e:	f100 8102 	bmi.w	8004346 <_printf_float+0x44e>
 8004142:	68e0      	ldr	r0, [r4, #12]
 8004144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004146:	4298      	cmp	r0, r3
 8004148:	bfb8      	it	lt
 800414a:	4618      	movlt	r0, r3
 800414c:	e731      	b.n	8003fb2 <_printf_float+0xba>
 800414e:	2301      	movs	r3, #1
 8004150:	464a      	mov	r2, r9
 8004152:	4631      	mov	r1, r6
 8004154:	4628      	mov	r0, r5
 8004156:	47b8      	blx	r7
 8004158:	3001      	adds	r0, #1
 800415a:	f43f af28 	beq.w	8003fae <_printf_float+0xb6>
 800415e:	f108 0801 	add.w	r8, r8, #1
 8004162:	e7e6      	b.n	8004132 <_printf_float+0x23a>
 8004164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	dc38      	bgt.n	80041dc <_printf_float+0x2e4>
 800416a:	2301      	movs	r3, #1
 800416c:	4631      	mov	r1, r6
 800416e:	4628      	mov	r0, r5
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <_printf_float+0x2e0>)
 8004172:	47b8      	blx	r7
 8004174:	3001      	adds	r0, #1
 8004176:	f43f af1a 	beq.w	8003fae <_printf_float+0xb6>
 800417a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800417e:	4313      	orrs	r3, r2
 8004180:	d102      	bne.n	8004188 <_printf_float+0x290>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	07d9      	lsls	r1, r3, #31
 8004186:	d5d8      	bpl.n	800413a <_printf_float+0x242>
 8004188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f af0b 	beq.w	8003fae <_printf_float+0xb6>
 8004198:	f04f 0900 	mov.w	r9, #0
 800419c:	f104 0a1a 	add.w	sl, r4, #26
 80041a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041a2:	425b      	negs	r3, r3
 80041a4:	454b      	cmp	r3, r9
 80041a6:	dc01      	bgt.n	80041ac <_printf_float+0x2b4>
 80041a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041aa:	e794      	b.n	80040d6 <_printf_float+0x1de>
 80041ac:	2301      	movs	r3, #1
 80041ae:	4652      	mov	r2, sl
 80041b0:	4631      	mov	r1, r6
 80041b2:	4628      	mov	r0, r5
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	f43f aef9 	beq.w	8003fae <_printf_float+0xb6>
 80041bc:	f109 0901 	add.w	r9, r9, #1
 80041c0:	e7ee      	b.n	80041a0 <_printf_float+0x2a8>
 80041c2:	bf00      	nop
 80041c4:	7fefffff 	.word	0x7fefffff
 80041c8:	08006818 	.word	0x08006818
 80041cc:	0800681c 	.word	0x0800681c
 80041d0:	08006824 	.word	0x08006824
 80041d4:	08006820 	.word	0x08006820
 80041d8:	08006828 	.word	0x08006828
 80041dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041e0:	429a      	cmp	r2, r3
 80041e2:	bfa8      	it	ge
 80041e4:	461a      	movge	r2, r3
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	4691      	mov	r9, r2
 80041ea:	dc37      	bgt.n	800425c <_printf_float+0x364>
 80041ec:	f04f 0b00 	mov.w	fp, #0
 80041f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041f4:	f104 021a 	add.w	r2, r4, #26
 80041f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041fc:	ebaa 0309 	sub.w	r3, sl, r9
 8004200:	455b      	cmp	r3, fp
 8004202:	dc33      	bgt.n	800426c <_printf_float+0x374>
 8004204:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004208:	429a      	cmp	r2, r3
 800420a:	db3b      	blt.n	8004284 <_printf_float+0x38c>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	07da      	lsls	r2, r3, #31
 8004210:	d438      	bmi.n	8004284 <_printf_float+0x38c>
 8004212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004214:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004216:	eba2 030a 	sub.w	r3, r2, sl
 800421a:	eba2 0901 	sub.w	r9, r2, r1
 800421e:	4599      	cmp	r9, r3
 8004220:	bfa8      	it	ge
 8004222:	4699      	movge	r9, r3
 8004224:	f1b9 0f00 	cmp.w	r9, #0
 8004228:	dc34      	bgt.n	8004294 <_printf_float+0x39c>
 800422a:	f04f 0800 	mov.w	r8, #0
 800422e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004232:	f104 0a1a 	add.w	sl, r4, #26
 8004236:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	eba3 0309 	sub.w	r3, r3, r9
 8004240:	4543      	cmp	r3, r8
 8004242:	f77f af7a 	ble.w	800413a <_printf_float+0x242>
 8004246:	2301      	movs	r3, #1
 8004248:	4652      	mov	r2, sl
 800424a:	4631      	mov	r1, r6
 800424c:	4628      	mov	r0, r5
 800424e:	47b8      	blx	r7
 8004250:	3001      	adds	r0, #1
 8004252:	f43f aeac 	beq.w	8003fae <_printf_float+0xb6>
 8004256:	f108 0801 	add.w	r8, r8, #1
 800425a:	e7ec      	b.n	8004236 <_printf_float+0x33e>
 800425c:	4613      	mov	r3, r2
 800425e:	4631      	mov	r1, r6
 8004260:	4642      	mov	r2, r8
 8004262:	4628      	mov	r0, r5
 8004264:	47b8      	blx	r7
 8004266:	3001      	adds	r0, #1
 8004268:	d1c0      	bne.n	80041ec <_printf_float+0x2f4>
 800426a:	e6a0      	b.n	8003fae <_printf_float+0xb6>
 800426c:	2301      	movs	r3, #1
 800426e:	4631      	mov	r1, r6
 8004270:	4628      	mov	r0, r5
 8004272:	920b      	str	r2, [sp, #44]	; 0x2c
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f ae99 	beq.w	8003fae <_printf_float+0xb6>
 800427c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800427e:	f10b 0b01 	add.w	fp, fp, #1
 8004282:	e7b9      	b.n	80041f8 <_printf_float+0x300>
 8004284:	4631      	mov	r1, r6
 8004286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	d1bf      	bne.n	8004212 <_printf_float+0x31a>
 8004292:	e68c      	b.n	8003fae <_printf_float+0xb6>
 8004294:	464b      	mov	r3, r9
 8004296:	4631      	mov	r1, r6
 8004298:	4628      	mov	r0, r5
 800429a:	eb08 020a 	add.w	r2, r8, sl
 800429e:	47b8      	blx	r7
 80042a0:	3001      	adds	r0, #1
 80042a2:	d1c2      	bne.n	800422a <_printf_float+0x332>
 80042a4:	e683      	b.n	8003fae <_printf_float+0xb6>
 80042a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042a8:	2a01      	cmp	r2, #1
 80042aa:	dc01      	bgt.n	80042b0 <_printf_float+0x3b8>
 80042ac:	07db      	lsls	r3, r3, #31
 80042ae:	d537      	bpl.n	8004320 <_printf_float+0x428>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4642      	mov	r2, r8
 80042b4:	4631      	mov	r1, r6
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f ae77 	beq.w	8003fae <_printf_float+0xb6>
 80042c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b8      	blx	r7
 80042ca:	3001      	adds	r0, #1
 80042cc:	f43f ae6f 	beq.w	8003fae <_printf_float+0xb6>
 80042d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042d4:	2200      	movs	r2, #0
 80042d6:	2300      	movs	r3, #0
 80042d8:	f7fc fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80042dc:	b9d8      	cbnz	r0, 8004316 <_printf_float+0x41e>
 80042de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e0:	f108 0201 	add.w	r2, r8, #1
 80042e4:	3b01      	subs	r3, #1
 80042e6:	4631      	mov	r1, r6
 80042e8:	4628      	mov	r0, r5
 80042ea:	47b8      	blx	r7
 80042ec:	3001      	adds	r0, #1
 80042ee:	d10e      	bne.n	800430e <_printf_float+0x416>
 80042f0:	e65d      	b.n	8003fae <_printf_float+0xb6>
 80042f2:	2301      	movs	r3, #1
 80042f4:	464a      	mov	r2, r9
 80042f6:	4631      	mov	r1, r6
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b8      	blx	r7
 80042fc:	3001      	adds	r0, #1
 80042fe:	f43f ae56 	beq.w	8003fae <_printf_float+0xb6>
 8004302:	f108 0801 	add.w	r8, r8, #1
 8004306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004308:	3b01      	subs	r3, #1
 800430a:	4543      	cmp	r3, r8
 800430c:	dcf1      	bgt.n	80042f2 <_printf_float+0x3fa>
 800430e:	4653      	mov	r3, sl
 8004310:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004314:	e6e0      	b.n	80040d8 <_printf_float+0x1e0>
 8004316:	f04f 0800 	mov.w	r8, #0
 800431a:	f104 091a 	add.w	r9, r4, #26
 800431e:	e7f2      	b.n	8004306 <_printf_float+0x40e>
 8004320:	2301      	movs	r3, #1
 8004322:	4642      	mov	r2, r8
 8004324:	e7df      	b.n	80042e6 <_printf_float+0x3ee>
 8004326:	2301      	movs	r3, #1
 8004328:	464a      	mov	r2, r9
 800432a:	4631      	mov	r1, r6
 800432c:	4628      	mov	r0, r5
 800432e:	47b8      	blx	r7
 8004330:	3001      	adds	r0, #1
 8004332:	f43f ae3c 	beq.w	8003fae <_printf_float+0xb6>
 8004336:	f108 0801 	add.w	r8, r8, #1
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	4543      	cmp	r3, r8
 8004342:	dcf0      	bgt.n	8004326 <_printf_float+0x42e>
 8004344:	e6fd      	b.n	8004142 <_printf_float+0x24a>
 8004346:	f04f 0800 	mov.w	r8, #0
 800434a:	f104 0919 	add.w	r9, r4, #25
 800434e:	e7f4      	b.n	800433a <_printf_float+0x442>

08004350 <_printf_common>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	4616      	mov	r6, r2
 8004356:	4699      	mov	r9, r3
 8004358:	688a      	ldr	r2, [r1, #8]
 800435a:	690b      	ldr	r3, [r1, #16]
 800435c:	4607      	mov	r7, r0
 800435e:	4293      	cmp	r3, r2
 8004360:	bfb8      	it	lt
 8004362:	4613      	movlt	r3, r2
 8004364:	6033      	str	r3, [r6, #0]
 8004366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800436a:	460c      	mov	r4, r1
 800436c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004370:	b10a      	cbz	r2, 8004376 <_printf_common+0x26>
 8004372:	3301      	adds	r3, #1
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	0699      	lsls	r1, r3, #26
 800437a:	bf42      	ittt	mi
 800437c:	6833      	ldrmi	r3, [r6, #0]
 800437e:	3302      	addmi	r3, #2
 8004380:	6033      	strmi	r3, [r6, #0]
 8004382:	6825      	ldr	r5, [r4, #0]
 8004384:	f015 0506 	ands.w	r5, r5, #6
 8004388:	d106      	bne.n	8004398 <_printf_common+0x48>
 800438a:	f104 0a19 	add.w	sl, r4, #25
 800438e:	68e3      	ldr	r3, [r4, #12]
 8004390:	6832      	ldr	r2, [r6, #0]
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	42ab      	cmp	r3, r5
 8004396:	dc28      	bgt.n	80043ea <_printf_common+0x9a>
 8004398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800439c:	1e13      	subs	r3, r2, #0
 800439e:	6822      	ldr	r2, [r4, #0]
 80043a0:	bf18      	it	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	0692      	lsls	r2, r2, #26
 80043a6:	d42d      	bmi.n	8004404 <_printf_common+0xb4>
 80043a8:	4649      	mov	r1, r9
 80043aa:	4638      	mov	r0, r7
 80043ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043b0:	47c0      	blx	r8
 80043b2:	3001      	adds	r0, #1
 80043b4:	d020      	beq.n	80043f8 <_printf_common+0xa8>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	68e5      	ldr	r5, [r4, #12]
 80043ba:	f003 0306 	and.w	r3, r3, #6
 80043be:	2b04      	cmp	r3, #4
 80043c0:	bf18      	it	ne
 80043c2:	2500      	movne	r5, #0
 80043c4:	6832      	ldr	r2, [r6, #0]
 80043c6:	f04f 0600 	mov.w	r6, #0
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	bf08      	it	eq
 80043ce:	1aad      	subeq	r5, r5, r2
 80043d0:	6922      	ldr	r2, [r4, #16]
 80043d2:	bf08      	it	eq
 80043d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d8:	4293      	cmp	r3, r2
 80043da:	bfc4      	itt	gt
 80043dc:	1a9b      	subgt	r3, r3, r2
 80043de:	18ed      	addgt	r5, r5, r3
 80043e0:	341a      	adds	r4, #26
 80043e2:	42b5      	cmp	r5, r6
 80043e4:	d11a      	bne.n	800441c <_printf_common+0xcc>
 80043e6:	2000      	movs	r0, #0
 80043e8:	e008      	b.n	80043fc <_printf_common+0xac>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4652      	mov	r2, sl
 80043ee:	4649      	mov	r1, r9
 80043f0:	4638      	mov	r0, r7
 80043f2:	47c0      	blx	r8
 80043f4:	3001      	adds	r0, #1
 80043f6:	d103      	bne.n	8004400 <_printf_common+0xb0>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	3501      	adds	r5, #1
 8004402:	e7c4      	b.n	800438e <_printf_common+0x3e>
 8004404:	2030      	movs	r0, #48	; 0x30
 8004406:	18e1      	adds	r1, r4, r3
 8004408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004412:	4422      	add	r2, r4
 8004414:	3302      	adds	r3, #2
 8004416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800441a:	e7c5      	b.n	80043a8 <_printf_common+0x58>
 800441c:	2301      	movs	r3, #1
 800441e:	4622      	mov	r2, r4
 8004420:	4649      	mov	r1, r9
 8004422:	4638      	mov	r0, r7
 8004424:	47c0      	blx	r8
 8004426:	3001      	adds	r0, #1
 8004428:	d0e6      	beq.n	80043f8 <_printf_common+0xa8>
 800442a:	3601      	adds	r6, #1
 800442c:	e7d9      	b.n	80043e2 <_printf_common+0x92>
	...

08004430 <_printf_i>:
 8004430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	460c      	mov	r4, r1
 8004436:	7e27      	ldrb	r7, [r4, #24]
 8004438:	4691      	mov	r9, r2
 800443a:	2f78      	cmp	r7, #120	; 0x78
 800443c:	4680      	mov	r8, r0
 800443e:	469a      	mov	sl, r3
 8004440:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004446:	d807      	bhi.n	8004458 <_printf_i+0x28>
 8004448:	2f62      	cmp	r7, #98	; 0x62
 800444a:	d80a      	bhi.n	8004462 <_printf_i+0x32>
 800444c:	2f00      	cmp	r7, #0
 800444e:	f000 80d9 	beq.w	8004604 <_printf_i+0x1d4>
 8004452:	2f58      	cmp	r7, #88	; 0x58
 8004454:	f000 80a4 	beq.w	80045a0 <_printf_i+0x170>
 8004458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800445c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004460:	e03a      	b.n	80044d8 <_printf_i+0xa8>
 8004462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004466:	2b15      	cmp	r3, #21
 8004468:	d8f6      	bhi.n	8004458 <_printf_i+0x28>
 800446a:	a001      	add	r0, pc, #4	; (adr r0, 8004470 <_printf_i+0x40>)
 800446c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004470:	080044c9 	.word	0x080044c9
 8004474:	080044dd 	.word	0x080044dd
 8004478:	08004459 	.word	0x08004459
 800447c:	08004459 	.word	0x08004459
 8004480:	08004459 	.word	0x08004459
 8004484:	08004459 	.word	0x08004459
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004459 	.word	0x08004459
 8004490:	08004459 	.word	0x08004459
 8004494:	08004459 	.word	0x08004459
 8004498:	08004459 	.word	0x08004459
 800449c:	080045eb 	.word	0x080045eb
 80044a0:	0800450d 	.word	0x0800450d
 80044a4:	080045cd 	.word	0x080045cd
 80044a8:	08004459 	.word	0x08004459
 80044ac:	08004459 	.word	0x08004459
 80044b0:	0800460d 	.word	0x0800460d
 80044b4:	08004459 	.word	0x08004459
 80044b8:	0800450d 	.word	0x0800450d
 80044bc:	08004459 	.word	0x08004459
 80044c0:	08004459 	.word	0x08004459
 80044c4:	080045d5 	.word	0x080045d5
 80044c8:	680b      	ldr	r3, [r1, #0]
 80044ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044ce:	1d1a      	adds	r2, r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	600a      	str	r2, [r1, #0]
 80044d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d8:	2301      	movs	r3, #1
 80044da:	e0a4      	b.n	8004626 <_printf_i+0x1f6>
 80044dc:	6825      	ldr	r5, [r4, #0]
 80044de:	6808      	ldr	r0, [r1, #0]
 80044e0:	062e      	lsls	r6, r5, #24
 80044e2:	f100 0304 	add.w	r3, r0, #4
 80044e6:	d50a      	bpl.n	80044fe <_printf_i+0xce>
 80044e8:	6805      	ldr	r5, [r0, #0]
 80044ea:	600b      	str	r3, [r1, #0]
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	da03      	bge.n	80044f8 <_printf_i+0xc8>
 80044f0:	232d      	movs	r3, #45	; 0x2d
 80044f2:	426d      	negs	r5, r5
 80044f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f8:	230a      	movs	r3, #10
 80044fa:	485e      	ldr	r0, [pc, #376]	; (8004674 <_printf_i+0x244>)
 80044fc:	e019      	b.n	8004532 <_printf_i+0x102>
 80044fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004502:	6805      	ldr	r5, [r0, #0]
 8004504:	600b      	str	r3, [r1, #0]
 8004506:	bf18      	it	ne
 8004508:	b22d      	sxthne	r5, r5
 800450a:	e7ef      	b.n	80044ec <_printf_i+0xbc>
 800450c:	680b      	ldr	r3, [r1, #0]
 800450e:	6825      	ldr	r5, [r4, #0]
 8004510:	1d18      	adds	r0, r3, #4
 8004512:	6008      	str	r0, [r1, #0]
 8004514:	0628      	lsls	r0, r5, #24
 8004516:	d501      	bpl.n	800451c <_printf_i+0xec>
 8004518:	681d      	ldr	r5, [r3, #0]
 800451a:	e002      	b.n	8004522 <_printf_i+0xf2>
 800451c:	0669      	lsls	r1, r5, #25
 800451e:	d5fb      	bpl.n	8004518 <_printf_i+0xe8>
 8004520:	881d      	ldrh	r5, [r3, #0]
 8004522:	2f6f      	cmp	r7, #111	; 0x6f
 8004524:	bf0c      	ite	eq
 8004526:	2308      	moveq	r3, #8
 8004528:	230a      	movne	r3, #10
 800452a:	4852      	ldr	r0, [pc, #328]	; (8004674 <_printf_i+0x244>)
 800452c:	2100      	movs	r1, #0
 800452e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004532:	6866      	ldr	r6, [r4, #4]
 8004534:	2e00      	cmp	r6, #0
 8004536:	bfa8      	it	ge
 8004538:	6821      	ldrge	r1, [r4, #0]
 800453a:	60a6      	str	r6, [r4, #8]
 800453c:	bfa4      	itt	ge
 800453e:	f021 0104 	bicge.w	r1, r1, #4
 8004542:	6021      	strge	r1, [r4, #0]
 8004544:	b90d      	cbnz	r5, 800454a <_printf_i+0x11a>
 8004546:	2e00      	cmp	r6, #0
 8004548:	d04d      	beq.n	80045e6 <_printf_i+0x1b6>
 800454a:	4616      	mov	r6, r2
 800454c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004550:	fb03 5711 	mls	r7, r3, r1, r5
 8004554:	5dc7      	ldrb	r7, [r0, r7]
 8004556:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800455a:	462f      	mov	r7, r5
 800455c:	42bb      	cmp	r3, r7
 800455e:	460d      	mov	r5, r1
 8004560:	d9f4      	bls.n	800454c <_printf_i+0x11c>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d10b      	bne.n	800457e <_printf_i+0x14e>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	07df      	lsls	r7, r3, #31
 800456a:	d508      	bpl.n	800457e <_printf_i+0x14e>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	6861      	ldr	r1, [r4, #4]
 8004570:	4299      	cmp	r1, r3
 8004572:	bfde      	ittt	le
 8004574:	2330      	movle	r3, #48	; 0x30
 8004576:	f806 3c01 	strble.w	r3, [r6, #-1]
 800457a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800457e:	1b92      	subs	r2, r2, r6
 8004580:	6122      	str	r2, [r4, #16]
 8004582:	464b      	mov	r3, r9
 8004584:	4621      	mov	r1, r4
 8004586:	4640      	mov	r0, r8
 8004588:	f8cd a000 	str.w	sl, [sp]
 800458c:	aa03      	add	r2, sp, #12
 800458e:	f7ff fedf 	bl	8004350 <_printf_common>
 8004592:	3001      	adds	r0, #1
 8004594:	d14c      	bne.n	8004630 <_printf_i+0x200>
 8004596:	f04f 30ff 	mov.w	r0, #4294967295
 800459a:	b004      	add	sp, #16
 800459c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a0:	4834      	ldr	r0, [pc, #208]	; (8004674 <_printf_i+0x244>)
 80045a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045a6:	680e      	ldr	r6, [r1, #0]
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80045ae:	061f      	lsls	r7, r3, #24
 80045b0:	600e      	str	r6, [r1, #0]
 80045b2:	d514      	bpl.n	80045de <_printf_i+0x1ae>
 80045b4:	07d9      	lsls	r1, r3, #31
 80045b6:	bf44      	itt	mi
 80045b8:	f043 0320 	orrmi.w	r3, r3, #32
 80045bc:	6023      	strmi	r3, [r4, #0]
 80045be:	b91d      	cbnz	r5, 80045c8 <_printf_i+0x198>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	f023 0320 	bic.w	r3, r3, #32
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	2310      	movs	r3, #16
 80045ca:	e7af      	b.n	800452c <_printf_i+0xfc>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f043 0320 	orr.w	r3, r3, #32
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	2378      	movs	r3, #120	; 0x78
 80045d6:	4828      	ldr	r0, [pc, #160]	; (8004678 <_printf_i+0x248>)
 80045d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045dc:	e7e3      	b.n	80045a6 <_printf_i+0x176>
 80045de:	065e      	lsls	r6, r3, #25
 80045e0:	bf48      	it	mi
 80045e2:	b2ad      	uxthmi	r5, r5
 80045e4:	e7e6      	b.n	80045b4 <_printf_i+0x184>
 80045e6:	4616      	mov	r6, r2
 80045e8:	e7bb      	b.n	8004562 <_printf_i+0x132>
 80045ea:	680b      	ldr	r3, [r1, #0]
 80045ec:	6826      	ldr	r6, [r4, #0]
 80045ee:	1d1d      	adds	r5, r3, #4
 80045f0:	6960      	ldr	r0, [r4, #20]
 80045f2:	600d      	str	r5, [r1, #0]
 80045f4:	0635      	lsls	r5, r6, #24
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	d501      	bpl.n	80045fe <_printf_i+0x1ce>
 80045fa:	6018      	str	r0, [r3, #0]
 80045fc:	e002      	b.n	8004604 <_printf_i+0x1d4>
 80045fe:	0671      	lsls	r1, r6, #25
 8004600:	d5fb      	bpl.n	80045fa <_printf_i+0x1ca>
 8004602:	8018      	strh	r0, [r3, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	4616      	mov	r6, r2
 8004608:	6123      	str	r3, [r4, #16]
 800460a:	e7ba      	b.n	8004582 <_printf_i+0x152>
 800460c:	680b      	ldr	r3, [r1, #0]
 800460e:	1d1a      	adds	r2, r3, #4
 8004610:	600a      	str	r2, [r1, #0]
 8004612:	681e      	ldr	r6, [r3, #0]
 8004614:	2100      	movs	r1, #0
 8004616:	4630      	mov	r0, r6
 8004618:	6862      	ldr	r2, [r4, #4]
 800461a:	f000 ffc9 	bl	80055b0 <memchr>
 800461e:	b108      	cbz	r0, 8004624 <_printf_i+0x1f4>
 8004620:	1b80      	subs	r0, r0, r6
 8004622:	6060      	str	r0, [r4, #4]
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	6123      	str	r3, [r4, #16]
 8004628:	2300      	movs	r3, #0
 800462a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462e:	e7a8      	b.n	8004582 <_printf_i+0x152>
 8004630:	4632      	mov	r2, r6
 8004632:	4649      	mov	r1, r9
 8004634:	4640      	mov	r0, r8
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	47d0      	blx	sl
 800463a:	3001      	adds	r0, #1
 800463c:	d0ab      	beq.n	8004596 <_printf_i+0x166>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	079b      	lsls	r3, r3, #30
 8004642:	d413      	bmi.n	800466c <_printf_i+0x23c>
 8004644:	68e0      	ldr	r0, [r4, #12]
 8004646:	9b03      	ldr	r3, [sp, #12]
 8004648:	4298      	cmp	r0, r3
 800464a:	bfb8      	it	lt
 800464c:	4618      	movlt	r0, r3
 800464e:	e7a4      	b.n	800459a <_printf_i+0x16a>
 8004650:	2301      	movs	r3, #1
 8004652:	4632      	mov	r2, r6
 8004654:	4649      	mov	r1, r9
 8004656:	4640      	mov	r0, r8
 8004658:	47d0      	blx	sl
 800465a:	3001      	adds	r0, #1
 800465c:	d09b      	beq.n	8004596 <_printf_i+0x166>
 800465e:	3501      	adds	r5, #1
 8004660:	68e3      	ldr	r3, [r4, #12]
 8004662:	9903      	ldr	r1, [sp, #12]
 8004664:	1a5b      	subs	r3, r3, r1
 8004666:	42ab      	cmp	r3, r5
 8004668:	dcf2      	bgt.n	8004650 <_printf_i+0x220>
 800466a:	e7eb      	b.n	8004644 <_printf_i+0x214>
 800466c:	2500      	movs	r5, #0
 800466e:	f104 0619 	add.w	r6, r4, #25
 8004672:	e7f5      	b.n	8004660 <_printf_i+0x230>
 8004674:	0800682a 	.word	0x0800682a
 8004678:	0800683b 	.word	0x0800683b

0800467c <iprintf>:
 800467c:	b40f      	push	{r0, r1, r2, r3}
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <iprintf+0x2c>)
 8004680:	b513      	push	{r0, r1, r4, lr}
 8004682:	681c      	ldr	r4, [r3, #0]
 8004684:	b124      	cbz	r4, 8004690 <iprintf+0x14>
 8004686:	69a3      	ldr	r3, [r4, #24]
 8004688:	b913      	cbnz	r3, 8004690 <iprintf+0x14>
 800468a:	4620      	mov	r0, r4
 800468c:	f000 fee2 	bl	8005454 <__sinit>
 8004690:	ab05      	add	r3, sp, #20
 8004692:	4620      	mov	r0, r4
 8004694:	9a04      	ldr	r2, [sp, #16]
 8004696:	68a1      	ldr	r1, [r4, #8]
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	f001 fc03 	bl	8005ea4 <_vfiprintf_r>
 800469e:	b002      	add	sp, #8
 80046a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a4:	b004      	add	sp, #16
 80046a6:	4770      	bx	lr
 80046a8:	2000000c 	.word	0x2000000c

080046ac <quorem>:
 80046ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	6903      	ldr	r3, [r0, #16]
 80046b2:	690c      	ldr	r4, [r1, #16]
 80046b4:	4607      	mov	r7, r0
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	f2c0 8083 	blt.w	80047c2 <quorem+0x116>
 80046bc:	3c01      	subs	r4, #1
 80046be:	f100 0514 	add.w	r5, r0, #20
 80046c2:	f101 0814 	add.w	r8, r1, #20
 80046c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046d4:	3301      	adds	r3, #1
 80046d6:	429a      	cmp	r2, r3
 80046d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80046dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046e4:	d332      	bcc.n	800474c <quorem+0xa0>
 80046e6:	f04f 0e00 	mov.w	lr, #0
 80046ea:	4640      	mov	r0, r8
 80046ec:	46ac      	mov	ip, r5
 80046ee:	46f2      	mov	sl, lr
 80046f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80046f4:	b293      	uxth	r3, r2
 80046f6:	fb06 e303 	mla	r3, r6, r3, lr
 80046fa:	0c12      	lsrs	r2, r2, #16
 80046fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004700:	fb06 e202 	mla	r2, r6, r2, lr
 8004704:	b29b      	uxth	r3, r3
 8004706:	ebaa 0303 	sub.w	r3, sl, r3
 800470a:	f8dc a000 	ldr.w	sl, [ip]
 800470e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004712:	fa1f fa8a 	uxth.w	sl, sl
 8004716:	4453      	add	r3, sl
 8004718:	fa1f fa82 	uxth.w	sl, r2
 800471c:	f8dc 2000 	ldr.w	r2, [ip]
 8004720:	4581      	cmp	r9, r0
 8004722:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004726:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800472a:	b29b      	uxth	r3, r3
 800472c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004730:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004734:	f84c 3b04 	str.w	r3, [ip], #4
 8004738:	d2da      	bcs.n	80046f0 <quorem+0x44>
 800473a:	f855 300b 	ldr.w	r3, [r5, fp]
 800473e:	b92b      	cbnz	r3, 800474c <quorem+0xa0>
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	3b04      	subs	r3, #4
 8004744:	429d      	cmp	r5, r3
 8004746:	461a      	mov	r2, r3
 8004748:	d32f      	bcc.n	80047aa <quorem+0xfe>
 800474a:	613c      	str	r4, [r7, #16]
 800474c:	4638      	mov	r0, r7
 800474e:	f001 f9c5 	bl	8005adc <__mcmp>
 8004752:	2800      	cmp	r0, #0
 8004754:	db25      	blt.n	80047a2 <quorem+0xf6>
 8004756:	4628      	mov	r0, r5
 8004758:	f04f 0c00 	mov.w	ip, #0
 800475c:	3601      	adds	r6, #1
 800475e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004762:	f8d0 e000 	ldr.w	lr, [r0]
 8004766:	b28b      	uxth	r3, r1
 8004768:	ebac 0303 	sub.w	r3, ip, r3
 800476c:	fa1f f28e 	uxth.w	r2, lr
 8004770:	4413      	add	r3, r2
 8004772:	0c0a      	lsrs	r2, r1, #16
 8004774:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800477c:	b29b      	uxth	r3, r3
 800477e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004782:	45c1      	cmp	r9, r8
 8004784:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004788:	f840 3b04 	str.w	r3, [r0], #4
 800478c:	d2e7      	bcs.n	800475e <quorem+0xb2>
 800478e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004796:	b922      	cbnz	r2, 80047a2 <quorem+0xf6>
 8004798:	3b04      	subs	r3, #4
 800479a:	429d      	cmp	r5, r3
 800479c:	461a      	mov	r2, r3
 800479e:	d30a      	bcc.n	80047b6 <quorem+0x10a>
 80047a0:	613c      	str	r4, [r7, #16]
 80047a2:	4630      	mov	r0, r6
 80047a4:	b003      	add	sp, #12
 80047a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	3b04      	subs	r3, #4
 80047ae:	2a00      	cmp	r2, #0
 80047b0:	d1cb      	bne.n	800474a <quorem+0x9e>
 80047b2:	3c01      	subs	r4, #1
 80047b4:	e7c6      	b.n	8004744 <quorem+0x98>
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	3b04      	subs	r3, #4
 80047ba:	2a00      	cmp	r2, #0
 80047bc:	d1f0      	bne.n	80047a0 <quorem+0xf4>
 80047be:	3c01      	subs	r4, #1
 80047c0:	e7eb      	b.n	800479a <quorem+0xee>
 80047c2:	2000      	movs	r0, #0
 80047c4:	e7ee      	b.n	80047a4 <quorem+0xf8>
	...

080047c8 <_dtoa_r>:
 80047c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047cc:	4616      	mov	r6, r2
 80047ce:	461f      	mov	r7, r3
 80047d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80047d2:	b099      	sub	sp, #100	; 0x64
 80047d4:	4605      	mov	r5, r0
 80047d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80047da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80047de:	b974      	cbnz	r4, 80047fe <_dtoa_r+0x36>
 80047e0:	2010      	movs	r0, #16
 80047e2:	f000 fedd 	bl	80055a0 <malloc>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6268      	str	r0, [r5, #36]	; 0x24
 80047ea:	b920      	cbnz	r0, 80047f6 <_dtoa_r+0x2e>
 80047ec:	21ea      	movs	r1, #234	; 0xea
 80047ee:	4bae      	ldr	r3, [pc, #696]	; (8004aa8 <_dtoa_r+0x2e0>)
 80047f0:	48ae      	ldr	r0, [pc, #696]	; (8004aac <_dtoa_r+0x2e4>)
 80047f2:	f001 fdad 	bl	8006350 <__assert_func>
 80047f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80047fa:	6004      	str	r4, [r0, #0]
 80047fc:	60c4      	str	r4, [r0, #12]
 80047fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	b151      	cbz	r1, 800481a <_dtoa_r+0x52>
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	2301      	movs	r3, #1
 8004808:	4093      	lsls	r3, r2
 800480a:	604a      	str	r2, [r1, #4]
 800480c:	608b      	str	r3, [r1, #8]
 800480e:	4628      	mov	r0, r5
 8004810:	f000 ff2a 	bl	8005668 <_Bfree>
 8004814:	2200      	movs	r2, #0
 8004816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	1e3b      	subs	r3, r7, #0
 800481c:	bfaf      	iteee	ge
 800481e:	2300      	movge	r3, #0
 8004820:	2201      	movlt	r2, #1
 8004822:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004826:	9305      	strlt	r3, [sp, #20]
 8004828:	bfa8      	it	ge
 800482a:	f8c8 3000 	strge.w	r3, [r8]
 800482e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004832:	4b9f      	ldr	r3, [pc, #636]	; (8004ab0 <_dtoa_r+0x2e8>)
 8004834:	bfb8      	it	lt
 8004836:	f8c8 2000 	strlt.w	r2, [r8]
 800483a:	ea33 0309 	bics.w	r3, r3, r9
 800483e:	d119      	bne.n	8004874 <_dtoa_r+0xac>
 8004840:	f242 730f 	movw	r3, #9999	; 0x270f
 8004844:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800484c:	4333      	orrs	r3, r6
 800484e:	f000 8580 	beq.w	8005352 <_dtoa_r+0xb8a>
 8004852:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004854:	b953      	cbnz	r3, 800486c <_dtoa_r+0xa4>
 8004856:	4b97      	ldr	r3, [pc, #604]	; (8004ab4 <_dtoa_r+0x2ec>)
 8004858:	e022      	b.n	80048a0 <_dtoa_r+0xd8>
 800485a:	4b97      	ldr	r3, [pc, #604]	; (8004ab8 <_dtoa_r+0x2f0>)
 800485c:	9308      	str	r3, [sp, #32]
 800485e:	3308      	adds	r3, #8
 8004860:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	9808      	ldr	r0, [sp, #32]
 8004866:	b019      	add	sp, #100	; 0x64
 8004868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486c:	4b91      	ldr	r3, [pc, #580]	; (8004ab4 <_dtoa_r+0x2ec>)
 800486e:	9308      	str	r3, [sp, #32]
 8004870:	3303      	adds	r3, #3
 8004872:	e7f5      	b.n	8004860 <_dtoa_r+0x98>
 8004874:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004878:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800487c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004880:	2200      	movs	r2, #0
 8004882:	2300      	movs	r3, #0
 8004884:	f7fc f890 	bl	80009a8 <__aeabi_dcmpeq>
 8004888:	4680      	mov	r8, r0
 800488a:	b158      	cbz	r0, 80048a4 <_dtoa_r+0xdc>
 800488c:	2301      	movs	r3, #1
 800488e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8559 	beq.w	800534c <_dtoa_r+0xb84>
 800489a:	4888      	ldr	r0, [pc, #544]	; (8004abc <_dtoa_r+0x2f4>)
 800489c:	6018      	str	r0, [r3, #0]
 800489e:	1e43      	subs	r3, r0, #1
 80048a0:	9308      	str	r3, [sp, #32]
 80048a2:	e7df      	b.n	8004864 <_dtoa_r+0x9c>
 80048a4:	ab16      	add	r3, sp, #88	; 0x58
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	ab17      	add	r3, sp, #92	; 0x5c
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4628      	mov	r0, r5
 80048ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048b2:	f001 f9bf 	bl	8005c34 <__d2b>
 80048b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80048ba:	4682      	mov	sl, r0
 80048bc:	2c00      	cmp	r4, #0
 80048be:	d07e      	beq.n	80049be <_dtoa_r+0x1f6>
 80048c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80048ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80048d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80048d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80048da:	2200      	movs	r2, #0
 80048dc:	4b78      	ldr	r3, [pc, #480]	; (8004ac0 <_dtoa_r+0x2f8>)
 80048de:	f7fb fc43 	bl	8000168 <__aeabi_dsub>
 80048e2:	a36b      	add	r3, pc, #428	; (adr r3, 8004a90 <_dtoa_r+0x2c8>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fdf6 	bl	80004d8 <__aeabi_dmul>
 80048ec:	a36a      	add	r3, pc, #424	; (adr r3, 8004a98 <_dtoa_r+0x2d0>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fb fc3b 	bl	800016c <__adddf3>
 80048f6:	4606      	mov	r6, r0
 80048f8:	4620      	mov	r0, r4
 80048fa:	460f      	mov	r7, r1
 80048fc:	f7fb fd82 	bl	8000404 <__aeabi_i2d>
 8004900:	a367      	add	r3, pc, #412	; (adr r3, 8004aa0 <_dtoa_r+0x2d8>)
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	f7fb fde7 	bl	80004d8 <__aeabi_dmul>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4630      	mov	r0, r6
 8004910:	4639      	mov	r1, r7
 8004912:	f7fb fc2b 	bl	800016c <__adddf3>
 8004916:	4606      	mov	r6, r0
 8004918:	460f      	mov	r7, r1
 800491a:	f7fc f88d 	bl	8000a38 <__aeabi_d2iz>
 800491e:	2200      	movs	r2, #0
 8004920:	4681      	mov	r9, r0
 8004922:	2300      	movs	r3, #0
 8004924:	4630      	mov	r0, r6
 8004926:	4639      	mov	r1, r7
 8004928:	f7fc f848 	bl	80009bc <__aeabi_dcmplt>
 800492c:	b148      	cbz	r0, 8004942 <_dtoa_r+0x17a>
 800492e:	4648      	mov	r0, r9
 8004930:	f7fb fd68 	bl	8000404 <__aeabi_i2d>
 8004934:	4632      	mov	r2, r6
 8004936:	463b      	mov	r3, r7
 8004938:	f7fc f836 	bl	80009a8 <__aeabi_dcmpeq>
 800493c:	b908      	cbnz	r0, 8004942 <_dtoa_r+0x17a>
 800493e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004942:	f1b9 0f16 	cmp.w	r9, #22
 8004946:	d857      	bhi.n	80049f8 <_dtoa_r+0x230>
 8004948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800494c:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <_dtoa_r+0x2fc>)
 800494e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fc f831 	bl	80009bc <__aeabi_dcmplt>
 800495a:	2800      	cmp	r0, #0
 800495c:	d04e      	beq.n	80049fc <_dtoa_r+0x234>
 800495e:	2300      	movs	r3, #0
 8004960:	f109 39ff 	add.w	r9, r9, #4294967295
 8004964:	930f      	str	r3, [sp, #60]	; 0x3c
 8004966:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004968:	1b1c      	subs	r4, r3, r4
 800496a:	1e63      	subs	r3, r4, #1
 800496c:	9309      	str	r3, [sp, #36]	; 0x24
 800496e:	bf49      	itett	mi
 8004970:	f1c4 0301 	rsbmi	r3, r4, #1
 8004974:	2300      	movpl	r3, #0
 8004976:	9306      	strmi	r3, [sp, #24]
 8004978:	2300      	movmi	r3, #0
 800497a:	bf54      	ite	pl
 800497c:	9306      	strpl	r3, [sp, #24]
 800497e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004980:	f1b9 0f00 	cmp.w	r9, #0
 8004984:	db3c      	blt.n	8004a00 <_dtoa_r+0x238>
 8004986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004988:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800498c:	444b      	add	r3, r9
 800498e:	9309      	str	r3, [sp, #36]	; 0x24
 8004990:	2300      	movs	r3, #0
 8004992:	930a      	str	r3, [sp, #40]	; 0x28
 8004994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004996:	2b09      	cmp	r3, #9
 8004998:	d86c      	bhi.n	8004a74 <_dtoa_r+0x2ac>
 800499a:	2b05      	cmp	r3, #5
 800499c:	bfc4      	itt	gt
 800499e:	3b04      	subgt	r3, #4
 80049a0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80049a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049a4:	bfc8      	it	gt
 80049a6:	2400      	movgt	r4, #0
 80049a8:	f1a3 0302 	sub.w	r3, r3, #2
 80049ac:	bfd8      	it	le
 80049ae:	2401      	movle	r4, #1
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	f200 808b 	bhi.w	8004acc <_dtoa_r+0x304>
 80049b6:	e8df f003 	tbb	[pc, r3]
 80049ba:	4f2d      	.short	0x4f2d
 80049bc:	5b4d      	.short	0x5b4d
 80049be:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80049c2:	441c      	add	r4, r3
 80049c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	bfc3      	ittte	gt
 80049cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049d0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80049d4:	fa09 f303 	lslgt.w	r3, r9, r3
 80049d8:	f1c3 0320 	rsble	r3, r3, #32
 80049dc:	bfc6      	itte	gt
 80049de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80049e2:	4318      	orrgt	r0, r3
 80049e4:	fa06 f003 	lslle.w	r0, r6, r3
 80049e8:	f7fb fcfc 	bl	80003e4 <__aeabi_ui2d>
 80049ec:	2301      	movs	r3, #1
 80049ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80049f2:	3c01      	subs	r4, #1
 80049f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80049f6:	e770      	b.n	80048da <_dtoa_r+0x112>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e7b3      	b.n	8004964 <_dtoa_r+0x19c>
 80049fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80049fe:	e7b2      	b.n	8004966 <_dtoa_r+0x19e>
 8004a00:	9b06      	ldr	r3, [sp, #24]
 8004a02:	eba3 0309 	sub.w	r3, r3, r9
 8004a06:	9306      	str	r3, [sp, #24]
 8004a08:	f1c9 0300 	rsb	r3, r9, #0
 8004a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8004a0e:	2300      	movs	r3, #0
 8004a10:	930e      	str	r3, [sp, #56]	; 0x38
 8004a12:	e7bf      	b.n	8004994 <_dtoa_r+0x1cc>
 8004a14:	2300      	movs	r3, #0
 8004a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dc59      	bgt.n	8004ad2 <_dtoa_r+0x30a>
 8004a1e:	f04f 0b01 	mov.w	fp, #1
 8004a22:	465b      	mov	r3, fp
 8004a24:	f8cd b008 	str.w	fp, [sp, #8]
 8004a28:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004a30:	6042      	str	r2, [r0, #4]
 8004a32:	2204      	movs	r2, #4
 8004a34:	f102 0614 	add.w	r6, r2, #20
 8004a38:	429e      	cmp	r6, r3
 8004a3a:	6841      	ldr	r1, [r0, #4]
 8004a3c:	d94f      	bls.n	8004ade <_dtoa_r+0x316>
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 fdd2 	bl	80055e8 <_Balloc>
 8004a44:	9008      	str	r0, [sp, #32]
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d14d      	bne.n	8004ae6 <_dtoa_r+0x31e>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <_dtoa_r+0x300>)
 8004a52:	e6cd      	b.n	80047f0 <_dtoa_r+0x28>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e7de      	b.n	8004a16 <_dtoa_r+0x24e>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a5e:	eb09 0b03 	add.w	fp, r9, r3
 8004a62:	f10b 0301 	add.w	r3, fp, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	9302      	str	r3, [sp, #8]
 8004a6a:	bfb8      	it	lt
 8004a6c:	2301      	movlt	r3, #1
 8004a6e:	e7dd      	b.n	8004a2c <_dtoa_r+0x264>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e7f2      	b.n	8004a5a <_dtoa_r+0x292>
 8004a74:	2401      	movs	r4, #1
 8004a76:	2300      	movs	r3, #0
 8004a78:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a7a:	9322      	str	r3, [sp, #136]	; 0x88
 8004a7c:	f04f 3bff 	mov.w	fp, #4294967295
 8004a80:	2200      	movs	r2, #0
 8004a82:	2312      	movs	r3, #18
 8004a84:	f8cd b008 	str.w	fp, [sp, #8]
 8004a88:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a8a:	e7cf      	b.n	8004a2c <_dtoa_r+0x264>
 8004a8c:	f3af 8000 	nop.w
 8004a90:	636f4361 	.word	0x636f4361
 8004a94:	3fd287a7 	.word	0x3fd287a7
 8004a98:	8b60c8b3 	.word	0x8b60c8b3
 8004a9c:	3fc68a28 	.word	0x3fc68a28
 8004aa0:	509f79fb 	.word	0x509f79fb
 8004aa4:	3fd34413 	.word	0x3fd34413
 8004aa8:	08006859 	.word	0x08006859
 8004aac:	08006870 	.word	0x08006870
 8004ab0:	7ff00000 	.word	0x7ff00000
 8004ab4:	08006855 	.word	0x08006855
 8004ab8:	0800684c 	.word	0x0800684c
 8004abc:	08006829 	.word	0x08006829
 8004ac0:	3ff80000 	.word	0x3ff80000
 8004ac4:	080069c8 	.word	0x080069c8
 8004ac8:	080068cf 	.word	0x080068cf
 8004acc:	2301      	movs	r3, #1
 8004ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad0:	e7d4      	b.n	8004a7c <_dtoa_r+0x2b4>
 8004ad2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004ad6:	465b      	mov	r3, fp
 8004ad8:	f8cd b008 	str.w	fp, [sp, #8]
 8004adc:	e7a6      	b.n	8004a2c <_dtoa_r+0x264>
 8004ade:	3101      	adds	r1, #1
 8004ae0:	6041      	str	r1, [r0, #4]
 8004ae2:	0052      	lsls	r2, r2, #1
 8004ae4:	e7a6      	b.n	8004a34 <_dtoa_r+0x26c>
 8004ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ae8:	9a08      	ldr	r2, [sp, #32]
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	9b02      	ldr	r3, [sp, #8]
 8004aee:	2b0e      	cmp	r3, #14
 8004af0:	f200 80a8 	bhi.w	8004c44 <_dtoa_r+0x47c>
 8004af4:	2c00      	cmp	r4, #0
 8004af6:	f000 80a5 	beq.w	8004c44 <_dtoa_r+0x47c>
 8004afa:	f1b9 0f00 	cmp.w	r9, #0
 8004afe:	dd34      	ble.n	8004b6a <_dtoa_r+0x3a2>
 8004b00:	4a9a      	ldr	r2, [pc, #616]	; (8004d6c <_dtoa_r+0x5a4>)
 8004b02:	f009 030f 	and.w	r3, r9, #15
 8004b06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b0a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b16:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004b1a:	d016      	beq.n	8004b4a <_dtoa_r+0x382>
 8004b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b20:	4b93      	ldr	r3, [pc, #588]	; (8004d70 <_dtoa_r+0x5a8>)
 8004b22:	2703      	movs	r7, #3
 8004b24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b28:	f7fb fe00 	bl	800072c <__aeabi_ddiv>
 8004b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b30:	f004 040f 	and.w	r4, r4, #15
 8004b34:	4e8e      	ldr	r6, [pc, #568]	; (8004d70 <_dtoa_r+0x5a8>)
 8004b36:	b954      	cbnz	r4, 8004b4e <_dtoa_r+0x386>
 8004b38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b40:	f7fb fdf4 	bl	800072c <__aeabi_ddiv>
 8004b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b48:	e029      	b.n	8004b9e <_dtoa_r+0x3d6>
 8004b4a:	2702      	movs	r7, #2
 8004b4c:	e7f2      	b.n	8004b34 <_dtoa_r+0x36c>
 8004b4e:	07e1      	lsls	r1, r4, #31
 8004b50:	d508      	bpl.n	8004b64 <_dtoa_r+0x39c>
 8004b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b5a:	f7fb fcbd 	bl	80004d8 <__aeabi_dmul>
 8004b5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b62:	3701      	adds	r7, #1
 8004b64:	1064      	asrs	r4, r4, #1
 8004b66:	3608      	adds	r6, #8
 8004b68:	e7e5      	b.n	8004b36 <_dtoa_r+0x36e>
 8004b6a:	f000 80a5 	beq.w	8004cb8 <_dtoa_r+0x4f0>
 8004b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b72:	f1c9 0400 	rsb	r4, r9, #0
 8004b76:	4b7d      	ldr	r3, [pc, #500]	; (8004d6c <_dtoa_r+0x5a4>)
 8004b78:	f004 020f 	and.w	r2, r4, #15
 8004b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fca8 	bl	80004d8 <__aeabi_dmul>
 8004b88:	2702      	movs	r7, #2
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b90:	4e77      	ldr	r6, [pc, #476]	; (8004d70 <_dtoa_r+0x5a8>)
 8004b92:	1124      	asrs	r4, r4, #4
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	f040 8084 	bne.w	8004ca2 <_dtoa_r+0x4da>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1d2      	bne.n	8004b44 <_dtoa_r+0x37c>
 8004b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 808b 	beq.w	8004cbc <_dtoa_r+0x4f4>
 8004ba6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004baa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4b6f      	ldr	r3, [pc, #444]	; (8004d74 <_dtoa_r+0x5ac>)
 8004bb6:	f7fb ff01 	bl	80009bc <__aeabi_dcmplt>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d07e      	beq.n	8004cbc <_dtoa_r+0x4f4>
 8004bbe:	9b02      	ldr	r3, [sp, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d07b      	beq.n	8004cbc <_dtoa_r+0x4f4>
 8004bc4:	f1bb 0f00 	cmp.w	fp, #0
 8004bc8:	dd38      	ble.n	8004c3c <_dtoa_r+0x474>
 8004bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4b69      	ldr	r3, [pc, #420]	; (8004d78 <_dtoa_r+0x5b0>)
 8004bd2:	f7fb fc81 	bl	80004d8 <__aeabi_dmul>
 8004bd6:	465c      	mov	r4, fp
 8004bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bdc:	f109 38ff 	add.w	r8, r9, #4294967295
 8004be0:	3701      	adds	r7, #1
 8004be2:	4638      	mov	r0, r7
 8004be4:	f7fb fc0e 	bl	8000404 <__aeabi_i2d>
 8004be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bec:	f7fb fc74 	bl	80004d8 <__aeabi_dmul>
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <_dtoa_r+0x5b4>)
 8004bf4:	f7fb faba 	bl	800016c <__adddf3>
 8004bf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004bfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c00:	9611      	str	r6, [sp, #68]	; 0x44
 8004c02:	2c00      	cmp	r4, #0
 8004c04:	d15d      	bne.n	8004cc2 <_dtoa_r+0x4fa>
 8004c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4b5c      	ldr	r3, [pc, #368]	; (8004d80 <_dtoa_r+0x5b8>)
 8004c0e:	f7fb faab 	bl	8000168 <__aeabi_dsub>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c1a:	4633      	mov	r3, r6
 8004c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c1e:	f7fb feeb 	bl	80009f8 <__aeabi_dcmpgt>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f040 829e 	bne.w	8005164 <_dtoa_r+0x99c>
 8004c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c32:	f7fb fec3 	bl	80009bc <__aeabi_dcmplt>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	f040 8292 	bne.w	8005160 <_dtoa_r+0x998>
 8004c3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004c40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f2c0 8153 	blt.w	8004ef2 <_dtoa_r+0x72a>
 8004c4c:	f1b9 0f0e 	cmp.w	r9, #14
 8004c50:	f300 814f 	bgt.w	8004ef2 <_dtoa_r+0x72a>
 8004c54:	4b45      	ldr	r3, [pc, #276]	; (8004d6c <_dtoa_r+0x5a4>)
 8004c56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004c5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f280 80db 	bge.w	8004e20 <_dtoa_r+0x658>
 8004c6a:	9b02      	ldr	r3, [sp, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f300 80d7 	bgt.w	8004e20 <_dtoa_r+0x658>
 8004c72:	f040 8274 	bne.w	800515e <_dtoa_r+0x996>
 8004c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	4b40      	ldr	r3, [pc, #256]	; (8004d80 <_dtoa_r+0x5b8>)
 8004c7e:	f7fb fc2b 	bl	80004d8 <__aeabi_dmul>
 8004c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c86:	f7fb fead 	bl	80009e4 <__aeabi_dcmpge>
 8004c8a:	9c02      	ldr	r4, [sp, #8]
 8004c8c:	4626      	mov	r6, r4
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	f040 824a 	bne.w	8005128 <_dtoa_r+0x960>
 8004c94:	2331      	movs	r3, #49	; 0x31
 8004c96:	9f08      	ldr	r7, [sp, #32]
 8004c98:	f109 0901 	add.w	r9, r9, #1
 8004c9c:	f807 3b01 	strb.w	r3, [r7], #1
 8004ca0:	e246      	b.n	8005130 <_dtoa_r+0x968>
 8004ca2:	07e2      	lsls	r2, r4, #31
 8004ca4:	d505      	bpl.n	8004cb2 <_dtoa_r+0x4ea>
 8004ca6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004caa:	f7fb fc15 	bl	80004d8 <__aeabi_dmul>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	3701      	adds	r7, #1
 8004cb2:	1064      	asrs	r4, r4, #1
 8004cb4:	3608      	adds	r6, #8
 8004cb6:	e76d      	b.n	8004b94 <_dtoa_r+0x3cc>
 8004cb8:	2702      	movs	r7, #2
 8004cba:	e770      	b.n	8004b9e <_dtoa_r+0x3d6>
 8004cbc:	46c8      	mov	r8, r9
 8004cbe:	9c02      	ldr	r4, [sp, #8]
 8004cc0:	e78f      	b.n	8004be2 <_dtoa_r+0x41a>
 8004cc2:	9908      	ldr	r1, [sp, #32]
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <_dtoa_r+0x5a4>)
 8004cc6:	4421      	add	r1, r4
 8004cc8:	9112      	str	r1, [sp, #72]	; 0x48
 8004cca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ccc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004cd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	d055      	beq.n	8004d88 <_dtoa_r+0x5c0>
 8004cdc:	2000      	movs	r0, #0
 8004cde:	4929      	ldr	r1, [pc, #164]	; (8004d84 <_dtoa_r+0x5bc>)
 8004ce0:	f7fb fd24 	bl	800072c <__aeabi_ddiv>
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4632      	mov	r2, r6
 8004ce8:	f7fb fa3e 	bl	8000168 <__aeabi_dsub>
 8004cec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cf0:	9f08      	ldr	r7, [sp, #32]
 8004cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cf6:	f7fb fe9f 	bl	8000a38 <__aeabi_d2iz>
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	f7fb fb82 	bl	8000404 <__aeabi_i2d>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d08:	f7fb fa2e 	bl	8000168 <__aeabi_dsub>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	3430      	adds	r4, #48	; 0x30
 8004d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d1a:	f807 4b01 	strb.w	r4, [r7], #1
 8004d1e:	f7fb fe4d 	bl	80009bc <__aeabi_dcmplt>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d174      	bne.n	8004e10 <_dtoa_r+0x648>
 8004d26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	4911      	ldr	r1, [pc, #68]	; (8004d74 <_dtoa_r+0x5ac>)
 8004d2e:	f7fb fa1b 	bl	8000168 <__aeabi_dsub>
 8004d32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d36:	f7fb fe41 	bl	80009bc <__aeabi_dcmplt>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	f040 80b6 	bne.w	8004eac <_dtoa_r+0x6e4>
 8004d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d42:	429f      	cmp	r7, r3
 8004d44:	f43f af7a 	beq.w	8004c3c <_dtoa_r+0x474>
 8004d48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <_dtoa_r+0x5b0>)
 8004d50:	f7fb fbc2 	bl	80004d8 <__aeabi_dmul>
 8004d54:	2200      	movs	r2, #0
 8004d56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <_dtoa_r+0x5b0>)
 8004d60:	f7fb fbba 	bl	80004d8 <__aeabi_dmul>
 8004d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d68:	e7c3      	b.n	8004cf2 <_dtoa_r+0x52a>
 8004d6a:	bf00      	nop
 8004d6c:	080069c8 	.word	0x080069c8
 8004d70:	080069a0 	.word	0x080069a0
 8004d74:	3ff00000 	.word	0x3ff00000
 8004d78:	40240000 	.word	0x40240000
 8004d7c:	401c0000 	.word	0x401c0000
 8004d80:	40140000 	.word	0x40140000
 8004d84:	3fe00000 	.word	0x3fe00000
 8004d88:	4630      	mov	r0, r6
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	f7fb fba4 	bl	80004d8 <__aeabi_dmul>
 8004d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d96:	9c08      	ldr	r4, [sp, #32]
 8004d98:	9314      	str	r3, [sp, #80]	; 0x50
 8004d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d9e:	f7fb fe4b 	bl	8000a38 <__aeabi_d2iz>
 8004da2:	9015      	str	r0, [sp, #84]	; 0x54
 8004da4:	f7fb fb2e 	bl	8000404 <__aeabi_i2d>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004db0:	f7fb f9da 	bl	8000168 <__aeabi_dsub>
 8004db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004db6:	4606      	mov	r6, r0
 8004db8:	3330      	adds	r3, #48	; 0x30
 8004dba:	f804 3b01 	strb.w	r3, [r4], #1
 8004dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dc0:	460f      	mov	r7, r1
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	d124      	bne.n	8004e14 <_dtoa_r+0x64c>
 8004dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dce:	4bb3      	ldr	r3, [pc, #716]	; (800509c <_dtoa_r+0x8d4>)
 8004dd0:	f7fb f9cc 	bl	800016c <__adddf3>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4630      	mov	r0, r6
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb fe0c 	bl	80009f8 <__aeabi_dcmpgt>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d162      	bne.n	8004eaa <_dtoa_r+0x6e2>
 8004de4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004de8:	2000      	movs	r0, #0
 8004dea:	49ac      	ldr	r1, [pc, #688]	; (800509c <_dtoa_r+0x8d4>)
 8004dec:	f7fb f9bc 	bl	8000168 <__aeabi_dsub>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fde0 	bl	80009bc <__aeabi_dcmplt>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	f43f af1d 	beq.w	8004c3c <_dtoa_r+0x474>
 8004e02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e04:	1e7b      	subs	r3, r7, #1
 8004e06:	9314      	str	r3, [sp, #80]	; 0x50
 8004e08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e0c:	2b30      	cmp	r3, #48	; 0x30
 8004e0e:	d0f8      	beq.n	8004e02 <_dtoa_r+0x63a>
 8004e10:	46c1      	mov	r9, r8
 8004e12:	e03a      	b.n	8004e8a <_dtoa_r+0x6c2>
 8004e14:	4ba2      	ldr	r3, [pc, #648]	; (80050a0 <_dtoa_r+0x8d8>)
 8004e16:	f7fb fb5f 	bl	80004d8 <__aeabi_dmul>
 8004e1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e1e:	e7bc      	b.n	8004d9a <_dtoa_r+0x5d2>
 8004e20:	9f08      	ldr	r7, [sp, #32]
 8004e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e2a:	f7fb fc7f 	bl	800072c <__aeabi_ddiv>
 8004e2e:	f7fb fe03 	bl	8000a38 <__aeabi_d2iz>
 8004e32:	4604      	mov	r4, r0
 8004e34:	f7fb fae6 	bl	8000404 <__aeabi_i2d>
 8004e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e3c:	f7fb fb4c 	bl	80004d8 <__aeabi_dmul>
 8004e40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e44:	460b      	mov	r3, r1
 8004e46:	4602      	mov	r2, r0
 8004e48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e4c:	f7fb f98c 	bl	8000168 <__aeabi_dsub>
 8004e50:	f807 6b01 	strb.w	r6, [r7], #1
 8004e54:	9e08      	ldr	r6, [sp, #32]
 8004e56:	9b02      	ldr	r3, [sp, #8]
 8004e58:	1bbe      	subs	r6, r7, r6
 8004e5a:	42b3      	cmp	r3, r6
 8004e5c:	d13a      	bne.n	8004ed4 <_dtoa_r+0x70c>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	f7fb f983 	bl	800016c <__adddf3>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e72:	f7fb fdc1 	bl	80009f8 <__aeabi_dcmpgt>
 8004e76:	bb58      	cbnz	r0, 8004ed0 <_dtoa_r+0x708>
 8004e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e80:	f7fb fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8004e84:	b108      	cbz	r0, 8004e8a <_dtoa_r+0x6c2>
 8004e86:	07e1      	lsls	r1, r4, #31
 8004e88:	d422      	bmi.n	8004ed0 <_dtoa_r+0x708>
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	f000 fbeb 	bl	8005668 <_Bfree>
 8004e92:	2300      	movs	r3, #0
 8004e94:	703b      	strb	r3, [r7, #0]
 8004e96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e98:	f109 0001 	add.w	r0, r9, #1
 8004e9c:	6018      	str	r0, [r3, #0]
 8004e9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f43f acdf 	beq.w	8004864 <_dtoa_r+0x9c>
 8004ea6:	601f      	str	r7, [r3, #0]
 8004ea8:	e4dc      	b.n	8004864 <_dtoa_r+0x9c>
 8004eaa:	4627      	mov	r7, r4
 8004eac:	463b      	mov	r3, r7
 8004eae:	461f      	mov	r7, r3
 8004eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eb4:	2a39      	cmp	r2, #57	; 0x39
 8004eb6:	d107      	bne.n	8004ec8 <_dtoa_r+0x700>
 8004eb8:	9a08      	ldr	r2, [sp, #32]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d1f7      	bne.n	8004eae <_dtoa_r+0x6e6>
 8004ebe:	2230      	movs	r2, #48	; 0x30
 8004ec0:	9908      	ldr	r1, [sp, #32]
 8004ec2:	f108 0801 	add.w	r8, r8, #1
 8004ec6:	700a      	strb	r2, [r1, #0]
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	3201      	adds	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e79f      	b.n	8004e10 <_dtoa_r+0x648>
 8004ed0:	46c8      	mov	r8, r9
 8004ed2:	e7eb      	b.n	8004eac <_dtoa_r+0x6e4>
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4b72      	ldr	r3, [pc, #456]	; (80050a0 <_dtoa_r+0x8d8>)
 8004ed8:	f7fb fafe 	bl	80004d8 <__aeabi_dmul>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f7fb fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d098      	beq.n	8004e22 <_dtoa_r+0x65a>
 8004ef0:	e7cb      	b.n	8004e8a <_dtoa_r+0x6c2>
 8004ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ef4:	2a00      	cmp	r2, #0
 8004ef6:	f000 80cd 	beq.w	8005094 <_dtoa_r+0x8cc>
 8004efa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004efc:	2a01      	cmp	r2, #1
 8004efe:	f300 80af 	bgt.w	8005060 <_dtoa_r+0x898>
 8004f02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	f000 80a7 	beq.w	8005058 <_dtoa_r+0x890>
 8004f0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f10:	9f06      	ldr	r7, [sp, #24]
 8004f12:	9a06      	ldr	r2, [sp, #24]
 8004f14:	2101      	movs	r1, #1
 8004f16:	441a      	add	r2, r3
 8004f18:	9206      	str	r2, [sp, #24]
 8004f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	441a      	add	r2, r3
 8004f20:	9209      	str	r2, [sp, #36]	; 0x24
 8004f22:	f000 fc5b 	bl	80057dc <__i2b>
 8004f26:	4606      	mov	r6, r0
 8004f28:	2f00      	cmp	r7, #0
 8004f2a:	dd0c      	ble.n	8004f46 <_dtoa_r+0x77e>
 8004f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dd09      	ble.n	8004f46 <_dtoa_r+0x77e>
 8004f32:	42bb      	cmp	r3, r7
 8004f34:	bfa8      	it	ge
 8004f36:	463b      	movge	r3, r7
 8004f38:	9a06      	ldr	r2, [sp, #24]
 8004f3a:	1aff      	subs	r7, r7, r3
 8004f3c:	1ad2      	subs	r2, r2, r3
 8004f3e:	9206      	str	r2, [sp, #24]
 8004f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	9309      	str	r3, [sp, #36]	; 0x24
 8004f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f48:	b1f3      	cbz	r3, 8004f88 <_dtoa_r+0x7c0>
 8004f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80a9 	beq.w	80050a4 <_dtoa_r+0x8dc>
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	dd10      	ble.n	8004f78 <_dtoa_r+0x7b0>
 8004f56:	4631      	mov	r1, r6
 8004f58:	4622      	mov	r2, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 fcf8 	bl	8005950 <__pow5mult>
 8004f60:	4652      	mov	r2, sl
 8004f62:	4601      	mov	r1, r0
 8004f64:	4606      	mov	r6, r0
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 fc4e 	bl	8005808 <__multiply>
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	4651      	mov	r1, sl
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 fb79 	bl	8005668 <_Bfree>
 8004f76:	46c2      	mov	sl, r8
 8004f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f7a:	1b1a      	subs	r2, r3, r4
 8004f7c:	d004      	beq.n	8004f88 <_dtoa_r+0x7c0>
 8004f7e:	4651      	mov	r1, sl
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fce5 	bl	8005950 <__pow5mult>
 8004f86:	4682      	mov	sl, r0
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fc26 	bl	80057dc <__i2b>
 8004f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f92:	4604      	mov	r4, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f340 8087 	ble.w	80050a8 <_dtoa_r+0x8e0>
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 fcd6 	bl	8005950 <__pow5mult>
 8004fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f340 8080 	ble.w	80050ae <_dtoa_r+0x8e6>
 8004fae:	f04f 0800 	mov.w	r8, #0
 8004fb2:	6923      	ldr	r3, [r4, #16]
 8004fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fb8:	6918      	ldr	r0, [r3, #16]
 8004fba:	f000 fbc1 	bl	8005740 <__hi0bits>
 8004fbe:	f1c0 0020 	rsb	r0, r0, #32
 8004fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc4:	4418      	add	r0, r3
 8004fc6:	f010 001f 	ands.w	r0, r0, #31
 8004fca:	f000 8092 	beq.w	80050f2 <_dtoa_r+0x92a>
 8004fce:	f1c0 0320 	rsb	r3, r0, #32
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	f340 808a 	ble.w	80050ec <_dtoa_r+0x924>
 8004fd8:	f1c0 001c 	rsb	r0, r0, #28
 8004fdc:	9b06      	ldr	r3, [sp, #24]
 8004fde:	4407      	add	r7, r0
 8004fe0:	4403      	add	r3, r0
 8004fe2:	9306      	str	r3, [sp, #24]
 8004fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe6:	4403      	add	r3, r0
 8004fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fea:	9b06      	ldr	r3, [sp, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dd05      	ble.n	8004ffc <_dtoa_r+0x834>
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 fd05 	bl	8005a04 <__lshift>
 8004ffa:	4682      	mov	sl, r0
 8004ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	dd05      	ble.n	800500e <_dtoa_r+0x846>
 8005002:	4621      	mov	r1, r4
 8005004:	461a      	mov	r2, r3
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fcfc 	bl	8005a04 <__lshift>
 800500c:	4604      	mov	r4, r0
 800500e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d070      	beq.n	80050f6 <_dtoa_r+0x92e>
 8005014:	4621      	mov	r1, r4
 8005016:	4650      	mov	r0, sl
 8005018:	f000 fd60 	bl	8005adc <__mcmp>
 800501c:	2800      	cmp	r0, #0
 800501e:	da6a      	bge.n	80050f6 <_dtoa_r+0x92e>
 8005020:	2300      	movs	r3, #0
 8005022:	4651      	mov	r1, sl
 8005024:	220a      	movs	r2, #10
 8005026:	4628      	mov	r0, r5
 8005028:	f000 fb40 	bl	80056ac <__multadd>
 800502c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800502e:	4682      	mov	sl, r0
 8005030:	f109 39ff 	add.w	r9, r9, #4294967295
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8193 	beq.w	8005360 <_dtoa_r+0xb98>
 800503a:	4631      	mov	r1, r6
 800503c:	2300      	movs	r3, #0
 800503e:	220a      	movs	r2, #10
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fb33 	bl	80056ac <__multadd>
 8005046:	f1bb 0f00 	cmp.w	fp, #0
 800504a:	4606      	mov	r6, r0
 800504c:	f300 8093 	bgt.w	8005176 <_dtoa_r+0x9ae>
 8005050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005052:	2b02      	cmp	r3, #2
 8005054:	dc57      	bgt.n	8005106 <_dtoa_r+0x93e>
 8005056:	e08e      	b.n	8005176 <_dtoa_r+0x9ae>
 8005058:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800505a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800505e:	e756      	b.n	8004f0e <_dtoa_r+0x746>
 8005060:	9b02      	ldr	r3, [sp, #8]
 8005062:	1e5c      	subs	r4, r3, #1
 8005064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005066:	42a3      	cmp	r3, r4
 8005068:	bfb7      	itett	lt
 800506a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800506c:	1b1c      	subge	r4, r3, r4
 800506e:	1ae2      	sublt	r2, r4, r3
 8005070:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005072:	bfbe      	ittt	lt
 8005074:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005076:	189b      	addlt	r3, r3, r2
 8005078:	930e      	strlt	r3, [sp, #56]	; 0x38
 800507a:	9b02      	ldr	r3, [sp, #8]
 800507c:	bfb8      	it	lt
 800507e:	2400      	movlt	r4, #0
 8005080:	2b00      	cmp	r3, #0
 8005082:	bfbb      	ittet	lt
 8005084:	9b06      	ldrlt	r3, [sp, #24]
 8005086:	9a02      	ldrlt	r2, [sp, #8]
 8005088:	9f06      	ldrge	r7, [sp, #24]
 800508a:	1a9f      	sublt	r7, r3, r2
 800508c:	bfac      	ite	ge
 800508e:	9b02      	ldrge	r3, [sp, #8]
 8005090:	2300      	movlt	r3, #0
 8005092:	e73e      	b.n	8004f12 <_dtoa_r+0x74a>
 8005094:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005096:	9f06      	ldr	r7, [sp, #24]
 8005098:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800509a:	e745      	b.n	8004f28 <_dtoa_r+0x760>
 800509c:	3fe00000 	.word	0x3fe00000
 80050a0:	40240000 	.word	0x40240000
 80050a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050a6:	e76a      	b.n	8004f7e <_dtoa_r+0x7b6>
 80050a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	dc19      	bgt.n	80050e2 <_dtoa_r+0x91a>
 80050ae:	9b04      	ldr	r3, [sp, #16]
 80050b0:	b9bb      	cbnz	r3, 80050e2 <_dtoa_r+0x91a>
 80050b2:	9b05      	ldr	r3, [sp, #20]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	b99b      	cbnz	r3, 80050e2 <_dtoa_r+0x91a>
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c0:	0d1b      	lsrs	r3, r3, #20
 80050c2:	051b      	lsls	r3, r3, #20
 80050c4:	b183      	cbz	r3, 80050e8 <_dtoa_r+0x920>
 80050c6:	f04f 0801 	mov.w	r8, #1
 80050ca:	9b06      	ldr	r3, [sp, #24]
 80050cc:	3301      	adds	r3, #1
 80050ce:	9306      	str	r3, [sp, #24]
 80050d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d2:	3301      	adds	r3, #1
 80050d4:	9309      	str	r3, [sp, #36]	; 0x24
 80050d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f af6a 	bne.w	8004fb2 <_dtoa_r+0x7ea>
 80050de:	2001      	movs	r0, #1
 80050e0:	e76f      	b.n	8004fc2 <_dtoa_r+0x7fa>
 80050e2:	f04f 0800 	mov.w	r8, #0
 80050e6:	e7f6      	b.n	80050d6 <_dtoa_r+0x90e>
 80050e8:	4698      	mov	r8, r3
 80050ea:	e7f4      	b.n	80050d6 <_dtoa_r+0x90e>
 80050ec:	f43f af7d 	beq.w	8004fea <_dtoa_r+0x822>
 80050f0:	4618      	mov	r0, r3
 80050f2:	301c      	adds	r0, #28
 80050f4:	e772      	b.n	8004fdc <_dtoa_r+0x814>
 80050f6:	9b02      	ldr	r3, [sp, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dc36      	bgt.n	800516a <_dtoa_r+0x9a2>
 80050fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050fe:	2b02      	cmp	r3, #2
 8005100:	dd33      	ble.n	800516a <_dtoa_r+0x9a2>
 8005102:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005106:	f1bb 0f00 	cmp.w	fp, #0
 800510a:	d10d      	bne.n	8005128 <_dtoa_r+0x960>
 800510c:	4621      	mov	r1, r4
 800510e:	465b      	mov	r3, fp
 8005110:	2205      	movs	r2, #5
 8005112:	4628      	mov	r0, r5
 8005114:	f000 faca 	bl	80056ac <__multadd>
 8005118:	4601      	mov	r1, r0
 800511a:	4604      	mov	r4, r0
 800511c:	4650      	mov	r0, sl
 800511e:	f000 fcdd 	bl	8005adc <__mcmp>
 8005122:	2800      	cmp	r0, #0
 8005124:	f73f adb6 	bgt.w	8004c94 <_dtoa_r+0x4cc>
 8005128:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800512a:	9f08      	ldr	r7, [sp, #32]
 800512c:	ea6f 0903 	mvn.w	r9, r3
 8005130:	f04f 0800 	mov.w	r8, #0
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f000 fa96 	bl	8005668 <_Bfree>
 800513c:	2e00      	cmp	r6, #0
 800513e:	f43f aea4 	beq.w	8004e8a <_dtoa_r+0x6c2>
 8005142:	f1b8 0f00 	cmp.w	r8, #0
 8005146:	d005      	beq.n	8005154 <_dtoa_r+0x98c>
 8005148:	45b0      	cmp	r8, r6
 800514a:	d003      	beq.n	8005154 <_dtoa_r+0x98c>
 800514c:	4641      	mov	r1, r8
 800514e:	4628      	mov	r0, r5
 8005150:	f000 fa8a 	bl	8005668 <_Bfree>
 8005154:	4631      	mov	r1, r6
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fa86 	bl	8005668 <_Bfree>
 800515c:	e695      	b.n	8004e8a <_dtoa_r+0x6c2>
 800515e:	2400      	movs	r4, #0
 8005160:	4626      	mov	r6, r4
 8005162:	e7e1      	b.n	8005128 <_dtoa_r+0x960>
 8005164:	46c1      	mov	r9, r8
 8005166:	4626      	mov	r6, r4
 8005168:	e594      	b.n	8004c94 <_dtoa_r+0x4cc>
 800516a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800516c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80fc 	beq.w	800536e <_dtoa_r+0xba6>
 8005176:	2f00      	cmp	r7, #0
 8005178:	dd05      	ble.n	8005186 <_dtoa_r+0x9be>
 800517a:	4631      	mov	r1, r6
 800517c:	463a      	mov	r2, r7
 800517e:	4628      	mov	r0, r5
 8005180:	f000 fc40 	bl	8005a04 <__lshift>
 8005184:	4606      	mov	r6, r0
 8005186:	f1b8 0f00 	cmp.w	r8, #0
 800518a:	d05c      	beq.n	8005246 <_dtoa_r+0xa7e>
 800518c:	4628      	mov	r0, r5
 800518e:	6871      	ldr	r1, [r6, #4]
 8005190:	f000 fa2a 	bl	80055e8 <_Balloc>
 8005194:	4607      	mov	r7, r0
 8005196:	b928      	cbnz	r0, 80051a4 <_dtoa_r+0x9dc>
 8005198:	4602      	mov	r2, r0
 800519a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800519e:	4b7e      	ldr	r3, [pc, #504]	; (8005398 <_dtoa_r+0xbd0>)
 80051a0:	f7ff bb26 	b.w	80047f0 <_dtoa_r+0x28>
 80051a4:	6932      	ldr	r2, [r6, #16]
 80051a6:	f106 010c 	add.w	r1, r6, #12
 80051aa:	3202      	adds	r2, #2
 80051ac:	0092      	lsls	r2, r2, #2
 80051ae:	300c      	adds	r0, #12
 80051b0:	f000 fa0c 	bl	80055cc <memcpy>
 80051b4:	2201      	movs	r2, #1
 80051b6:	4639      	mov	r1, r7
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 fc23 	bl	8005a04 <__lshift>
 80051be:	46b0      	mov	r8, r6
 80051c0:	4606      	mov	r6, r0
 80051c2:	9b08      	ldr	r3, [sp, #32]
 80051c4:	3301      	adds	r3, #1
 80051c6:	9302      	str	r3, [sp, #8]
 80051c8:	9b08      	ldr	r3, [sp, #32]
 80051ca:	445b      	add	r3, fp
 80051cc:	930a      	str	r3, [sp, #40]	; 0x28
 80051ce:	9b04      	ldr	r3, [sp, #16]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	9309      	str	r3, [sp, #36]	; 0x24
 80051d6:	9b02      	ldr	r3, [sp, #8]
 80051d8:	4621      	mov	r1, r4
 80051da:	4650      	mov	r0, sl
 80051dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80051e0:	f7ff fa64 	bl	80046ac <quorem>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4641      	mov	r1, r8
 80051e8:	3330      	adds	r3, #48	; 0x30
 80051ea:	9004      	str	r0, [sp, #16]
 80051ec:	4650      	mov	r0, sl
 80051ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f0:	f000 fc74 	bl	8005adc <__mcmp>
 80051f4:	4632      	mov	r2, r6
 80051f6:	9006      	str	r0, [sp, #24]
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 fc8a 	bl	8005b14 <__mdiff>
 8005200:	68c2      	ldr	r2, [r0, #12]
 8005202:	4607      	mov	r7, r0
 8005204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005206:	bb02      	cbnz	r2, 800524a <_dtoa_r+0xa82>
 8005208:	4601      	mov	r1, r0
 800520a:	4650      	mov	r0, sl
 800520c:	f000 fc66 	bl	8005adc <__mcmp>
 8005210:	4602      	mov	r2, r0
 8005212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005214:	4639      	mov	r1, r7
 8005216:	4628      	mov	r0, r5
 8005218:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800521c:	f000 fa24 	bl	8005668 <_Bfree>
 8005220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005224:	9f02      	ldr	r7, [sp, #8]
 8005226:	ea43 0102 	orr.w	r1, r3, r2
 800522a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522c:	430b      	orrs	r3, r1
 800522e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005230:	d10d      	bne.n	800524e <_dtoa_r+0xa86>
 8005232:	2b39      	cmp	r3, #57	; 0x39
 8005234:	d027      	beq.n	8005286 <_dtoa_r+0xabe>
 8005236:	9a06      	ldr	r2, [sp, #24]
 8005238:	2a00      	cmp	r2, #0
 800523a:	dd01      	ble.n	8005240 <_dtoa_r+0xa78>
 800523c:	9b04      	ldr	r3, [sp, #16]
 800523e:	3331      	adds	r3, #49	; 0x31
 8005240:	f88b 3000 	strb.w	r3, [fp]
 8005244:	e776      	b.n	8005134 <_dtoa_r+0x96c>
 8005246:	4630      	mov	r0, r6
 8005248:	e7b9      	b.n	80051be <_dtoa_r+0x9f6>
 800524a:	2201      	movs	r2, #1
 800524c:	e7e2      	b.n	8005214 <_dtoa_r+0xa4c>
 800524e:	9906      	ldr	r1, [sp, #24]
 8005250:	2900      	cmp	r1, #0
 8005252:	db04      	blt.n	800525e <_dtoa_r+0xa96>
 8005254:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005256:	4301      	orrs	r1, r0
 8005258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800525a:	4301      	orrs	r1, r0
 800525c:	d120      	bne.n	80052a0 <_dtoa_r+0xad8>
 800525e:	2a00      	cmp	r2, #0
 8005260:	ddee      	ble.n	8005240 <_dtoa_r+0xa78>
 8005262:	4651      	mov	r1, sl
 8005264:	2201      	movs	r2, #1
 8005266:	4628      	mov	r0, r5
 8005268:	9302      	str	r3, [sp, #8]
 800526a:	f000 fbcb 	bl	8005a04 <__lshift>
 800526e:	4621      	mov	r1, r4
 8005270:	4682      	mov	sl, r0
 8005272:	f000 fc33 	bl	8005adc <__mcmp>
 8005276:	2800      	cmp	r0, #0
 8005278:	9b02      	ldr	r3, [sp, #8]
 800527a:	dc02      	bgt.n	8005282 <_dtoa_r+0xaba>
 800527c:	d1e0      	bne.n	8005240 <_dtoa_r+0xa78>
 800527e:	07da      	lsls	r2, r3, #31
 8005280:	d5de      	bpl.n	8005240 <_dtoa_r+0xa78>
 8005282:	2b39      	cmp	r3, #57	; 0x39
 8005284:	d1da      	bne.n	800523c <_dtoa_r+0xa74>
 8005286:	2339      	movs	r3, #57	; 0x39
 8005288:	f88b 3000 	strb.w	r3, [fp]
 800528c:	463b      	mov	r3, r7
 800528e:	461f      	mov	r7, r3
 8005290:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005294:	3b01      	subs	r3, #1
 8005296:	2a39      	cmp	r2, #57	; 0x39
 8005298:	d050      	beq.n	800533c <_dtoa_r+0xb74>
 800529a:	3201      	adds	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e749      	b.n	8005134 <_dtoa_r+0x96c>
 80052a0:	2a00      	cmp	r2, #0
 80052a2:	dd03      	ble.n	80052ac <_dtoa_r+0xae4>
 80052a4:	2b39      	cmp	r3, #57	; 0x39
 80052a6:	d0ee      	beq.n	8005286 <_dtoa_r+0xabe>
 80052a8:	3301      	adds	r3, #1
 80052aa:	e7c9      	b.n	8005240 <_dtoa_r+0xa78>
 80052ac:	9a02      	ldr	r2, [sp, #8]
 80052ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80052b4:	428a      	cmp	r2, r1
 80052b6:	d02a      	beq.n	800530e <_dtoa_r+0xb46>
 80052b8:	4651      	mov	r1, sl
 80052ba:	2300      	movs	r3, #0
 80052bc:	220a      	movs	r2, #10
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f9f4 	bl	80056ac <__multadd>
 80052c4:	45b0      	cmp	r8, r6
 80052c6:	4682      	mov	sl, r0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	f04f 020a 	mov.w	r2, #10
 80052d0:	4641      	mov	r1, r8
 80052d2:	4628      	mov	r0, r5
 80052d4:	d107      	bne.n	80052e6 <_dtoa_r+0xb1e>
 80052d6:	f000 f9e9 	bl	80056ac <__multadd>
 80052da:	4680      	mov	r8, r0
 80052dc:	4606      	mov	r6, r0
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	3301      	adds	r3, #1
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	e777      	b.n	80051d6 <_dtoa_r+0xa0e>
 80052e6:	f000 f9e1 	bl	80056ac <__multadd>
 80052ea:	4631      	mov	r1, r6
 80052ec:	4680      	mov	r8, r0
 80052ee:	2300      	movs	r3, #0
 80052f0:	220a      	movs	r2, #10
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 f9da 	bl	80056ac <__multadd>
 80052f8:	4606      	mov	r6, r0
 80052fa:	e7f0      	b.n	80052de <_dtoa_r+0xb16>
 80052fc:	f1bb 0f00 	cmp.w	fp, #0
 8005300:	bfcc      	ite	gt
 8005302:	465f      	movgt	r7, fp
 8005304:	2701      	movle	r7, #1
 8005306:	f04f 0800 	mov.w	r8, #0
 800530a:	9a08      	ldr	r2, [sp, #32]
 800530c:	4417      	add	r7, r2
 800530e:	4651      	mov	r1, sl
 8005310:	2201      	movs	r2, #1
 8005312:	4628      	mov	r0, r5
 8005314:	9302      	str	r3, [sp, #8]
 8005316:	f000 fb75 	bl	8005a04 <__lshift>
 800531a:	4621      	mov	r1, r4
 800531c:	4682      	mov	sl, r0
 800531e:	f000 fbdd 	bl	8005adc <__mcmp>
 8005322:	2800      	cmp	r0, #0
 8005324:	dcb2      	bgt.n	800528c <_dtoa_r+0xac4>
 8005326:	d102      	bne.n	800532e <_dtoa_r+0xb66>
 8005328:	9b02      	ldr	r3, [sp, #8]
 800532a:	07db      	lsls	r3, r3, #31
 800532c:	d4ae      	bmi.n	800528c <_dtoa_r+0xac4>
 800532e:	463b      	mov	r3, r7
 8005330:	461f      	mov	r7, r3
 8005332:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005336:	2a30      	cmp	r2, #48	; 0x30
 8005338:	d0fa      	beq.n	8005330 <_dtoa_r+0xb68>
 800533a:	e6fb      	b.n	8005134 <_dtoa_r+0x96c>
 800533c:	9a08      	ldr	r2, [sp, #32]
 800533e:	429a      	cmp	r2, r3
 8005340:	d1a5      	bne.n	800528e <_dtoa_r+0xac6>
 8005342:	2331      	movs	r3, #49	; 0x31
 8005344:	f109 0901 	add.w	r9, r9, #1
 8005348:	7013      	strb	r3, [r2, #0]
 800534a:	e6f3      	b.n	8005134 <_dtoa_r+0x96c>
 800534c:	4b13      	ldr	r3, [pc, #76]	; (800539c <_dtoa_r+0xbd4>)
 800534e:	f7ff baa7 	b.w	80048a0 <_dtoa_r+0xd8>
 8005352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005354:	2b00      	cmp	r3, #0
 8005356:	f47f aa80 	bne.w	800485a <_dtoa_r+0x92>
 800535a:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <_dtoa_r+0xbd8>)
 800535c:	f7ff baa0 	b.w	80048a0 <_dtoa_r+0xd8>
 8005360:	f1bb 0f00 	cmp.w	fp, #0
 8005364:	dc03      	bgt.n	800536e <_dtoa_r+0xba6>
 8005366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005368:	2b02      	cmp	r3, #2
 800536a:	f73f aecc 	bgt.w	8005106 <_dtoa_r+0x93e>
 800536e:	9f08      	ldr	r7, [sp, #32]
 8005370:	4621      	mov	r1, r4
 8005372:	4650      	mov	r0, sl
 8005374:	f7ff f99a 	bl	80046ac <quorem>
 8005378:	9a08      	ldr	r2, [sp, #32]
 800537a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800537e:	f807 3b01 	strb.w	r3, [r7], #1
 8005382:	1aba      	subs	r2, r7, r2
 8005384:	4593      	cmp	fp, r2
 8005386:	ddb9      	ble.n	80052fc <_dtoa_r+0xb34>
 8005388:	4651      	mov	r1, sl
 800538a:	2300      	movs	r3, #0
 800538c:	220a      	movs	r2, #10
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f98c 	bl	80056ac <__multadd>
 8005394:	4682      	mov	sl, r0
 8005396:	e7eb      	b.n	8005370 <_dtoa_r+0xba8>
 8005398:	080068cf 	.word	0x080068cf
 800539c:	08006828 	.word	0x08006828
 80053a0:	0800684c 	.word	0x0800684c

080053a4 <std>:
 80053a4:	2300      	movs	r3, #0
 80053a6:	b510      	push	{r4, lr}
 80053a8:	4604      	mov	r4, r0
 80053aa:	e9c0 3300 	strd	r3, r3, [r0]
 80053ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053b2:	6083      	str	r3, [r0, #8]
 80053b4:	8181      	strh	r1, [r0, #12]
 80053b6:	6643      	str	r3, [r0, #100]	; 0x64
 80053b8:	81c2      	strh	r2, [r0, #14]
 80053ba:	6183      	str	r3, [r0, #24]
 80053bc:	4619      	mov	r1, r3
 80053be:	2208      	movs	r2, #8
 80053c0:	305c      	adds	r0, #92	; 0x5c
 80053c2:	f7fe fcf3 	bl	8003dac <memset>
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <std+0x38>)
 80053c8:	6224      	str	r4, [r4, #32]
 80053ca:	6263      	str	r3, [r4, #36]	; 0x24
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <std+0x3c>)
 80053ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <std+0x40>)
 80053d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <std+0x44>)
 80053d6:	6323      	str	r3, [r4, #48]	; 0x30
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	bf00      	nop
 80053dc:	08006125 	.word	0x08006125
 80053e0:	08006147 	.word	0x08006147
 80053e4:	0800617f 	.word	0x0800617f
 80053e8:	080061a3 	.word	0x080061a3

080053ec <_cleanup_r>:
 80053ec:	4901      	ldr	r1, [pc, #4]	; (80053f4 <_cleanup_r+0x8>)
 80053ee:	f000 b8af 	b.w	8005550 <_fwalk_reent>
 80053f2:	bf00      	nop
 80053f4:	080064b9 	.word	0x080064b9

080053f8 <__sfmoreglue>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	2568      	movs	r5, #104	; 0x68
 80053fc:	1e4a      	subs	r2, r1, #1
 80053fe:	4355      	muls	r5, r2
 8005400:	460e      	mov	r6, r1
 8005402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005406:	f000 fccb 	bl	8005da0 <_malloc_r>
 800540a:	4604      	mov	r4, r0
 800540c:	b140      	cbz	r0, 8005420 <__sfmoreglue+0x28>
 800540e:	2100      	movs	r1, #0
 8005410:	e9c0 1600 	strd	r1, r6, [r0]
 8005414:	300c      	adds	r0, #12
 8005416:	60a0      	str	r0, [r4, #8]
 8005418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800541c:	f7fe fcc6 	bl	8003dac <memset>
 8005420:	4620      	mov	r0, r4
 8005422:	bd70      	pop	{r4, r5, r6, pc}

08005424 <__sfp_lock_acquire>:
 8005424:	4801      	ldr	r0, [pc, #4]	; (800542c <__sfp_lock_acquire+0x8>)
 8005426:	f000 b8b8 	b.w	800559a <__retarget_lock_acquire_recursive>
 800542a:	bf00      	nop
 800542c:	20000360 	.word	0x20000360

08005430 <__sfp_lock_release>:
 8005430:	4801      	ldr	r0, [pc, #4]	; (8005438 <__sfp_lock_release+0x8>)
 8005432:	f000 b8b3 	b.w	800559c <__retarget_lock_release_recursive>
 8005436:	bf00      	nop
 8005438:	20000360 	.word	0x20000360

0800543c <__sinit_lock_acquire>:
 800543c:	4801      	ldr	r0, [pc, #4]	; (8005444 <__sinit_lock_acquire+0x8>)
 800543e:	f000 b8ac 	b.w	800559a <__retarget_lock_acquire_recursive>
 8005442:	bf00      	nop
 8005444:	2000035b 	.word	0x2000035b

08005448 <__sinit_lock_release>:
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <__sinit_lock_release+0x8>)
 800544a:	f000 b8a7 	b.w	800559c <__retarget_lock_release_recursive>
 800544e:	bf00      	nop
 8005450:	2000035b 	.word	0x2000035b

08005454 <__sinit>:
 8005454:	b510      	push	{r4, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	f7ff fff0 	bl	800543c <__sinit_lock_acquire>
 800545c:	69a3      	ldr	r3, [r4, #24]
 800545e:	b11b      	cbz	r3, 8005468 <__sinit+0x14>
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005464:	f7ff bff0 	b.w	8005448 <__sinit_lock_release>
 8005468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800546c:	6523      	str	r3, [r4, #80]	; 0x50
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <__sinit+0x68>)
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <__sinit+0x6c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	62a2      	str	r2, [r4, #40]	; 0x28
 8005476:	42a3      	cmp	r3, r4
 8005478:	bf08      	it	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	4620      	mov	r0, r4
 800547e:	bf08      	it	eq
 8005480:	61a3      	streq	r3, [r4, #24]
 8005482:	f000 f81f 	bl	80054c4 <__sfp>
 8005486:	6060      	str	r0, [r4, #4]
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f81b 	bl	80054c4 <__sfp>
 800548e:	60a0      	str	r0, [r4, #8]
 8005490:	4620      	mov	r0, r4
 8005492:	f000 f817 	bl	80054c4 <__sfp>
 8005496:	2200      	movs	r2, #0
 8005498:	2104      	movs	r1, #4
 800549a:	60e0      	str	r0, [r4, #12]
 800549c:	6860      	ldr	r0, [r4, #4]
 800549e:	f7ff ff81 	bl	80053a4 <std>
 80054a2:	2201      	movs	r2, #1
 80054a4:	2109      	movs	r1, #9
 80054a6:	68a0      	ldr	r0, [r4, #8]
 80054a8:	f7ff ff7c 	bl	80053a4 <std>
 80054ac:	2202      	movs	r2, #2
 80054ae:	2112      	movs	r1, #18
 80054b0:	68e0      	ldr	r0, [r4, #12]
 80054b2:	f7ff ff77 	bl	80053a4 <std>
 80054b6:	2301      	movs	r3, #1
 80054b8:	61a3      	str	r3, [r4, #24]
 80054ba:	e7d1      	b.n	8005460 <__sinit+0xc>
 80054bc:	08006814 	.word	0x08006814
 80054c0:	080053ed 	.word	0x080053ed

080054c4 <__sfp>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	4607      	mov	r7, r0
 80054c8:	f7ff ffac 	bl	8005424 <__sfp_lock_acquire>
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <__sfp+0x84>)
 80054ce:	681e      	ldr	r6, [r3, #0]
 80054d0:	69b3      	ldr	r3, [r6, #24]
 80054d2:	b913      	cbnz	r3, 80054da <__sfp+0x16>
 80054d4:	4630      	mov	r0, r6
 80054d6:	f7ff ffbd 	bl	8005454 <__sinit>
 80054da:	3648      	adds	r6, #72	; 0x48
 80054dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	d503      	bpl.n	80054ec <__sfp+0x28>
 80054e4:	6833      	ldr	r3, [r6, #0]
 80054e6:	b30b      	cbz	r3, 800552c <__sfp+0x68>
 80054e8:	6836      	ldr	r6, [r6, #0]
 80054ea:	e7f7      	b.n	80054dc <__sfp+0x18>
 80054ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054f0:	b9d5      	cbnz	r5, 8005528 <__sfp+0x64>
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <__sfp+0x88>)
 80054f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054f8:	60e3      	str	r3, [r4, #12]
 80054fa:	6665      	str	r5, [r4, #100]	; 0x64
 80054fc:	f000 f84c 	bl	8005598 <__retarget_lock_init_recursive>
 8005500:	f7ff ff96 	bl	8005430 <__sfp_lock_release>
 8005504:	2208      	movs	r2, #8
 8005506:	4629      	mov	r1, r5
 8005508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800550c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005510:	6025      	str	r5, [r4, #0]
 8005512:	61a5      	str	r5, [r4, #24]
 8005514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005518:	f7fe fc48 	bl	8003dac <memset>
 800551c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005524:	4620      	mov	r0, r4
 8005526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005528:	3468      	adds	r4, #104	; 0x68
 800552a:	e7d9      	b.n	80054e0 <__sfp+0x1c>
 800552c:	2104      	movs	r1, #4
 800552e:	4638      	mov	r0, r7
 8005530:	f7ff ff62 	bl	80053f8 <__sfmoreglue>
 8005534:	4604      	mov	r4, r0
 8005536:	6030      	str	r0, [r6, #0]
 8005538:	2800      	cmp	r0, #0
 800553a:	d1d5      	bne.n	80054e8 <__sfp+0x24>
 800553c:	f7ff ff78 	bl	8005430 <__sfp_lock_release>
 8005540:	230c      	movs	r3, #12
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	e7ee      	b.n	8005524 <__sfp+0x60>
 8005546:	bf00      	nop
 8005548:	08006814 	.word	0x08006814
 800554c:	ffff0001 	.word	0xffff0001

08005550 <_fwalk_reent>:
 8005550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005554:	4606      	mov	r6, r0
 8005556:	4688      	mov	r8, r1
 8005558:	2700      	movs	r7, #0
 800555a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800555e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005562:	f1b9 0901 	subs.w	r9, r9, #1
 8005566:	d505      	bpl.n	8005574 <_fwalk_reent+0x24>
 8005568:	6824      	ldr	r4, [r4, #0]
 800556a:	2c00      	cmp	r4, #0
 800556c:	d1f7      	bne.n	800555e <_fwalk_reent+0xe>
 800556e:	4638      	mov	r0, r7
 8005570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005574:	89ab      	ldrh	r3, [r5, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d907      	bls.n	800558a <_fwalk_reent+0x3a>
 800557a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800557e:	3301      	adds	r3, #1
 8005580:	d003      	beq.n	800558a <_fwalk_reent+0x3a>
 8005582:	4629      	mov	r1, r5
 8005584:	4630      	mov	r0, r6
 8005586:	47c0      	blx	r8
 8005588:	4307      	orrs	r7, r0
 800558a:	3568      	adds	r5, #104	; 0x68
 800558c:	e7e9      	b.n	8005562 <_fwalk_reent+0x12>
	...

08005590 <_localeconv_r>:
 8005590:	4800      	ldr	r0, [pc, #0]	; (8005594 <_localeconv_r+0x4>)
 8005592:	4770      	bx	lr
 8005594:	20000160 	.word	0x20000160

08005598 <__retarget_lock_init_recursive>:
 8005598:	4770      	bx	lr

0800559a <__retarget_lock_acquire_recursive>:
 800559a:	4770      	bx	lr

0800559c <__retarget_lock_release_recursive>:
 800559c:	4770      	bx	lr
	...

080055a0 <malloc>:
 80055a0:	4b02      	ldr	r3, [pc, #8]	; (80055ac <malloc+0xc>)
 80055a2:	4601      	mov	r1, r0
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f000 bbfb 	b.w	8005da0 <_malloc_r>
 80055aa:	bf00      	nop
 80055ac:	2000000c 	.word	0x2000000c

080055b0 <memchr>:
 80055b0:	4603      	mov	r3, r0
 80055b2:	b510      	push	{r4, lr}
 80055b4:	b2c9      	uxtb	r1, r1
 80055b6:	4402      	add	r2, r0
 80055b8:	4293      	cmp	r3, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	d101      	bne.n	80055c2 <memchr+0x12>
 80055be:	2000      	movs	r0, #0
 80055c0:	e003      	b.n	80055ca <memchr+0x1a>
 80055c2:	7804      	ldrb	r4, [r0, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	428c      	cmp	r4, r1
 80055c8:	d1f6      	bne.n	80055b8 <memchr+0x8>
 80055ca:	bd10      	pop	{r4, pc}

080055cc <memcpy>:
 80055cc:	440a      	add	r2, r1
 80055ce:	4291      	cmp	r1, r2
 80055d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d4:	d100      	bne.n	80055d8 <memcpy+0xc>
 80055d6:	4770      	bx	lr
 80055d8:	b510      	push	{r4, lr}
 80055da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055de:	4291      	cmp	r1, r2
 80055e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e4:	d1f9      	bne.n	80055da <memcpy+0xe>
 80055e6:	bd10      	pop	{r4, pc}

080055e8 <_Balloc>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055ec:	4604      	mov	r4, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	b976      	cbnz	r6, 8005610 <_Balloc+0x28>
 80055f2:	2010      	movs	r0, #16
 80055f4:	f7ff ffd4 	bl	80055a0 <malloc>
 80055f8:	4602      	mov	r2, r0
 80055fa:	6260      	str	r0, [r4, #36]	; 0x24
 80055fc:	b920      	cbnz	r0, 8005608 <_Balloc+0x20>
 80055fe:	2166      	movs	r1, #102	; 0x66
 8005600:	4b17      	ldr	r3, [pc, #92]	; (8005660 <_Balloc+0x78>)
 8005602:	4818      	ldr	r0, [pc, #96]	; (8005664 <_Balloc+0x7c>)
 8005604:	f000 fea4 	bl	8006350 <__assert_func>
 8005608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800560c:	6006      	str	r6, [r0, #0]
 800560e:	60c6      	str	r6, [r0, #12]
 8005610:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005612:	68f3      	ldr	r3, [r6, #12]
 8005614:	b183      	cbz	r3, 8005638 <_Balloc+0x50>
 8005616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800561e:	b9b8      	cbnz	r0, 8005650 <_Balloc+0x68>
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f605 	lsl.w	r6, r1, r5
 8005626:	1d72      	adds	r2, r6, #5
 8005628:	4620      	mov	r0, r4
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	f000 fb5e 	bl	8005cec <_calloc_r>
 8005630:	b160      	cbz	r0, 800564c <_Balloc+0x64>
 8005632:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005636:	e00e      	b.n	8005656 <_Balloc+0x6e>
 8005638:	2221      	movs	r2, #33	; 0x21
 800563a:	2104      	movs	r1, #4
 800563c:	4620      	mov	r0, r4
 800563e:	f000 fb55 	bl	8005cec <_calloc_r>
 8005642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005644:	60f0      	str	r0, [r6, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e4      	bne.n	8005616 <_Balloc+0x2e>
 800564c:	2000      	movs	r0, #0
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	6802      	ldr	r2, [r0, #0]
 8005652:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005656:	2300      	movs	r3, #0
 8005658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800565c:	e7f7      	b.n	800564e <_Balloc+0x66>
 800565e:	bf00      	nop
 8005660:	08006859 	.word	0x08006859
 8005664:	08006940 	.word	0x08006940

08005668 <_Bfree>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800566c:	4605      	mov	r5, r0
 800566e:	460c      	mov	r4, r1
 8005670:	b976      	cbnz	r6, 8005690 <_Bfree+0x28>
 8005672:	2010      	movs	r0, #16
 8005674:	f7ff ff94 	bl	80055a0 <malloc>
 8005678:	4602      	mov	r2, r0
 800567a:	6268      	str	r0, [r5, #36]	; 0x24
 800567c:	b920      	cbnz	r0, 8005688 <_Bfree+0x20>
 800567e:	218a      	movs	r1, #138	; 0x8a
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <_Bfree+0x3c>)
 8005682:	4809      	ldr	r0, [pc, #36]	; (80056a8 <_Bfree+0x40>)
 8005684:	f000 fe64 	bl	8006350 <__assert_func>
 8005688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800568c:	6006      	str	r6, [r0, #0]
 800568e:	60c6      	str	r6, [r0, #12]
 8005690:	b13c      	cbz	r4, 80056a2 <_Bfree+0x3a>
 8005692:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005694:	6862      	ldr	r2, [r4, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800569c:	6021      	str	r1, [r4, #0]
 800569e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	08006859 	.word	0x08006859
 80056a8:	08006940 	.word	0x08006940

080056ac <__multadd>:
 80056ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b0:	4698      	mov	r8, r3
 80056b2:	460c      	mov	r4, r1
 80056b4:	2300      	movs	r3, #0
 80056b6:	690e      	ldr	r6, [r1, #16]
 80056b8:	4607      	mov	r7, r0
 80056ba:	f101 0014 	add.w	r0, r1, #20
 80056be:	6805      	ldr	r5, [r0, #0]
 80056c0:	3301      	adds	r3, #1
 80056c2:	b2a9      	uxth	r1, r5
 80056c4:	fb02 8101 	mla	r1, r2, r1, r8
 80056c8:	0c2d      	lsrs	r5, r5, #16
 80056ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80056ce:	fb02 c505 	mla	r5, r2, r5, ip
 80056d2:	b289      	uxth	r1, r1
 80056d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80056d8:	429e      	cmp	r6, r3
 80056da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80056de:	f840 1b04 	str.w	r1, [r0], #4
 80056e2:	dcec      	bgt.n	80056be <__multadd+0x12>
 80056e4:	f1b8 0f00 	cmp.w	r8, #0
 80056e8:	d022      	beq.n	8005730 <__multadd+0x84>
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	42b3      	cmp	r3, r6
 80056ee:	dc19      	bgt.n	8005724 <__multadd+0x78>
 80056f0:	6861      	ldr	r1, [r4, #4]
 80056f2:	4638      	mov	r0, r7
 80056f4:	3101      	adds	r1, #1
 80056f6:	f7ff ff77 	bl	80055e8 <_Balloc>
 80056fa:	4605      	mov	r5, r0
 80056fc:	b928      	cbnz	r0, 800570a <__multadd+0x5e>
 80056fe:	4602      	mov	r2, r0
 8005700:	21b5      	movs	r1, #181	; 0xb5
 8005702:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <__multadd+0x8c>)
 8005704:	480d      	ldr	r0, [pc, #52]	; (800573c <__multadd+0x90>)
 8005706:	f000 fe23 	bl	8006350 <__assert_func>
 800570a:	6922      	ldr	r2, [r4, #16]
 800570c:	f104 010c 	add.w	r1, r4, #12
 8005710:	3202      	adds	r2, #2
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	300c      	adds	r0, #12
 8005716:	f7ff ff59 	bl	80055cc <memcpy>
 800571a:	4621      	mov	r1, r4
 800571c:	4638      	mov	r0, r7
 800571e:	f7ff ffa3 	bl	8005668 <_Bfree>
 8005722:	462c      	mov	r4, r5
 8005724:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005728:	3601      	adds	r6, #1
 800572a:	f8c3 8014 	str.w	r8, [r3, #20]
 800572e:	6126      	str	r6, [r4, #16]
 8005730:	4620      	mov	r0, r4
 8005732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005736:	bf00      	nop
 8005738:	080068cf 	.word	0x080068cf
 800573c:	08006940 	.word	0x08006940

08005740 <__hi0bits>:
 8005740:	0c02      	lsrs	r2, r0, #16
 8005742:	0412      	lsls	r2, r2, #16
 8005744:	4603      	mov	r3, r0
 8005746:	b9ca      	cbnz	r2, 800577c <__hi0bits+0x3c>
 8005748:	0403      	lsls	r3, r0, #16
 800574a:	2010      	movs	r0, #16
 800574c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005750:	bf04      	itt	eq
 8005752:	021b      	lsleq	r3, r3, #8
 8005754:	3008      	addeq	r0, #8
 8005756:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800575a:	bf04      	itt	eq
 800575c:	011b      	lsleq	r3, r3, #4
 800575e:	3004      	addeq	r0, #4
 8005760:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005764:	bf04      	itt	eq
 8005766:	009b      	lsleq	r3, r3, #2
 8005768:	3002      	addeq	r0, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	db05      	blt.n	800577a <__hi0bits+0x3a>
 800576e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005772:	f100 0001 	add.w	r0, r0, #1
 8005776:	bf08      	it	eq
 8005778:	2020      	moveq	r0, #32
 800577a:	4770      	bx	lr
 800577c:	2000      	movs	r0, #0
 800577e:	e7e5      	b.n	800574c <__hi0bits+0xc>

08005780 <__lo0bits>:
 8005780:	6803      	ldr	r3, [r0, #0]
 8005782:	4602      	mov	r2, r0
 8005784:	f013 0007 	ands.w	r0, r3, #7
 8005788:	d00b      	beq.n	80057a2 <__lo0bits+0x22>
 800578a:	07d9      	lsls	r1, r3, #31
 800578c:	d422      	bmi.n	80057d4 <__lo0bits+0x54>
 800578e:	0798      	lsls	r0, r3, #30
 8005790:	bf49      	itett	mi
 8005792:	085b      	lsrmi	r3, r3, #1
 8005794:	089b      	lsrpl	r3, r3, #2
 8005796:	2001      	movmi	r0, #1
 8005798:	6013      	strmi	r3, [r2, #0]
 800579a:	bf5c      	itt	pl
 800579c:	2002      	movpl	r0, #2
 800579e:	6013      	strpl	r3, [r2, #0]
 80057a0:	4770      	bx	lr
 80057a2:	b299      	uxth	r1, r3
 80057a4:	b909      	cbnz	r1, 80057aa <__lo0bits+0x2a>
 80057a6:	2010      	movs	r0, #16
 80057a8:	0c1b      	lsrs	r3, r3, #16
 80057aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057ae:	bf04      	itt	eq
 80057b0:	0a1b      	lsreq	r3, r3, #8
 80057b2:	3008      	addeq	r0, #8
 80057b4:	0719      	lsls	r1, r3, #28
 80057b6:	bf04      	itt	eq
 80057b8:	091b      	lsreq	r3, r3, #4
 80057ba:	3004      	addeq	r0, #4
 80057bc:	0799      	lsls	r1, r3, #30
 80057be:	bf04      	itt	eq
 80057c0:	089b      	lsreq	r3, r3, #2
 80057c2:	3002      	addeq	r0, #2
 80057c4:	07d9      	lsls	r1, r3, #31
 80057c6:	d403      	bmi.n	80057d0 <__lo0bits+0x50>
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	f100 0001 	add.w	r0, r0, #1
 80057ce:	d003      	beq.n	80057d8 <__lo0bits+0x58>
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4770      	bx	lr
 80057d4:	2000      	movs	r0, #0
 80057d6:	4770      	bx	lr
 80057d8:	2020      	movs	r0, #32
 80057da:	4770      	bx	lr

080057dc <__i2b>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	460c      	mov	r4, r1
 80057e0:	2101      	movs	r1, #1
 80057e2:	f7ff ff01 	bl	80055e8 <_Balloc>
 80057e6:	4602      	mov	r2, r0
 80057e8:	b928      	cbnz	r0, 80057f6 <__i2b+0x1a>
 80057ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80057ee:	4b04      	ldr	r3, [pc, #16]	; (8005800 <__i2b+0x24>)
 80057f0:	4804      	ldr	r0, [pc, #16]	; (8005804 <__i2b+0x28>)
 80057f2:	f000 fdad 	bl	8006350 <__assert_func>
 80057f6:	2301      	movs	r3, #1
 80057f8:	6144      	str	r4, [r0, #20]
 80057fa:	6103      	str	r3, [r0, #16]
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	080068cf 	.word	0x080068cf
 8005804:	08006940 	.word	0x08006940

08005808 <__multiply>:
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	4614      	mov	r4, r2
 800580e:	690a      	ldr	r2, [r1, #16]
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	460d      	mov	r5, r1
 8005814:	429a      	cmp	r2, r3
 8005816:	bfbe      	ittt	lt
 8005818:	460b      	movlt	r3, r1
 800581a:	4625      	movlt	r5, r4
 800581c:	461c      	movlt	r4, r3
 800581e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005822:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005826:	68ab      	ldr	r3, [r5, #8]
 8005828:	6869      	ldr	r1, [r5, #4]
 800582a:	eb0a 0709 	add.w	r7, sl, r9
 800582e:	42bb      	cmp	r3, r7
 8005830:	b085      	sub	sp, #20
 8005832:	bfb8      	it	lt
 8005834:	3101      	addlt	r1, #1
 8005836:	f7ff fed7 	bl	80055e8 <_Balloc>
 800583a:	b930      	cbnz	r0, 800584a <__multiply+0x42>
 800583c:	4602      	mov	r2, r0
 800583e:	f240 115d 	movw	r1, #349	; 0x15d
 8005842:	4b41      	ldr	r3, [pc, #260]	; (8005948 <__multiply+0x140>)
 8005844:	4841      	ldr	r0, [pc, #260]	; (800594c <__multiply+0x144>)
 8005846:	f000 fd83 	bl	8006350 <__assert_func>
 800584a:	f100 0614 	add.w	r6, r0, #20
 800584e:	4633      	mov	r3, r6
 8005850:	2200      	movs	r2, #0
 8005852:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005856:	4543      	cmp	r3, r8
 8005858:	d31e      	bcc.n	8005898 <__multiply+0x90>
 800585a:	f105 0c14 	add.w	ip, r5, #20
 800585e:	f104 0314 	add.w	r3, r4, #20
 8005862:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005866:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800586a:	9202      	str	r2, [sp, #8]
 800586c:	ebac 0205 	sub.w	r2, ip, r5
 8005870:	3a15      	subs	r2, #21
 8005872:	f022 0203 	bic.w	r2, r2, #3
 8005876:	3204      	adds	r2, #4
 8005878:	f105 0115 	add.w	r1, r5, #21
 800587c:	458c      	cmp	ip, r1
 800587e:	bf38      	it	cc
 8005880:	2204      	movcc	r2, #4
 8005882:	9201      	str	r2, [sp, #4]
 8005884:	9a02      	ldr	r2, [sp, #8]
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	429a      	cmp	r2, r3
 800588a:	d808      	bhi.n	800589e <__multiply+0x96>
 800588c:	2f00      	cmp	r7, #0
 800588e:	dc55      	bgt.n	800593c <__multiply+0x134>
 8005890:	6107      	str	r7, [r0, #16]
 8005892:	b005      	add	sp, #20
 8005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005898:	f843 2b04 	str.w	r2, [r3], #4
 800589c:	e7db      	b.n	8005856 <__multiply+0x4e>
 800589e:	f8b3 a000 	ldrh.w	sl, [r3]
 80058a2:	f1ba 0f00 	cmp.w	sl, #0
 80058a6:	d020      	beq.n	80058ea <__multiply+0xe2>
 80058a8:	46b1      	mov	r9, r6
 80058aa:	2200      	movs	r2, #0
 80058ac:	f105 0e14 	add.w	lr, r5, #20
 80058b0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80058b4:	f8d9 b000 	ldr.w	fp, [r9]
 80058b8:	b2a1      	uxth	r1, r4
 80058ba:	fa1f fb8b 	uxth.w	fp, fp
 80058be:	fb0a b101 	mla	r1, sl, r1, fp
 80058c2:	4411      	add	r1, r2
 80058c4:	f8d9 2000 	ldr.w	r2, [r9]
 80058c8:	0c24      	lsrs	r4, r4, #16
 80058ca:	0c12      	lsrs	r2, r2, #16
 80058cc:	fb0a 2404 	mla	r4, sl, r4, r2
 80058d0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80058d4:	b289      	uxth	r1, r1
 80058d6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80058da:	45f4      	cmp	ip, lr
 80058dc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80058e0:	f849 1b04 	str.w	r1, [r9], #4
 80058e4:	d8e4      	bhi.n	80058b0 <__multiply+0xa8>
 80058e6:	9901      	ldr	r1, [sp, #4]
 80058e8:	5072      	str	r2, [r6, r1]
 80058ea:	9a03      	ldr	r2, [sp, #12]
 80058ec:	3304      	adds	r3, #4
 80058ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	d01f      	beq.n	8005938 <__multiply+0x130>
 80058f8:	46b6      	mov	lr, r6
 80058fa:	f04f 0a00 	mov.w	sl, #0
 80058fe:	6834      	ldr	r4, [r6, #0]
 8005900:	f105 0114 	add.w	r1, r5, #20
 8005904:	880a      	ldrh	r2, [r1, #0]
 8005906:	f8be b002 	ldrh.w	fp, [lr, #2]
 800590a:	b2a4      	uxth	r4, r4
 800590c:	fb09 b202 	mla	r2, r9, r2, fp
 8005910:	4492      	add	sl, r2
 8005912:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005916:	f84e 4b04 	str.w	r4, [lr], #4
 800591a:	f851 4b04 	ldr.w	r4, [r1], #4
 800591e:	f8be 2000 	ldrh.w	r2, [lr]
 8005922:	0c24      	lsrs	r4, r4, #16
 8005924:	fb09 2404 	mla	r4, r9, r4, r2
 8005928:	458c      	cmp	ip, r1
 800592a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800592e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005932:	d8e7      	bhi.n	8005904 <__multiply+0xfc>
 8005934:	9a01      	ldr	r2, [sp, #4]
 8005936:	50b4      	str	r4, [r6, r2]
 8005938:	3604      	adds	r6, #4
 800593a:	e7a3      	b.n	8005884 <__multiply+0x7c>
 800593c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1a5      	bne.n	8005890 <__multiply+0x88>
 8005944:	3f01      	subs	r7, #1
 8005946:	e7a1      	b.n	800588c <__multiply+0x84>
 8005948:	080068cf 	.word	0x080068cf
 800594c:	08006940 	.word	0x08006940

08005950 <__pow5mult>:
 8005950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005954:	4615      	mov	r5, r2
 8005956:	f012 0203 	ands.w	r2, r2, #3
 800595a:	4606      	mov	r6, r0
 800595c:	460f      	mov	r7, r1
 800595e:	d007      	beq.n	8005970 <__pow5mult+0x20>
 8005960:	4c25      	ldr	r4, [pc, #148]	; (80059f8 <__pow5mult+0xa8>)
 8005962:	3a01      	subs	r2, #1
 8005964:	2300      	movs	r3, #0
 8005966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800596a:	f7ff fe9f 	bl	80056ac <__multadd>
 800596e:	4607      	mov	r7, r0
 8005970:	10ad      	asrs	r5, r5, #2
 8005972:	d03d      	beq.n	80059f0 <__pow5mult+0xa0>
 8005974:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005976:	b97c      	cbnz	r4, 8005998 <__pow5mult+0x48>
 8005978:	2010      	movs	r0, #16
 800597a:	f7ff fe11 	bl	80055a0 <malloc>
 800597e:	4602      	mov	r2, r0
 8005980:	6270      	str	r0, [r6, #36]	; 0x24
 8005982:	b928      	cbnz	r0, 8005990 <__pow5mult+0x40>
 8005984:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005988:	4b1c      	ldr	r3, [pc, #112]	; (80059fc <__pow5mult+0xac>)
 800598a:	481d      	ldr	r0, [pc, #116]	; (8005a00 <__pow5mult+0xb0>)
 800598c:	f000 fce0 	bl	8006350 <__assert_func>
 8005990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005994:	6004      	str	r4, [r0, #0]
 8005996:	60c4      	str	r4, [r0, #12]
 8005998:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800599c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059a0:	b94c      	cbnz	r4, 80059b6 <__pow5mult+0x66>
 80059a2:	f240 2171 	movw	r1, #625	; 0x271
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ff18 	bl	80057dc <__i2b>
 80059ac:	2300      	movs	r3, #0
 80059ae:	4604      	mov	r4, r0
 80059b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80059b4:	6003      	str	r3, [r0, #0]
 80059b6:	f04f 0900 	mov.w	r9, #0
 80059ba:	07eb      	lsls	r3, r5, #31
 80059bc:	d50a      	bpl.n	80059d4 <__pow5mult+0x84>
 80059be:	4639      	mov	r1, r7
 80059c0:	4622      	mov	r2, r4
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff ff20 	bl	8005808 <__multiply>
 80059c8:	4680      	mov	r8, r0
 80059ca:	4639      	mov	r1, r7
 80059cc:	4630      	mov	r0, r6
 80059ce:	f7ff fe4b 	bl	8005668 <_Bfree>
 80059d2:	4647      	mov	r7, r8
 80059d4:	106d      	asrs	r5, r5, #1
 80059d6:	d00b      	beq.n	80059f0 <__pow5mult+0xa0>
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	b938      	cbnz	r0, 80059ec <__pow5mult+0x9c>
 80059dc:	4622      	mov	r2, r4
 80059de:	4621      	mov	r1, r4
 80059e0:	4630      	mov	r0, r6
 80059e2:	f7ff ff11 	bl	8005808 <__multiply>
 80059e6:	6020      	str	r0, [r4, #0]
 80059e8:	f8c0 9000 	str.w	r9, [r0]
 80059ec:	4604      	mov	r4, r0
 80059ee:	e7e4      	b.n	80059ba <__pow5mult+0x6a>
 80059f0:	4638      	mov	r0, r7
 80059f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f6:	bf00      	nop
 80059f8:	08006a90 	.word	0x08006a90
 80059fc:	08006859 	.word	0x08006859
 8005a00:	08006940 	.word	0x08006940

08005a04 <__lshift>:
 8005a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	460c      	mov	r4, r1
 8005a0a:	4607      	mov	r7, r0
 8005a0c:	4691      	mov	r9, r2
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	6849      	ldr	r1, [r1, #4]
 8005a12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a16:	68a3      	ldr	r3, [r4, #8]
 8005a18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a1c:	f108 0601 	add.w	r6, r8, #1
 8005a20:	42b3      	cmp	r3, r6
 8005a22:	db0b      	blt.n	8005a3c <__lshift+0x38>
 8005a24:	4638      	mov	r0, r7
 8005a26:	f7ff fddf 	bl	80055e8 <_Balloc>
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	b948      	cbnz	r0, 8005a42 <__lshift+0x3e>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <__lshift+0xd0>)
 8005a36:	4828      	ldr	r0, [pc, #160]	; (8005ad8 <__lshift+0xd4>)
 8005a38:	f000 fc8a 	bl	8006350 <__assert_func>
 8005a3c:	3101      	adds	r1, #1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	e7ee      	b.n	8005a20 <__lshift+0x1c>
 8005a42:	2300      	movs	r3, #0
 8005a44:	f100 0114 	add.w	r1, r0, #20
 8005a48:	f100 0210 	add.w	r2, r0, #16
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	4553      	cmp	r3, sl
 8005a50:	db33      	blt.n	8005aba <__lshift+0xb6>
 8005a52:	6920      	ldr	r0, [r4, #16]
 8005a54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a58:	f104 0314 	add.w	r3, r4, #20
 8005a5c:	f019 091f 	ands.w	r9, r9, #31
 8005a60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a68:	d02b      	beq.n	8005ac2 <__lshift+0xbe>
 8005a6a:	468a      	mov	sl, r1
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f1c9 0e20 	rsb	lr, r9, #32
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	fa00 f009 	lsl.w	r0, r0, r9
 8005a78:	4302      	orrs	r2, r0
 8005a7a:	f84a 2b04 	str.w	r2, [sl], #4
 8005a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a82:	459c      	cmp	ip, r3
 8005a84:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a88:	d8f3      	bhi.n	8005a72 <__lshift+0x6e>
 8005a8a:	ebac 0304 	sub.w	r3, ip, r4
 8005a8e:	3b15      	subs	r3, #21
 8005a90:	f023 0303 	bic.w	r3, r3, #3
 8005a94:	3304      	adds	r3, #4
 8005a96:	f104 0015 	add.w	r0, r4, #21
 8005a9a:	4584      	cmp	ip, r0
 8005a9c:	bf38      	it	cc
 8005a9e:	2304      	movcc	r3, #4
 8005aa0:	50ca      	str	r2, [r1, r3]
 8005aa2:	b10a      	cbz	r2, 8005aa8 <__lshift+0xa4>
 8005aa4:	f108 0602 	add.w	r6, r8, #2
 8005aa8:	3e01      	subs	r6, #1
 8005aaa:	4638      	mov	r0, r7
 8005aac:	4621      	mov	r1, r4
 8005aae:	612e      	str	r6, [r5, #16]
 8005ab0:	f7ff fdda 	bl	8005668 <_Bfree>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	f842 0f04 	str.w	r0, [r2, #4]!
 8005abe:	3301      	adds	r3, #1
 8005ac0:	e7c5      	b.n	8005a4e <__lshift+0x4a>
 8005ac2:	3904      	subs	r1, #4
 8005ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac8:	459c      	cmp	ip, r3
 8005aca:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ace:	d8f9      	bhi.n	8005ac4 <__lshift+0xc0>
 8005ad0:	e7ea      	b.n	8005aa8 <__lshift+0xa4>
 8005ad2:	bf00      	nop
 8005ad4:	080068cf 	.word	0x080068cf
 8005ad8:	08006940 	.word	0x08006940

08005adc <__mcmp>:
 8005adc:	4603      	mov	r3, r0
 8005ade:	690a      	ldr	r2, [r1, #16]
 8005ae0:	6900      	ldr	r0, [r0, #16]
 8005ae2:	b530      	push	{r4, r5, lr}
 8005ae4:	1a80      	subs	r0, r0, r2
 8005ae6:	d10d      	bne.n	8005b04 <__mcmp+0x28>
 8005ae8:	3314      	adds	r3, #20
 8005aea:	3114      	adds	r1, #20
 8005aec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005af0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005af4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005af8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005afc:	4295      	cmp	r5, r2
 8005afe:	d002      	beq.n	8005b06 <__mcmp+0x2a>
 8005b00:	d304      	bcc.n	8005b0c <__mcmp+0x30>
 8005b02:	2001      	movs	r0, #1
 8005b04:	bd30      	pop	{r4, r5, pc}
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	d3f4      	bcc.n	8005af4 <__mcmp+0x18>
 8005b0a:	e7fb      	b.n	8005b04 <__mcmp+0x28>
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b10:	e7f8      	b.n	8005b04 <__mcmp+0x28>
	...

08005b14 <__mdiff>:
 8005b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	460c      	mov	r4, r1
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4692      	mov	sl, r2
 8005b22:	f7ff ffdb 	bl	8005adc <__mcmp>
 8005b26:	1e05      	subs	r5, r0, #0
 8005b28:	d111      	bne.n	8005b4e <__mdiff+0x3a>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff fd5b 	bl	80055e8 <_Balloc>
 8005b32:	4602      	mov	r2, r0
 8005b34:	b928      	cbnz	r0, 8005b42 <__mdiff+0x2e>
 8005b36:	f240 2132 	movw	r1, #562	; 0x232
 8005b3a:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <__mdiff+0x118>)
 8005b3c:	483c      	ldr	r0, [pc, #240]	; (8005c30 <__mdiff+0x11c>)
 8005b3e:	f000 fc07 	bl	8006350 <__assert_func>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4e:	bfa4      	itt	ge
 8005b50:	4653      	movge	r3, sl
 8005b52:	46a2      	movge	sl, r4
 8005b54:	4630      	mov	r0, r6
 8005b56:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005b5a:	bfa6      	itte	ge
 8005b5c:	461c      	movge	r4, r3
 8005b5e:	2500      	movge	r5, #0
 8005b60:	2501      	movlt	r5, #1
 8005b62:	f7ff fd41 	bl	80055e8 <_Balloc>
 8005b66:	4602      	mov	r2, r0
 8005b68:	b918      	cbnz	r0, 8005b72 <__mdiff+0x5e>
 8005b6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b6e:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <__mdiff+0x118>)
 8005b70:	e7e4      	b.n	8005b3c <__mdiff+0x28>
 8005b72:	f100 0814 	add.w	r8, r0, #20
 8005b76:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005b7a:	60c5      	str	r5, [r0, #12]
 8005b7c:	f04f 0c00 	mov.w	ip, #0
 8005b80:	f10a 0514 	add.w	r5, sl, #20
 8005b84:	f10a 0010 	add.w	r0, sl, #16
 8005b88:	46c2      	mov	sl, r8
 8005b8a:	6926      	ldr	r6, [r4, #16]
 8005b8c:	f104 0914 	add.w	r9, r4, #20
 8005b90:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005b94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b98:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005b9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ba0:	fa1f f18b 	uxth.w	r1, fp
 8005ba4:	4461      	add	r1, ip
 8005ba6:	fa1f fc83 	uxth.w	ip, r3
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	eba1 010c 	sub.w	r1, r1, ip
 8005bb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005bb4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005bb8:	b289      	uxth	r1, r1
 8005bba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005bbe:	454e      	cmp	r6, r9
 8005bc0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005bc4:	f84a 3b04 	str.w	r3, [sl], #4
 8005bc8:	d8e6      	bhi.n	8005b98 <__mdiff+0x84>
 8005bca:	1b33      	subs	r3, r6, r4
 8005bcc:	3b15      	subs	r3, #21
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	3415      	adds	r4, #21
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	42a6      	cmp	r6, r4
 8005bd8:	bf38      	it	cc
 8005bda:	2304      	movcc	r3, #4
 8005bdc:	441d      	add	r5, r3
 8005bde:	4443      	add	r3, r8
 8005be0:	461e      	mov	r6, r3
 8005be2:	462c      	mov	r4, r5
 8005be4:	4574      	cmp	r4, lr
 8005be6:	d30e      	bcc.n	8005c06 <__mdiff+0xf2>
 8005be8:	f10e 0103 	add.w	r1, lr, #3
 8005bec:	1b49      	subs	r1, r1, r5
 8005bee:	f021 0103 	bic.w	r1, r1, #3
 8005bf2:	3d03      	subs	r5, #3
 8005bf4:	45ae      	cmp	lr, r5
 8005bf6:	bf38      	it	cc
 8005bf8:	2100      	movcc	r1, #0
 8005bfa:	4419      	add	r1, r3
 8005bfc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c00:	b18b      	cbz	r3, 8005c26 <__mdiff+0x112>
 8005c02:	6117      	str	r7, [r2, #16]
 8005c04:	e7a0      	b.n	8005b48 <__mdiff+0x34>
 8005c06:	f854 8b04 	ldr.w	r8, [r4], #4
 8005c0a:	fa1f f188 	uxth.w	r1, r8
 8005c0e:	4461      	add	r1, ip
 8005c10:	1408      	asrs	r0, r1, #16
 8005c12:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005c16:	b289      	uxth	r1, r1
 8005c18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005c1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c20:	f846 1b04 	str.w	r1, [r6], #4
 8005c24:	e7de      	b.n	8005be4 <__mdiff+0xd0>
 8005c26:	3f01      	subs	r7, #1
 8005c28:	e7e8      	b.n	8005bfc <__mdiff+0xe8>
 8005c2a:	bf00      	nop
 8005c2c:	080068cf 	.word	0x080068cf
 8005c30:	08006940 	.word	0x08006940

08005c34 <__d2b>:
 8005c34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c38:	2101      	movs	r1, #1
 8005c3a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005c3e:	4690      	mov	r8, r2
 8005c40:	461d      	mov	r5, r3
 8005c42:	f7ff fcd1 	bl	80055e8 <_Balloc>
 8005c46:	4604      	mov	r4, r0
 8005c48:	b930      	cbnz	r0, 8005c58 <__d2b+0x24>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f240 310a 	movw	r1, #778	; 0x30a
 8005c50:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <__d2b+0xb0>)
 8005c52:	4825      	ldr	r0, [pc, #148]	; (8005ce8 <__d2b+0xb4>)
 8005c54:	f000 fb7c 	bl	8006350 <__assert_func>
 8005c58:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005c5c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005c60:	bb2d      	cbnz	r5, 8005cae <__d2b+0x7a>
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	f1b8 0300 	subs.w	r3, r8, #0
 8005c68:	d026      	beq.n	8005cb8 <__d2b+0x84>
 8005c6a:	4668      	mov	r0, sp
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	f7ff fd87 	bl	8005780 <__lo0bits>
 8005c72:	9900      	ldr	r1, [sp, #0]
 8005c74:	b1f0      	cbz	r0, 8005cb4 <__d2b+0x80>
 8005c76:	9a01      	ldr	r2, [sp, #4]
 8005c78:	f1c0 0320 	rsb	r3, r0, #32
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	430b      	orrs	r3, r1
 8005c82:	40c2      	lsrs	r2, r0
 8005c84:	6163      	str	r3, [r4, #20]
 8005c86:	9201      	str	r2, [sp, #4]
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2102      	movne	r1, #2
 8005c90:	2101      	moveq	r1, #1
 8005c92:	61a3      	str	r3, [r4, #24]
 8005c94:	6121      	str	r1, [r4, #16]
 8005c96:	b1c5      	cbz	r5, 8005cca <__d2b+0x96>
 8005c98:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c9c:	4405      	add	r5, r0
 8005c9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ca2:	603d      	str	r5, [r7, #0]
 8005ca4:	6030      	str	r0, [r6, #0]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	b002      	add	sp, #8
 8005caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb2:	e7d6      	b.n	8005c62 <__d2b+0x2e>
 8005cb4:	6161      	str	r1, [r4, #20]
 8005cb6:	e7e7      	b.n	8005c88 <__d2b+0x54>
 8005cb8:	a801      	add	r0, sp, #4
 8005cba:	f7ff fd61 	bl	8005780 <__lo0bits>
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	6121      	str	r1, [r4, #16]
 8005cc4:	6163      	str	r3, [r4, #20]
 8005cc6:	3020      	adds	r0, #32
 8005cc8:	e7e5      	b.n	8005c96 <__d2b+0x62>
 8005cca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005cce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cd2:	6038      	str	r0, [r7, #0]
 8005cd4:	6918      	ldr	r0, [r3, #16]
 8005cd6:	f7ff fd33 	bl	8005740 <__hi0bits>
 8005cda:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005cde:	6031      	str	r1, [r6, #0]
 8005ce0:	e7e1      	b.n	8005ca6 <__d2b+0x72>
 8005ce2:	bf00      	nop
 8005ce4:	080068cf 	.word	0x080068cf
 8005ce8:	08006940 	.word	0x08006940

08005cec <_calloc_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	fb02 f501 	mul.w	r5, r2, r1
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	f000 f854 	bl	8005da0 <_malloc_r>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	b118      	cbz	r0, 8005d04 <_calloc_r+0x18>
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	2100      	movs	r1, #0
 8005d00:	f7fe f854 	bl	8003dac <memset>
 8005d04:	4620      	mov	r0, r4
 8005d06:	bd38      	pop	{r3, r4, r5, pc}

08005d08 <_free_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d043      	beq.n	8005d98 <_free_r+0x90>
 8005d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d14:	1f0c      	subs	r4, r1, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfb8      	it	lt
 8005d1a:	18e4      	addlt	r4, r4, r3
 8005d1c:	f000 fca2 	bl	8006664 <__malloc_lock>
 8005d20:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <_free_r+0x94>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	4610      	mov	r0, r2
 8005d26:	b933      	cbnz	r3, 8005d36 <_free_r+0x2e>
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6014      	str	r4, [r2, #0]
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d32:	f000 bc9d 	b.w	8006670 <__malloc_unlock>
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	d90a      	bls.n	8005d50 <_free_r+0x48>
 8005d3a:	6821      	ldr	r1, [r4, #0]
 8005d3c:	1862      	adds	r2, r4, r1
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	bf01      	itttt	eq
 8005d42:	681a      	ldreq	r2, [r3, #0]
 8005d44:	685b      	ldreq	r3, [r3, #4]
 8005d46:	1852      	addeq	r2, r2, r1
 8005d48:	6022      	streq	r2, [r4, #0]
 8005d4a:	6063      	str	r3, [r4, #4]
 8005d4c:	6004      	str	r4, [r0, #0]
 8005d4e:	e7ed      	b.n	8005d2c <_free_r+0x24>
 8005d50:	461a      	mov	r2, r3
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	b10b      	cbz	r3, 8005d5a <_free_r+0x52>
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	d9fa      	bls.n	8005d50 <_free_r+0x48>
 8005d5a:	6811      	ldr	r1, [r2, #0]
 8005d5c:	1850      	adds	r0, r2, r1
 8005d5e:	42a0      	cmp	r0, r4
 8005d60:	d10b      	bne.n	8005d7a <_free_r+0x72>
 8005d62:	6820      	ldr	r0, [r4, #0]
 8005d64:	4401      	add	r1, r0
 8005d66:	1850      	adds	r0, r2, r1
 8005d68:	4283      	cmp	r3, r0
 8005d6a:	6011      	str	r1, [r2, #0]
 8005d6c:	d1de      	bne.n	8005d2c <_free_r+0x24>
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4401      	add	r1, r0
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	6053      	str	r3, [r2, #4]
 8005d78:	e7d8      	b.n	8005d2c <_free_r+0x24>
 8005d7a:	d902      	bls.n	8005d82 <_free_r+0x7a>
 8005d7c:	230c      	movs	r3, #12
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	e7d4      	b.n	8005d2c <_free_r+0x24>
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	1821      	adds	r1, r4, r0
 8005d86:	428b      	cmp	r3, r1
 8005d88:	bf01      	itttt	eq
 8005d8a:	6819      	ldreq	r1, [r3, #0]
 8005d8c:	685b      	ldreq	r3, [r3, #4]
 8005d8e:	1809      	addeq	r1, r1, r0
 8005d90:	6021      	streq	r1, [r4, #0]
 8005d92:	6063      	str	r3, [r4, #4]
 8005d94:	6054      	str	r4, [r2, #4]
 8005d96:	e7c9      	b.n	8005d2c <_free_r+0x24>
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000208 	.word	0x20000208

08005da0 <_malloc_r>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	1ccd      	adds	r5, r1, #3
 8005da4:	f025 0503 	bic.w	r5, r5, #3
 8005da8:	3508      	adds	r5, #8
 8005daa:	2d0c      	cmp	r5, #12
 8005dac:	bf38      	it	cc
 8005dae:	250c      	movcc	r5, #12
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	4606      	mov	r6, r0
 8005db4:	db01      	blt.n	8005dba <_malloc_r+0x1a>
 8005db6:	42a9      	cmp	r1, r5
 8005db8:	d903      	bls.n	8005dc2 <_malloc_r+0x22>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc2:	f000 fc4f 	bl	8006664 <__malloc_lock>
 8005dc6:	4921      	ldr	r1, [pc, #132]	; (8005e4c <_malloc_r+0xac>)
 8005dc8:	680a      	ldr	r2, [r1, #0]
 8005dca:	4614      	mov	r4, r2
 8005dcc:	b99c      	cbnz	r4, 8005df6 <_malloc_r+0x56>
 8005dce:	4f20      	ldr	r7, [pc, #128]	; (8005e50 <_malloc_r+0xb0>)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	b923      	cbnz	r3, 8005dde <_malloc_r+0x3e>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f000 f994 	bl	8006104 <_sbrk_r>
 8005ddc:	6038      	str	r0, [r7, #0]
 8005dde:	4629      	mov	r1, r5
 8005de0:	4630      	mov	r0, r6
 8005de2:	f000 f98f 	bl	8006104 <_sbrk_r>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d123      	bne.n	8005e32 <_malloc_r+0x92>
 8005dea:	230c      	movs	r3, #12
 8005dec:	4630      	mov	r0, r6
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	f000 fc3e 	bl	8006670 <__malloc_unlock>
 8005df4:	e7e3      	b.n	8005dbe <_malloc_r+0x1e>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	1b5b      	subs	r3, r3, r5
 8005dfa:	d417      	bmi.n	8005e2c <_malloc_r+0x8c>
 8005dfc:	2b0b      	cmp	r3, #11
 8005dfe:	d903      	bls.n	8005e08 <_malloc_r+0x68>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	441c      	add	r4, r3
 8005e04:	6025      	str	r5, [r4, #0]
 8005e06:	e004      	b.n	8005e12 <_malloc_r+0x72>
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	42a2      	cmp	r2, r4
 8005e0c:	bf0c      	ite	eq
 8005e0e:	600b      	streq	r3, [r1, #0]
 8005e10:	6053      	strne	r3, [r2, #4]
 8005e12:	4630      	mov	r0, r6
 8005e14:	f000 fc2c 	bl	8006670 <__malloc_unlock>
 8005e18:	f104 000b 	add.w	r0, r4, #11
 8005e1c:	1d23      	adds	r3, r4, #4
 8005e1e:	f020 0007 	bic.w	r0, r0, #7
 8005e22:	1ac2      	subs	r2, r0, r3
 8005e24:	d0cc      	beq.n	8005dc0 <_malloc_r+0x20>
 8005e26:	1a1b      	subs	r3, r3, r0
 8005e28:	50a3      	str	r3, [r4, r2]
 8005e2a:	e7c9      	b.n	8005dc0 <_malloc_r+0x20>
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	6864      	ldr	r4, [r4, #4]
 8005e30:	e7cc      	b.n	8005dcc <_malloc_r+0x2c>
 8005e32:	1cc4      	adds	r4, r0, #3
 8005e34:	f024 0403 	bic.w	r4, r4, #3
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d0e3      	beq.n	8005e04 <_malloc_r+0x64>
 8005e3c:	1a21      	subs	r1, r4, r0
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f000 f960 	bl	8006104 <_sbrk_r>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d1dd      	bne.n	8005e04 <_malloc_r+0x64>
 8005e48:	e7cf      	b.n	8005dea <_malloc_r+0x4a>
 8005e4a:	bf00      	nop
 8005e4c:	20000208 	.word	0x20000208
 8005e50:	2000020c 	.word	0x2000020c

08005e54 <__sfputc_r>:
 8005e54:	6893      	ldr	r3, [r2, #8]
 8005e56:	b410      	push	{r4}
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	6093      	str	r3, [r2, #8]
 8005e5e:	da07      	bge.n	8005e70 <__sfputc_r+0x1c>
 8005e60:	6994      	ldr	r4, [r2, #24]
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	db01      	blt.n	8005e6a <__sfputc_r+0x16>
 8005e66:	290a      	cmp	r1, #10
 8005e68:	d102      	bne.n	8005e70 <__sfputc_r+0x1c>
 8005e6a:	bc10      	pop	{r4}
 8005e6c:	f000 b99e 	b.w	80061ac <__swbuf_r>
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	1c58      	adds	r0, r3, #1
 8005e74:	6010      	str	r0, [r2, #0]
 8005e76:	7019      	strb	r1, [r3, #0]
 8005e78:	4608      	mov	r0, r1
 8005e7a:	bc10      	pop	{r4}
 8005e7c:	4770      	bx	lr

08005e7e <__sfputs_r>:
 8005e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e80:	4606      	mov	r6, r0
 8005e82:	460f      	mov	r7, r1
 8005e84:	4614      	mov	r4, r2
 8005e86:	18d5      	adds	r5, r2, r3
 8005e88:	42ac      	cmp	r4, r5
 8005e8a:	d101      	bne.n	8005e90 <__sfputs_r+0x12>
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e007      	b.n	8005ea0 <__sfputs_r+0x22>
 8005e90:	463a      	mov	r2, r7
 8005e92:	4630      	mov	r0, r6
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	f7ff ffdc 	bl	8005e54 <__sfputc_r>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d1f3      	bne.n	8005e88 <__sfputs_r+0xa>
 8005ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea4 <_vfiprintf_r>:
 8005ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	460d      	mov	r5, r1
 8005eaa:	4614      	mov	r4, r2
 8005eac:	4698      	mov	r8, r3
 8005eae:	4606      	mov	r6, r0
 8005eb0:	b09d      	sub	sp, #116	; 0x74
 8005eb2:	b118      	cbz	r0, 8005ebc <_vfiprintf_r+0x18>
 8005eb4:	6983      	ldr	r3, [r0, #24]
 8005eb6:	b90b      	cbnz	r3, 8005ebc <_vfiprintf_r+0x18>
 8005eb8:	f7ff facc 	bl	8005454 <__sinit>
 8005ebc:	4b89      	ldr	r3, [pc, #548]	; (80060e4 <_vfiprintf_r+0x240>)
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	d11b      	bne.n	8005efa <_vfiprintf_r+0x56>
 8005ec2:	6875      	ldr	r5, [r6, #4]
 8005ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ec6:	07d9      	lsls	r1, r3, #31
 8005ec8:	d405      	bmi.n	8005ed6 <_vfiprintf_r+0x32>
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	059a      	lsls	r2, r3, #22
 8005ece:	d402      	bmi.n	8005ed6 <_vfiprintf_r+0x32>
 8005ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed2:	f7ff fb62 	bl	800559a <__retarget_lock_acquire_recursive>
 8005ed6:	89ab      	ldrh	r3, [r5, #12]
 8005ed8:	071b      	lsls	r3, r3, #28
 8005eda:	d501      	bpl.n	8005ee0 <_vfiprintf_r+0x3c>
 8005edc:	692b      	ldr	r3, [r5, #16]
 8005ede:	b9eb      	cbnz	r3, 8005f1c <_vfiprintf_r+0x78>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f9c6 	bl	8006274 <__swsetup_r>
 8005ee8:	b1c0      	cbz	r0, 8005f1c <_vfiprintf_r+0x78>
 8005eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eec:	07dc      	lsls	r4, r3, #31
 8005eee:	d50e      	bpl.n	8005f0e <_vfiprintf_r+0x6a>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	b01d      	add	sp, #116	; 0x74
 8005ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efa:	4b7b      	ldr	r3, [pc, #492]	; (80060e8 <_vfiprintf_r+0x244>)
 8005efc:	429d      	cmp	r5, r3
 8005efe:	d101      	bne.n	8005f04 <_vfiprintf_r+0x60>
 8005f00:	68b5      	ldr	r5, [r6, #8]
 8005f02:	e7df      	b.n	8005ec4 <_vfiprintf_r+0x20>
 8005f04:	4b79      	ldr	r3, [pc, #484]	; (80060ec <_vfiprintf_r+0x248>)
 8005f06:	429d      	cmp	r5, r3
 8005f08:	bf08      	it	eq
 8005f0a:	68f5      	ldreq	r5, [r6, #12]
 8005f0c:	e7da      	b.n	8005ec4 <_vfiprintf_r+0x20>
 8005f0e:	89ab      	ldrh	r3, [r5, #12]
 8005f10:	0598      	lsls	r0, r3, #22
 8005f12:	d4ed      	bmi.n	8005ef0 <_vfiprintf_r+0x4c>
 8005f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f16:	f7ff fb41 	bl	800559c <__retarget_lock_release_recursive>
 8005f1a:	e7e9      	b.n	8005ef0 <_vfiprintf_r+0x4c>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f20:	2320      	movs	r3, #32
 8005f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f26:	2330      	movs	r3, #48	; 0x30
 8005f28:	f04f 0901 	mov.w	r9, #1
 8005f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f30:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80060f0 <_vfiprintf_r+0x24c>
 8005f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f38:	4623      	mov	r3, r4
 8005f3a:	469a      	mov	sl, r3
 8005f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f40:	b10a      	cbz	r2, 8005f46 <_vfiprintf_r+0xa2>
 8005f42:	2a25      	cmp	r2, #37	; 0x25
 8005f44:	d1f9      	bne.n	8005f3a <_vfiprintf_r+0x96>
 8005f46:	ebba 0b04 	subs.w	fp, sl, r4
 8005f4a:	d00b      	beq.n	8005f64 <_vfiprintf_r+0xc0>
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7ff ff93 	bl	8005e7e <__sfputs_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f000 80aa 	beq.w	80060b2 <_vfiprintf_r+0x20e>
 8005f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f60:	445a      	add	r2, fp
 8005f62:	9209      	str	r2, [sp, #36]	; 0x24
 8005f64:	f89a 3000 	ldrb.w	r3, [sl]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80a2 	beq.w	80060b2 <_vfiprintf_r+0x20e>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f78:	f10a 0a01 	add.w	sl, sl, #1
 8005f7c:	9304      	str	r3, [sp, #16]
 8005f7e:	9307      	str	r3, [sp, #28]
 8005f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f84:	931a      	str	r3, [sp, #104]	; 0x68
 8005f86:	4654      	mov	r4, sl
 8005f88:	2205      	movs	r2, #5
 8005f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8e:	4858      	ldr	r0, [pc, #352]	; (80060f0 <_vfiprintf_r+0x24c>)
 8005f90:	f7ff fb0e 	bl	80055b0 <memchr>
 8005f94:	9a04      	ldr	r2, [sp, #16]
 8005f96:	b9d8      	cbnz	r0, 8005fd0 <_vfiprintf_r+0x12c>
 8005f98:	06d1      	lsls	r1, r2, #27
 8005f9a:	bf44      	itt	mi
 8005f9c:	2320      	movmi	r3, #32
 8005f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa2:	0713      	lsls	r3, r2, #28
 8005fa4:	bf44      	itt	mi
 8005fa6:	232b      	movmi	r3, #43	; 0x2b
 8005fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fac:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb2:	d015      	beq.n	8005fe0 <_vfiprintf_r+0x13c>
 8005fb4:	4654      	mov	r4, sl
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f04f 0c0a 	mov.w	ip, #10
 8005fbc:	9a07      	ldr	r2, [sp, #28]
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc4:	3b30      	subs	r3, #48	; 0x30
 8005fc6:	2b09      	cmp	r3, #9
 8005fc8:	d94e      	bls.n	8006068 <_vfiprintf_r+0x1c4>
 8005fca:	b1b0      	cbz	r0, 8005ffa <_vfiprintf_r+0x156>
 8005fcc:	9207      	str	r2, [sp, #28]
 8005fce:	e014      	b.n	8005ffa <_vfiprintf_r+0x156>
 8005fd0:	eba0 0308 	sub.w	r3, r0, r8
 8005fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	46a2      	mov	sl, r4
 8005fdc:	9304      	str	r3, [sp, #16]
 8005fde:	e7d2      	b.n	8005f86 <_vfiprintf_r+0xe2>
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	1d19      	adds	r1, r3, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	9103      	str	r1, [sp, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bfbb      	ittet	lt
 8005fec:	425b      	neglt	r3, r3
 8005fee:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff2:	9307      	strge	r3, [sp, #28]
 8005ff4:	9307      	strlt	r3, [sp, #28]
 8005ff6:	bfb8      	it	lt
 8005ff8:	9204      	strlt	r2, [sp, #16]
 8005ffa:	7823      	ldrb	r3, [r4, #0]
 8005ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ffe:	d10c      	bne.n	800601a <_vfiprintf_r+0x176>
 8006000:	7863      	ldrb	r3, [r4, #1]
 8006002:	2b2a      	cmp	r3, #42	; 0x2a
 8006004:	d135      	bne.n	8006072 <_vfiprintf_r+0x1ce>
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	3402      	adds	r4, #2
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	9203      	str	r2, [sp, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	bfb8      	it	lt
 8006014:	f04f 33ff 	movlt.w	r3, #4294967295
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006100 <_vfiprintf_r+0x25c>
 800601e:	2203      	movs	r2, #3
 8006020:	4650      	mov	r0, sl
 8006022:	7821      	ldrb	r1, [r4, #0]
 8006024:	f7ff fac4 	bl	80055b0 <memchr>
 8006028:	b140      	cbz	r0, 800603c <_vfiprintf_r+0x198>
 800602a:	2340      	movs	r3, #64	; 0x40
 800602c:	eba0 000a 	sub.w	r0, r0, sl
 8006030:	fa03 f000 	lsl.w	r0, r3, r0
 8006034:	9b04      	ldr	r3, [sp, #16]
 8006036:	3401      	adds	r4, #1
 8006038:	4303      	orrs	r3, r0
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006040:	2206      	movs	r2, #6
 8006042:	482c      	ldr	r0, [pc, #176]	; (80060f4 <_vfiprintf_r+0x250>)
 8006044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006048:	f7ff fab2 	bl	80055b0 <memchr>
 800604c:	2800      	cmp	r0, #0
 800604e:	d03f      	beq.n	80060d0 <_vfiprintf_r+0x22c>
 8006050:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <_vfiprintf_r+0x254>)
 8006052:	bb1b      	cbnz	r3, 800609c <_vfiprintf_r+0x1f8>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	3307      	adds	r3, #7
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	3308      	adds	r3, #8
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006062:	443b      	add	r3, r7
 8006064:	9309      	str	r3, [sp, #36]	; 0x24
 8006066:	e767      	b.n	8005f38 <_vfiprintf_r+0x94>
 8006068:	460c      	mov	r4, r1
 800606a:	2001      	movs	r0, #1
 800606c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006070:	e7a5      	b.n	8005fbe <_vfiprintf_r+0x11a>
 8006072:	2300      	movs	r3, #0
 8006074:	f04f 0c0a 	mov.w	ip, #10
 8006078:	4619      	mov	r1, r3
 800607a:	3401      	adds	r4, #1
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	4620      	mov	r0, r4
 8006080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006084:	3a30      	subs	r2, #48	; 0x30
 8006086:	2a09      	cmp	r2, #9
 8006088:	d903      	bls.n	8006092 <_vfiprintf_r+0x1ee>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0c5      	beq.n	800601a <_vfiprintf_r+0x176>
 800608e:	9105      	str	r1, [sp, #20]
 8006090:	e7c3      	b.n	800601a <_vfiprintf_r+0x176>
 8006092:	4604      	mov	r4, r0
 8006094:	2301      	movs	r3, #1
 8006096:	fb0c 2101 	mla	r1, ip, r1, r2
 800609a:	e7f0      	b.n	800607e <_vfiprintf_r+0x1da>
 800609c:	ab03      	add	r3, sp, #12
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	462a      	mov	r2, r5
 80060a2:	4630      	mov	r0, r6
 80060a4:	4b15      	ldr	r3, [pc, #84]	; (80060fc <_vfiprintf_r+0x258>)
 80060a6:	a904      	add	r1, sp, #16
 80060a8:	f7fd ff26 	bl	8003ef8 <_printf_float>
 80060ac:	4607      	mov	r7, r0
 80060ae:	1c78      	adds	r0, r7, #1
 80060b0:	d1d6      	bne.n	8006060 <_vfiprintf_r+0x1bc>
 80060b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b4:	07d9      	lsls	r1, r3, #31
 80060b6:	d405      	bmi.n	80060c4 <_vfiprintf_r+0x220>
 80060b8:	89ab      	ldrh	r3, [r5, #12]
 80060ba:	059a      	lsls	r2, r3, #22
 80060bc:	d402      	bmi.n	80060c4 <_vfiprintf_r+0x220>
 80060be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060c0:	f7ff fa6c 	bl	800559c <__retarget_lock_release_recursive>
 80060c4:	89ab      	ldrh	r3, [r5, #12]
 80060c6:	065b      	lsls	r3, r3, #25
 80060c8:	f53f af12 	bmi.w	8005ef0 <_vfiprintf_r+0x4c>
 80060cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ce:	e711      	b.n	8005ef4 <_vfiprintf_r+0x50>
 80060d0:	ab03      	add	r3, sp, #12
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	462a      	mov	r2, r5
 80060d6:	4630      	mov	r0, r6
 80060d8:	4b08      	ldr	r3, [pc, #32]	; (80060fc <_vfiprintf_r+0x258>)
 80060da:	a904      	add	r1, sp, #16
 80060dc:	f7fe f9a8 	bl	8004430 <_printf_i>
 80060e0:	e7e4      	b.n	80060ac <_vfiprintf_r+0x208>
 80060e2:	bf00      	nop
 80060e4:	08006900 	.word	0x08006900
 80060e8:	08006920 	.word	0x08006920
 80060ec:	080068e0 	.word	0x080068e0
 80060f0:	08006a9c 	.word	0x08006a9c
 80060f4:	08006aa6 	.word	0x08006aa6
 80060f8:	08003ef9 	.word	0x08003ef9
 80060fc:	08005e7f 	.word	0x08005e7f
 8006100:	08006aa2 	.word	0x08006aa2

08006104 <_sbrk_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	2300      	movs	r3, #0
 8006108:	4d05      	ldr	r5, [pc, #20]	; (8006120 <_sbrk_r+0x1c>)
 800610a:	4604      	mov	r4, r0
 800610c:	4608      	mov	r0, r1
 800610e:	602b      	str	r3, [r5, #0]
 8006110:	f7fb fa42 	bl	8001598 <_sbrk>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_sbrk_r+0x1a>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_sbrk_r+0x1a>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	20000364 	.word	0x20000364

08006124 <__sread>:
 8006124:	b510      	push	{r4, lr}
 8006126:	460c      	mov	r4, r1
 8006128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612c:	f000 faa6 	bl	800667c <_read_r>
 8006130:	2800      	cmp	r0, #0
 8006132:	bfab      	itete	ge
 8006134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006136:	89a3      	ldrhlt	r3, [r4, #12]
 8006138:	181b      	addge	r3, r3, r0
 800613a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800613e:	bfac      	ite	ge
 8006140:	6563      	strge	r3, [r4, #84]	; 0x54
 8006142:	81a3      	strhlt	r3, [r4, #12]
 8006144:	bd10      	pop	{r4, pc}

08006146 <__swrite>:
 8006146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	461f      	mov	r7, r3
 800614c:	898b      	ldrh	r3, [r1, #12]
 800614e:	4605      	mov	r5, r0
 8006150:	05db      	lsls	r3, r3, #23
 8006152:	460c      	mov	r4, r1
 8006154:	4616      	mov	r6, r2
 8006156:	d505      	bpl.n	8006164 <__swrite+0x1e>
 8006158:	2302      	movs	r3, #2
 800615a:	2200      	movs	r2, #0
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	f000 f9f8 	bl	8006554 <_lseek_r>
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	4632      	mov	r2, r6
 8006168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	4628      	mov	r0, r5
 8006170:	463b      	mov	r3, r7
 8006172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800617a:	f000 b869 	b.w	8006250 <_write_r>

0800617e <__sseek>:
 800617e:	b510      	push	{r4, lr}
 8006180:	460c      	mov	r4, r1
 8006182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006186:	f000 f9e5 	bl	8006554 <_lseek_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	bf15      	itete	ne
 8006190:	6560      	strne	r0, [r4, #84]	; 0x54
 8006192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800619a:	81a3      	strheq	r3, [r4, #12]
 800619c:	bf18      	it	ne
 800619e:	81a3      	strhne	r3, [r4, #12]
 80061a0:	bd10      	pop	{r4, pc}

080061a2 <__sclose>:
 80061a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a6:	f000 b8f1 	b.w	800638c <_close_r>
	...

080061ac <__swbuf_r>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	460e      	mov	r6, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	4605      	mov	r5, r0
 80061b4:	b118      	cbz	r0, 80061be <__swbuf_r+0x12>
 80061b6:	6983      	ldr	r3, [r0, #24]
 80061b8:	b90b      	cbnz	r3, 80061be <__swbuf_r+0x12>
 80061ba:	f7ff f94b 	bl	8005454 <__sinit>
 80061be:	4b21      	ldr	r3, [pc, #132]	; (8006244 <__swbuf_r+0x98>)
 80061c0:	429c      	cmp	r4, r3
 80061c2:	d12b      	bne.n	800621c <__swbuf_r+0x70>
 80061c4:	686c      	ldr	r4, [r5, #4]
 80061c6:	69a3      	ldr	r3, [r4, #24]
 80061c8:	60a3      	str	r3, [r4, #8]
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	071a      	lsls	r2, r3, #28
 80061ce:	d52f      	bpl.n	8006230 <__swbuf_r+0x84>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	b36b      	cbz	r3, 8006230 <__swbuf_r+0x84>
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	b2f6      	uxtb	r6, r6
 80061da:	1ac0      	subs	r0, r0, r3
 80061dc:	6963      	ldr	r3, [r4, #20]
 80061de:	4637      	mov	r7, r6
 80061e0:	4283      	cmp	r3, r0
 80061e2:	dc04      	bgt.n	80061ee <__swbuf_r+0x42>
 80061e4:	4621      	mov	r1, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 f966 	bl	80064b8 <_fflush_r>
 80061ec:	bb30      	cbnz	r0, 800623c <__swbuf_r+0x90>
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	3001      	adds	r0, #1
 80061f2:	3b01      	subs	r3, #1
 80061f4:	60a3      	str	r3, [r4, #8]
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	6022      	str	r2, [r4, #0]
 80061fc:	701e      	strb	r6, [r3, #0]
 80061fe:	6963      	ldr	r3, [r4, #20]
 8006200:	4283      	cmp	r3, r0
 8006202:	d004      	beq.n	800620e <__swbuf_r+0x62>
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	07db      	lsls	r3, r3, #31
 8006208:	d506      	bpl.n	8006218 <__swbuf_r+0x6c>
 800620a:	2e0a      	cmp	r6, #10
 800620c:	d104      	bne.n	8006218 <__swbuf_r+0x6c>
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 f951 	bl	80064b8 <_fflush_r>
 8006216:	b988      	cbnz	r0, 800623c <__swbuf_r+0x90>
 8006218:	4638      	mov	r0, r7
 800621a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <__swbuf_r+0x9c>)
 800621e:	429c      	cmp	r4, r3
 8006220:	d101      	bne.n	8006226 <__swbuf_r+0x7a>
 8006222:	68ac      	ldr	r4, [r5, #8]
 8006224:	e7cf      	b.n	80061c6 <__swbuf_r+0x1a>
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <__swbuf_r+0xa0>)
 8006228:	429c      	cmp	r4, r3
 800622a:	bf08      	it	eq
 800622c:	68ec      	ldreq	r4, [r5, #12]
 800622e:	e7ca      	b.n	80061c6 <__swbuf_r+0x1a>
 8006230:	4621      	mov	r1, r4
 8006232:	4628      	mov	r0, r5
 8006234:	f000 f81e 	bl	8006274 <__swsetup_r>
 8006238:	2800      	cmp	r0, #0
 800623a:	d0cb      	beq.n	80061d4 <__swbuf_r+0x28>
 800623c:	f04f 37ff 	mov.w	r7, #4294967295
 8006240:	e7ea      	b.n	8006218 <__swbuf_r+0x6c>
 8006242:	bf00      	nop
 8006244:	08006900 	.word	0x08006900
 8006248:	08006920 	.word	0x08006920
 800624c:	080068e0 	.word	0x080068e0

08006250 <_write_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	2200      	movs	r2, #0
 800625a:	4d05      	ldr	r5, [pc, #20]	; (8006270 <_write_r+0x20>)
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fb f94d 	bl	80014fe <_write>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_write_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_write_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20000364 	.word	0x20000364

08006274 <__swsetup_r>:
 8006274:	4b32      	ldr	r3, [pc, #200]	; (8006340 <__swsetup_r+0xcc>)
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	4606      	mov	r6, r0
 800627c:	460c      	mov	r4, r1
 800627e:	b125      	cbz	r5, 800628a <__swsetup_r+0x16>
 8006280:	69ab      	ldr	r3, [r5, #24]
 8006282:	b913      	cbnz	r3, 800628a <__swsetup_r+0x16>
 8006284:	4628      	mov	r0, r5
 8006286:	f7ff f8e5 	bl	8005454 <__sinit>
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <__swsetup_r+0xd0>)
 800628c:	429c      	cmp	r4, r3
 800628e:	d10f      	bne.n	80062b0 <__swsetup_r+0x3c>
 8006290:	686c      	ldr	r4, [r5, #4]
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006298:	0719      	lsls	r1, r3, #28
 800629a:	d42c      	bmi.n	80062f6 <__swsetup_r+0x82>
 800629c:	06dd      	lsls	r5, r3, #27
 800629e:	d411      	bmi.n	80062c4 <__swsetup_r+0x50>
 80062a0:	2309      	movs	r3, #9
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	e03e      	b.n	800632e <__swsetup_r+0xba>
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <__swsetup_r+0xd4>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <__swsetup_r+0x46>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7eb      	b.n	8006292 <__swsetup_r+0x1e>
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <__swsetup_r+0xd8>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7e6      	b.n	8006292 <__swsetup_r+0x1e>
 80062c4:	0758      	lsls	r0, r3, #29
 80062c6:	d512      	bpl.n	80062ee <__swsetup_r+0x7a>
 80062c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ca:	b141      	cbz	r1, 80062de <__swsetup_r+0x6a>
 80062cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d0:	4299      	cmp	r1, r3
 80062d2:	d002      	beq.n	80062da <__swsetup_r+0x66>
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff fd17 	bl	8005d08 <_free_r>
 80062da:	2300      	movs	r3, #0
 80062dc:	6363      	str	r3, [r4, #52]	; 0x34
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	2300      	movs	r3, #0
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f043 0308 	orr.w	r3, r3, #8
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	b94b      	cbnz	r3, 800630e <__swsetup_r+0x9a>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006304:	d003      	beq.n	800630e <__swsetup_r+0x9a>
 8006306:	4621      	mov	r1, r4
 8006308:	4630      	mov	r0, r6
 800630a:	f000 f959 	bl	80065c0 <__smakebuf_r>
 800630e:	89a0      	ldrh	r0, [r4, #12]
 8006310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006314:	f010 0301 	ands.w	r3, r0, #1
 8006318:	d00a      	beq.n	8006330 <__swsetup_r+0xbc>
 800631a:	2300      	movs	r3, #0
 800631c:	60a3      	str	r3, [r4, #8]
 800631e:	6963      	ldr	r3, [r4, #20]
 8006320:	425b      	negs	r3, r3
 8006322:	61a3      	str	r3, [r4, #24]
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	b943      	cbnz	r3, 800633a <__swsetup_r+0xc6>
 8006328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800632c:	d1ba      	bne.n	80062a4 <__swsetup_r+0x30>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	0781      	lsls	r1, r0, #30
 8006332:	bf58      	it	pl
 8006334:	6963      	ldrpl	r3, [r4, #20]
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	e7f4      	b.n	8006324 <__swsetup_r+0xb0>
 800633a:	2000      	movs	r0, #0
 800633c:	e7f7      	b.n	800632e <__swsetup_r+0xba>
 800633e:	bf00      	nop
 8006340:	2000000c 	.word	0x2000000c
 8006344:	08006900 	.word	0x08006900
 8006348:	08006920 	.word	0x08006920
 800634c:	080068e0 	.word	0x080068e0

08006350 <__assert_func>:
 8006350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006352:	4614      	mov	r4, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <__assert_func+0x2c>)
 8006358:	4605      	mov	r5, r0
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68d8      	ldr	r0, [r3, #12]
 800635e:	b14c      	cbz	r4, 8006374 <__assert_func+0x24>
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <__assert_func+0x30>)
 8006362:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006366:	9100      	str	r1, [sp, #0]
 8006368:	462b      	mov	r3, r5
 800636a:	4906      	ldr	r1, [pc, #24]	; (8006384 <__assert_func+0x34>)
 800636c:	f000 f8e0 	bl	8006530 <fiprintf>
 8006370:	f000 f9a3 	bl	80066ba <abort>
 8006374:	4b04      	ldr	r3, [pc, #16]	; (8006388 <__assert_func+0x38>)
 8006376:	461c      	mov	r4, r3
 8006378:	e7f3      	b.n	8006362 <__assert_func+0x12>
 800637a:	bf00      	nop
 800637c:	2000000c 	.word	0x2000000c
 8006380:	08006aad 	.word	0x08006aad
 8006384:	08006aba 	.word	0x08006aba
 8006388:	08006ae8 	.word	0x08006ae8

0800638c <_close_r>:
 800638c:	b538      	push	{r3, r4, r5, lr}
 800638e:	2300      	movs	r3, #0
 8006390:	4d05      	ldr	r5, [pc, #20]	; (80063a8 <_close_r+0x1c>)
 8006392:	4604      	mov	r4, r0
 8006394:	4608      	mov	r0, r1
 8006396:	602b      	str	r3, [r5, #0]
 8006398:	f7fb f8cd 	bl	8001536 <_close>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	d102      	bne.n	80063a6 <_close_r+0x1a>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	b103      	cbz	r3, 80063a6 <_close_r+0x1a>
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	20000364 	.word	0x20000364

080063ac <__sflush_r>:
 80063ac:	898a      	ldrh	r2, [r1, #12]
 80063ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b2:	4605      	mov	r5, r0
 80063b4:	0710      	lsls	r0, r2, #28
 80063b6:	460c      	mov	r4, r1
 80063b8:	d458      	bmi.n	800646c <__sflush_r+0xc0>
 80063ba:	684b      	ldr	r3, [r1, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dc05      	bgt.n	80063cc <__sflush_r+0x20>
 80063c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	dc02      	bgt.n	80063cc <__sflush_r+0x20>
 80063c6:	2000      	movs	r0, #0
 80063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063ce:	2e00      	cmp	r6, #0
 80063d0:	d0f9      	beq.n	80063c6 <__sflush_r+0x1a>
 80063d2:	2300      	movs	r3, #0
 80063d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063d8:	682f      	ldr	r7, [r5, #0]
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	d032      	beq.n	8006444 <__sflush_r+0x98>
 80063de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	075a      	lsls	r2, r3, #29
 80063e4:	d505      	bpl.n	80063f2 <__sflush_r+0x46>
 80063e6:	6863      	ldr	r3, [r4, #4]
 80063e8:	1ac0      	subs	r0, r0, r3
 80063ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063ec:	b10b      	cbz	r3, 80063f2 <__sflush_r+0x46>
 80063ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063f0:	1ac0      	subs	r0, r0, r3
 80063f2:	2300      	movs	r3, #0
 80063f4:	4602      	mov	r2, r0
 80063f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063f8:	4628      	mov	r0, r5
 80063fa:	6a21      	ldr	r1, [r4, #32]
 80063fc:	47b0      	blx	r6
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	d106      	bne.n	8006412 <__sflush_r+0x66>
 8006404:	6829      	ldr	r1, [r5, #0]
 8006406:	291d      	cmp	r1, #29
 8006408:	d82c      	bhi.n	8006464 <__sflush_r+0xb8>
 800640a:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <__sflush_r+0x108>)
 800640c:	40ca      	lsrs	r2, r1
 800640e:	07d6      	lsls	r6, r2, #31
 8006410:	d528      	bpl.n	8006464 <__sflush_r+0xb8>
 8006412:	2200      	movs	r2, #0
 8006414:	6062      	str	r2, [r4, #4]
 8006416:	6922      	ldr	r2, [r4, #16]
 8006418:	04d9      	lsls	r1, r3, #19
 800641a:	6022      	str	r2, [r4, #0]
 800641c:	d504      	bpl.n	8006428 <__sflush_r+0x7c>
 800641e:	1c42      	adds	r2, r0, #1
 8006420:	d101      	bne.n	8006426 <__sflush_r+0x7a>
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	b903      	cbnz	r3, 8006428 <__sflush_r+0x7c>
 8006426:	6560      	str	r0, [r4, #84]	; 0x54
 8006428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800642a:	602f      	str	r7, [r5, #0]
 800642c:	2900      	cmp	r1, #0
 800642e:	d0ca      	beq.n	80063c6 <__sflush_r+0x1a>
 8006430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006434:	4299      	cmp	r1, r3
 8006436:	d002      	beq.n	800643e <__sflush_r+0x92>
 8006438:	4628      	mov	r0, r5
 800643a:	f7ff fc65 	bl	8005d08 <_free_r>
 800643e:	2000      	movs	r0, #0
 8006440:	6360      	str	r0, [r4, #52]	; 0x34
 8006442:	e7c1      	b.n	80063c8 <__sflush_r+0x1c>
 8006444:	6a21      	ldr	r1, [r4, #32]
 8006446:	2301      	movs	r3, #1
 8006448:	4628      	mov	r0, r5
 800644a:	47b0      	blx	r6
 800644c:	1c41      	adds	r1, r0, #1
 800644e:	d1c7      	bne.n	80063e0 <__sflush_r+0x34>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0c4      	beq.n	80063e0 <__sflush_r+0x34>
 8006456:	2b1d      	cmp	r3, #29
 8006458:	d001      	beq.n	800645e <__sflush_r+0xb2>
 800645a:	2b16      	cmp	r3, #22
 800645c:	d101      	bne.n	8006462 <__sflush_r+0xb6>
 800645e:	602f      	str	r7, [r5, #0]
 8006460:	e7b1      	b.n	80063c6 <__sflush_r+0x1a>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	e7ad      	b.n	80063c8 <__sflush_r+0x1c>
 800646c:	690f      	ldr	r7, [r1, #16]
 800646e:	2f00      	cmp	r7, #0
 8006470:	d0a9      	beq.n	80063c6 <__sflush_r+0x1a>
 8006472:	0793      	lsls	r3, r2, #30
 8006474:	bf18      	it	ne
 8006476:	2300      	movne	r3, #0
 8006478:	680e      	ldr	r6, [r1, #0]
 800647a:	bf08      	it	eq
 800647c:	694b      	ldreq	r3, [r1, #20]
 800647e:	eba6 0807 	sub.w	r8, r6, r7
 8006482:	600f      	str	r7, [r1, #0]
 8006484:	608b      	str	r3, [r1, #8]
 8006486:	f1b8 0f00 	cmp.w	r8, #0
 800648a:	dd9c      	ble.n	80063c6 <__sflush_r+0x1a>
 800648c:	4643      	mov	r3, r8
 800648e:	463a      	mov	r2, r7
 8006490:	4628      	mov	r0, r5
 8006492:	6a21      	ldr	r1, [r4, #32]
 8006494:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006496:	47b0      	blx	r6
 8006498:	2800      	cmp	r0, #0
 800649a:	dc06      	bgt.n	80064aa <__sflush_r+0xfe>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a6:	81a3      	strh	r3, [r4, #12]
 80064a8:	e78e      	b.n	80063c8 <__sflush_r+0x1c>
 80064aa:	4407      	add	r7, r0
 80064ac:	eba8 0800 	sub.w	r8, r8, r0
 80064b0:	e7e9      	b.n	8006486 <__sflush_r+0xda>
 80064b2:	bf00      	nop
 80064b4:	20400001 	.word	0x20400001

080064b8 <_fflush_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	690b      	ldr	r3, [r1, #16]
 80064bc:	4605      	mov	r5, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	b913      	cbnz	r3, 80064c8 <_fflush_r+0x10>
 80064c2:	2500      	movs	r5, #0
 80064c4:	4628      	mov	r0, r5
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	b118      	cbz	r0, 80064d2 <_fflush_r+0x1a>
 80064ca:	6983      	ldr	r3, [r0, #24]
 80064cc:	b90b      	cbnz	r3, 80064d2 <_fflush_r+0x1a>
 80064ce:	f7fe ffc1 	bl	8005454 <__sinit>
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <_fflush_r+0x6c>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d11b      	bne.n	8006510 <_fflush_r+0x58>
 80064d8:	686c      	ldr	r4, [r5, #4]
 80064da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0ef      	beq.n	80064c2 <_fflush_r+0xa>
 80064e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064e4:	07d0      	lsls	r0, r2, #31
 80064e6:	d404      	bmi.n	80064f2 <_fflush_r+0x3a>
 80064e8:	0599      	lsls	r1, r3, #22
 80064ea:	d402      	bmi.n	80064f2 <_fflush_r+0x3a>
 80064ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ee:	f7ff f854 	bl	800559a <__retarget_lock_acquire_recursive>
 80064f2:	4628      	mov	r0, r5
 80064f4:	4621      	mov	r1, r4
 80064f6:	f7ff ff59 	bl	80063ac <__sflush_r>
 80064fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064fc:	4605      	mov	r5, r0
 80064fe:	07da      	lsls	r2, r3, #31
 8006500:	d4e0      	bmi.n	80064c4 <_fflush_r+0xc>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	059b      	lsls	r3, r3, #22
 8006506:	d4dd      	bmi.n	80064c4 <_fflush_r+0xc>
 8006508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800650a:	f7ff f847 	bl	800559c <__retarget_lock_release_recursive>
 800650e:	e7d9      	b.n	80064c4 <_fflush_r+0xc>
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <_fflush_r+0x70>)
 8006512:	429c      	cmp	r4, r3
 8006514:	d101      	bne.n	800651a <_fflush_r+0x62>
 8006516:	68ac      	ldr	r4, [r5, #8]
 8006518:	e7df      	b.n	80064da <_fflush_r+0x22>
 800651a:	4b04      	ldr	r3, [pc, #16]	; (800652c <_fflush_r+0x74>)
 800651c:	429c      	cmp	r4, r3
 800651e:	bf08      	it	eq
 8006520:	68ec      	ldreq	r4, [r5, #12]
 8006522:	e7da      	b.n	80064da <_fflush_r+0x22>
 8006524:	08006900 	.word	0x08006900
 8006528:	08006920 	.word	0x08006920
 800652c:	080068e0 	.word	0x080068e0

08006530 <fiprintf>:
 8006530:	b40e      	push	{r1, r2, r3}
 8006532:	b503      	push	{r0, r1, lr}
 8006534:	4601      	mov	r1, r0
 8006536:	ab03      	add	r3, sp, #12
 8006538:	4805      	ldr	r0, [pc, #20]	; (8006550 <fiprintf+0x20>)
 800653a:	f853 2b04 	ldr.w	r2, [r3], #4
 800653e:	6800      	ldr	r0, [r0, #0]
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	f7ff fcaf 	bl	8005ea4 <_vfiprintf_r>
 8006546:	b002      	add	sp, #8
 8006548:	f85d eb04 	ldr.w	lr, [sp], #4
 800654c:	b003      	add	sp, #12
 800654e:	4770      	bx	lr
 8006550:	2000000c 	.word	0x2000000c

08006554 <_lseek_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	4611      	mov	r1, r2
 800655c:	2200      	movs	r2, #0
 800655e:	4d05      	ldr	r5, [pc, #20]	; (8006574 <_lseek_r+0x20>)
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	f7fb f80b 	bl	800157e <_lseek>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_lseek_r+0x1e>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_lseek_r+0x1e>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000364 	.word	0x20000364

08006578 <__swhatbuf_r>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	460e      	mov	r6, r1
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	4614      	mov	r4, r2
 8006582:	2900      	cmp	r1, #0
 8006584:	461d      	mov	r5, r3
 8006586:	b096      	sub	sp, #88	; 0x58
 8006588:	da07      	bge.n	800659a <__swhatbuf_r+0x22>
 800658a:	2300      	movs	r3, #0
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	89b3      	ldrh	r3, [r6, #12]
 8006590:	061a      	lsls	r2, r3, #24
 8006592:	d410      	bmi.n	80065b6 <__swhatbuf_r+0x3e>
 8006594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006598:	e00e      	b.n	80065b8 <__swhatbuf_r+0x40>
 800659a:	466a      	mov	r2, sp
 800659c:	f000 f894 	bl	80066c8 <_fstat_r>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	dbf2      	blt.n	800658a <__swhatbuf_r+0x12>
 80065a4:	9a01      	ldr	r2, [sp, #4]
 80065a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065ae:	425a      	negs	r2, r3
 80065b0:	415a      	adcs	r2, r3
 80065b2:	602a      	str	r2, [r5, #0]
 80065b4:	e7ee      	b.n	8006594 <__swhatbuf_r+0x1c>
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	2000      	movs	r0, #0
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	b016      	add	sp, #88	; 0x58
 80065be:	bd70      	pop	{r4, r5, r6, pc}

080065c0 <__smakebuf_r>:
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c4:	079d      	lsls	r5, r3, #30
 80065c6:	4606      	mov	r6, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	d507      	bpl.n	80065dc <__smakebuf_r+0x1c>
 80065cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	2301      	movs	r3, #1
 80065d6:	6163      	str	r3, [r4, #20]
 80065d8:	b002      	add	sp, #8
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	466a      	mov	r2, sp
 80065de:	ab01      	add	r3, sp, #4
 80065e0:	f7ff ffca 	bl	8006578 <__swhatbuf_r>
 80065e4:	9900      	ldr	r1, [sp, #0]
 80065e6:	4605      	mov	r5, r0
 80065e8:	4630      	mov	r0, r6
 80065ea:	f7ff fbd9 	bl	8005da0 <_malloc_r>
 80065ee:	b948      	cbnz	r0, 8006604 <__smakebuf_r+0x44>
 80065f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f4:	059a      	lsls	r2, r3, #22
 80065f6:	d4ef      	bmi.n	80065d8 <__smakebuf_r+0x18>
 80065f8:	f023 0303 	bic.w	r3, r3, #3
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	e7e3      	b.n	80065cc <__smakebuf_r+0xc>
 8006604:	4b0d      	ldr	r3, [pc, #52]	; (800663c <__smakebuf_r+0x7c>)
 8006606:	62b3      	str	r3, [r6, #40]	; 0x28
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	6020      	str	r0, [r4, #0]
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	81a3      	strh	r3, [r4, #12]
 8006612:	9b00      	ldr	r3, [sp, #0]
 8006614:	6120      	str	r0, [r4, #16]
 8006616:	6163      	str	r3, [r4, #20]
 8006618:	9b01      	ldr	r3, [sp, #4]
 800661a:	b15b      	cbz	r3, 8006634 <__smakebuf_r+0x74>
 800661c:	4630      	mov	r0, r6
 800661e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006622:	f000 f863 	bl	80066ec <_isatty_r>
 8006626:	b128      	cbz	r0, 8006634 <__smakebuf_r+0x74>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	89a0      	ldrh	r0, [r4, #12]
 8006636:	4305      	orrs	r5, r0
 8006638:	81a5      	strh	r5, [r4, #12]
 800663a:	e7cd      	b.n	80065d8 <__smakebuf_r+0x18>
 800663c:	080053ed 	.word	0x080053ed

08006640 <__ascii_mbtowc>:
 8006640:	b082      	sub	sp, #8
 8006642:	b901      	cbnz	r1, 8006646 <__ascii_mbtowc+0x6>
 8006644:	a901      	add	r1, sp, #4
 8006646:	b142      	cbz	r2, 800665a <__ascii_mbtowc+0x1a>
 8006648:	b14b      	cbz	r3, 800665e <__ascii_mbtowc+0x1e>
 800664a:	7813      	ldrb	r3, [r2, #0]
 800664c:	600b      	str	r3, [r1, #0]
 800664e:	7812      	ldrb	r2, [r2, #0]
 8006650:	1e10      	subs	r0, r2, #0
 8006652:	bf18      	it	ne
 8006654:	2001      	movne	r0, #1
 8006656:	b002      	add	sp, #8
 8006658:	4770      	bx	lr
 800665a:	4610      	mov	r0, r2
 800665c:	e7fb      	b.n	8006656 <__ascii_mbtowc+0x16>
 800665e:	f06f 0001 	mvn.w	r0, #1
 8006662:	e7f8      	b.n	8006656 <__ascii_mbtowc+0x16>

08006664 <__malloc_lock>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__malloc_lock+0x8>)
 8006666:	f7fe bf98 	b.w	800559a <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	2000035c 	.word	0x2000035c

08006670 <__malloc_unlock>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__malloc_unlock+0x8>)
 8006672:	f7fe bf93 	b.w	800559c <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	2000035c 	.word	0x2000035c

0800667c <_read_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	4611      	mov	r1, r2
 8006684:	2200      	movs	r2, #0
 8006686:	4d05      	ldr	r5, [pc, #20]	; (800669c <_read_r+0x20>)
 8006688:	602a      	str	r2, [r5, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	f7fa ff1a 	bl	80014c4 <_read>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <_read_r+0x1e>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	b103      	cbz	r3, 800669a <_read_r+0x1e>
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	20000364 	.word	0x20000364

080066a0 <__ascii_wctomb>:
 80066a0:	4603      	mov	r3, r0
 80066a2:	4608      	mov	r0, r1
 80066a4:	b141      	cbz	r1, 80066b8 <__ascii_wctomb+0x18>
 80066a6:	2aff      	cmp	r2, #255	; 0xff
 80066a8:	d904      	bls.n	80066b4 <__ascii_wctomb+0x14>
 80066aa:	228a      	movs	r2, #138	; 0x8a
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	4770      	bx	lr
 80066b4:	2001      	movs	r0, #1
 80066b6:	700a      	strb	r2, [r1, #0]
 80066b8:	4770      	bx	lr

080066ba <abort>:
 80066ba:	2006      	movs	r0, #6
 80066bc:	b508      	push	{r3, lr}
 80066be:	f000 f84d 	bl	800675c <raise>
 80066c2:	2001      	movs	r0, #1
 80066c4:	f7fa fef4 	bl	80014b0 <_exit>

080066c8 <_fstat_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	2300      	movs	r3, #0
 80066cc:	4d06      	ldr	r5, [pc, #24]	; (80066e8 <_fstat_r+0x20>)
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	f7fa ff39 	bl	800154c <_fstat>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	d102      	bne.n	80066e4 <_fstat_r+0x1c>
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	b103      	cbz	r3, 80066e4 <_fstat_r+0x1c>
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	20000364 	.word	0x20000364

080066ec <_isatty_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	2300      	movs	r3, #0
 80066f0:	4d05      	ldr	r5, [pc, #20]	; (8006708 <_isatty_r+0x1c>)
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fa ff37 	bl	800156a <_isatty>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_isatty_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_isatty_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	20000364 	.word	0x20000364

0800670c <_raise_r>:
 800670c:	291f      	cmp	r1, #31
 800670e:	b538      	push	{r3, r4, r5, lr}
 8006710:	4604      	mov	r4, r0
 8006712:	460d      	mov	r5, r1
 8006714:	d904      	bls.n	8006720 <_raise_r+0x14>
 8006716:	2316      	movs	r3, #22
 8006718:	6003      	str	r3, [r0, #0]
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006722:	b112      	cbz	r2, 800672a <_raise_r+0x1e>
 8006724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006728:	b94b      	cbnz	r3, 800673e <_raise_r+0x32>
 800672a:	4620      	mov	r0, r4
 800672c:	f000 f830 	bl	8006790 <_getpid_r>
 8006730:	462a      	mov	r2, r5
 8006732:	4601      	mov	r1, r0
 8006734:	4620      	mov	r0, r4
 8006736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800673a:	f000 b817 	b.w	800676c <_kill_r>
 800673e:	2b01      	cmp	r3, #1
 8006740:	d00a      	beq.n	8006758 <_raise_r+0x4c>
 8006742:	1c59      	adds	r1, r3, #1
 8006744:	d103      	bne.n	800674e <_raise_r+0x42>
 8006746:	2316      	movs	r3, #22
 8006748:	6003      	str	r3, [r0, #0]
 800674a:	2001      	movs	r0, #1
 800674c:	e7e7      	b.n	800671e <_raise_r+0x12>
 800674e:	2400      	movs	r4, #0
 8006750:	4628      	mov	r0, r5
 8006752:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006756:	4798      	blx	r3
 8006758:	2000      	movs	r0, #0
 800675a:	e7e0      	b.n	800671e <_raise_r+0x12>

0800675c <raise>:
 800675c:	4b02      	ldr	r3, [pc, #8]	; (8006768 <raise+0xc>)
 800675e:	4601      	mov	r1, r0
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f7ff bfd3 	b.w	800670c <_raise_r>
 8006766:	bf00      	nop
 8006768:	2000000c 	.word	0x2000000c

0800676c <_kill_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	2300      	movs	r3, #0
 8006770:	4d06      	ldr	r5, [pc, #24]	; (800678c <_kill_r+0x20>)
 8006772:	4604      	mov	r4, r0
 8006774:	4608      	mov	r0, r1
 8006776:	4611      	mov	r1, r2
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	f7fa fe89 	bl	8001490 <_kill>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	d102      	bne.n	8006788 <_kill_r+0x1c>
 8006782:	682b      	ldr	r3, [r5, #0]
 8006784:	b103      	cbz	r3, 8006788 <_kill_r+0x1c>
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	bd38      	pop	{r3, r4, r5, pc}
 800678a:	bf00      	nop
 800678c:	20000364 	.word	0x20000364

08006790 <_getpid_r>:
 8006790:	f7fa be77 	b.w	8001482 <_getpid>

08006794 <_init>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr

080067a0 <_fini>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr
