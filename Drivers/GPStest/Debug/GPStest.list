
GPStest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004940  08004940  00014940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ab8  08004ab8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ab8  08004ab8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000078  08004b38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  08004b38  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008123  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad1  00000000  00000000  000281c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00029c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f4  00000000  00000000  0002aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085fb  00000000  00000000  00041b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f8e  00000000  00000000  0004a167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc0f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fbc  00000000  00000000  000cc148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004924 	.word	0x08004924

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004924 	.word	0x08004924

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000adc:	b08c      	sub	sp, #48	; 0x30
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000ae4:	4b5b      	ldr	r3, [pc, #364]	; (8000c54 <decodeGGA+0x17c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000aee:	e004      	b.n	8000afa <decodeGGA+0x22>
 8000af0:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <decodeGGA+0x17c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a57      	ldr	r2, [pc, #348]	; (8000c54 <decodeGGA+0x17c>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <decodeGGA+0x17c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b2c      	cmp	r3, #44	; 0x2c
 8000b08:	d1f2      	bne.n	8000af0 <decodeGGA+0x18>
	inx++;
 8000b0a:	4b52      	ldr	r3, [pc, #328]	; (8000c54 <decodeGGA+0x17c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a50      	ldr	r2, [pc, #320]	; (8000c54 <decodeGGA+0x17c>)
 8000b12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000b14:	e004      	b.n	8000b20 <decodeGGA+0x48>
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <decodeGGA+0x17c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	4a4d      	ldr	r2, [pc, #308]	; (8000c54 <decodeGGA+0x17c>)
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <decodeGGA+0x17c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b2c      	cmp	r3, #44	; 0x2c
 8000b2e:	d1f2      	bne.n	8000b16 <decodeGGA+0x3e>
	inx++;
 8000b30:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <decodeGGA+0x17c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a47      	ldr	r2, [pc, #284]	; (8000c54 <decodeGGA+0x17c>)
 8000b38:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000b3a:	e004      	b.n	8000b46 <decodeGGA+0x6e>
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <decodeGGA+0x17c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a44      	ldr	r2, [pc, #272]	; (8000c54 <decodeGGA+0x17c>)
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <decodeGGA+0x17c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b2c      	cmp	r3, #44	; 0x2c
 8000b54:	d1f2      	bne.n	8000b3c <decodeGGA+0x64>
	inx++;
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <decodeGGA+0x17c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <decodeGGA+0x17c>)
 8000b5e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000b60:	e004      	b.n	8000b6c <decodeGGA+0x94>
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <decodeGGA+0x17c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <decodeGGA+0x17c>)
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <decodeGGA+0x17c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b2c      	cmp	r3, #44	; 0x2c
 8000b7a:	d1f2      	bne.n	8000b62 <decodeGGA+0x8a>
	inx++;
 8000b7c:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <decodeGGA+0x17c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <decodeGGA+0x17c>)
 8000b84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000b86:	e004      	b.n	8000b92 <decodeGGA+0xba>
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <decodeGGA+0x17c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <decodeGGA+0x17c>)
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <decodeGGA+0x17c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8000ba0:	d1f2      	bne.n	8000b88 <decodeGGA+0xb0>
	inx++;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <decodeGGA+0x17c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	; (8000c54 <decodeGGA+0x17c>)
 8000baa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000bac:	e004      	b.n	8000bb8 <decodeGGA+0xe0>
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <decodeGGA+0x17c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <decodeGGA+0x17c>)
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <decodeGGA+0x17c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b2c      	cmp	r3, #44	; 0x2c
 8000bc6:	d1f2      	bne.n	8000bae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <decodeGGA+0x17c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <decodeGGA+0x17c>)
 8000bd0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <decodeGGA+0x17c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b31      	cmp	r3, #49	; 0x31
 8000be0:	d00f      	beq.n	8000c02 <decodeGGA+0x12a>
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <decodeGGA+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b32      	cmp	r3, #50	; 0x32
 8000bf0:	d007      	beq.n	8000c02 <decodeGGA+0x12a>
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <decodeGGA+0x17c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b36      	cmp	r3, #54	; 0x36
 8000c00:	d106      	bne.n	8000c10 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <decodeGGA+0x17c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c0e:	e009      	b.n	8000c24 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000c16:	2301      	movs	r3, #1
 8000c18:	e2f2      	b.n	8001200 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <decodeGGA+0x17c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <decodeGGA+0x17c>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <decodeGGA+0x17c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b2c      	cmp	r3, #44	; 0x2c
 8000c32:	d1f2      	bne.n	8000c1a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <decodeGGA+0x17c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <decodeGGA+0x17c>)
 8000c3c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	220c      	movs	r2, #12
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fe46 	bl	80038d8 <memset>
	i=0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000c50:	e016      	b.n	8000c80 <decodeGGA+0x1a8>
 8000c52:	bf00      	nop
 8000c54:	20000094 	.word	0x20000094
	{
		buffer[i] = GGAbuffer[inx];
 8000c58:	4ba7      	ldr	r3, [pc, #668]	; (8000ef8 <decodeGGA+0x420>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	f107 020c 	add.w	r2, r7, #12
 8000c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6a:	4413      	add	r3, r2
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
		i++;
 8000c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c72:	3301      	adds	r3, #1
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000c76:	4ba0      	ldr	r3, [pc, #640]	; (8000ef8 <decodeGGA+0x420>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a9e      	ldr	r2, [pc, #632]	; (8000ef8 <decodeGGA+0x420>)
 8000c7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000c80:	4b9d      	ldr	r3, [pc, #628]	; (8000ef8 <decodeGGA+0x420>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b2c      	cmp	r3, #44	; 0x2c
 8000c8e:	d1e3      	bne.n	8000c58 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fdf1 	bl	800387c <atoi>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a97      	ldr	r2, [pc, #604]	; (8000efc <decodeGGA+0x424>)
 8000c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca2:	1312      	asrs	r2, r2, #12
 8000ca4:	17db      	asrs	r3, r3, #31
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	4b95      	ldr	r3, [pc, #596]	; (8000f00 <decodeGGA+0x428>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4995      	ldr	r1, [pc, #596]	; (8000f04 <decodeGGA+0x42c>)
 8000cae:	fb81 0103 	smull	r0, r1, r1, r3
 8000cb2:	1149      	asrs	r1, r1, #5
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	1acb      	subs	r3, r1, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a93      	ldr	r2, [pc, #588]	; (8000f08 <decodeGGA+0x430>)
 8000cbc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fdda 	bl	800387c <atoi>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a8e      	ldr	r2, [pc, #568]	; (8000f04 <decodeGGA+0x42c>)
 8000ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd0:	1152      	asrs	r2, r2, #5
 8000cd2:	17db      	asrs	r3, r3, #31
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	4a8b      	ldr	r2, [pc, #556]	; (8000f04 <decodeGGA+0x42c>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1151      	asrs	r1, r2, #5
 8000cde:	17da      	asrs	r2, r3, #31
 8000ce0:	1a8a      	subs	r2, r1, r2
 8000ce2:	2164      	movs	r1, #100	; 0x64
 8000ce4:	fb01 f202 	mul.w	r2, r1, r2
 8000ce8:	1a9a      	subs	r2, r3, r2
 8000cea:	4b85      	ldr	r3, [pc, #532]	; (8000f00 <decodeGGA+0x428>)
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	4b85      	ldr	r3, [pc, #532]	; (8000f04 <decodeGGA+0x42c>)
 8000cf0:	fb83 0301 	smull	r0, r3, r3, r1
 8000cf4:	1158      	asrs	r0, r3, #5
 8000cf6:	17cb      	asrs	r3, r1, #31
 8000cf8:	1ac3      	subs	r3, r0, r3
 8000cfa:	2064      	movs	r0, #100	; 0x64
 8000cfc:	fb00 f303 	mul.w	r3, r0, r3
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	4a81      	ldr	r2, [pc, #516]	; (8000f0c <decodeGGA+0x434>)
 8000d06:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8000d08:	4b80      	ldr	r3, [pc, #512]	; (8000f0c <decodeGGA+0x434>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d0e:	dd09      	ble.n	8000d24 <decodeGGA+0x24c>
	{
		min = min-60;
 8000d10:	4b7e      	ldr	r3, [pc, #504]	; (8000f0c <decodeGGA+0x434>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b3c      	subs	r3, #60	; 0x3c
 8000d16:	4a7d      	ldr	r2, [pc, #500]	; (8000f0c <decodeGGA+0x434>)
 8000d18:	6013      	str	r3, [r2, #0]
		hr++;
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <decodeGGA+0x430>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a79      	ldr	r2, [pc, #484]	; (8000f08 <decodeGGA+0x430>)
 8000d22:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000d24:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <decodeGGA+0x430>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da09      	bge.n	8000d40 <decodeGGA+0x268>
	{
		hr=24+hr;
 8000d2c:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <decodeGGA+0x430>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3318      	adds	r3, #24
 8000d32:	4a75      	ldr	r2, [pc, #468]	; (8000f08 <decodeGGA+0x430>)
 8000d34:	6013      	str	r3, [r2, #0]
		daychange--;
 8000d36:	4b76      	ldr	r3, [pc, #472]	; (8000f10 <decodeGGA+0x438>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4a74      	ldr	r2, [pc, #464]	; (8000f10 <decodeGGA+0x438>)
 8000d3e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000d40:	4b71      	ldr	r3, [pc, #452]	; (8000f08 <decodeGGA+0x430>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b17      	cmp	r3, #23
 8000d46:	dd09      	ble.n	8000d5c <decodeGGA+0x284>
	{
		hr=hr-24;
 8000d48:	4b6f      	ldr	r3, [pc, #444]	; (8000f08 <decodeGGA+0x430>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3b18      	subs	r3, #24
 8000d4e:	4a6e      	ldr	r2, [pc, #440]	; (8000f08 <decodeGGA+0x430>)
 8000d50:	6013      	str	r3, [r2, #0]
		daychange++;
 8000d52:	4b6f      	ldr	r3, [pc, #444]	; (8000f10 <decodeGGA+0x438>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a6d      	ldr	r2, [pc, #436]	; (8000f10 <decodeGGA+0x438>)
 8000d5a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <decodeGGA+0x430>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000d64:	4b69      	ldr	r3, [pc, #420]	; (8000f0c <decodeGGA+0x434>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fd83 	bl	800387c <atoi>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b62      	ldr	r3, [pc, #392]	; (8000f04 <decodeGGA+0x42c>)
 8000d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d7e:	1159      	asrs	r1, r3, #5
 8000d80:	17d3      	asrs	r3, r2, #31
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	2164      	movs	r1, #100	; 0x64
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000d90:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <decodeGGA+0x420>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a58      	ldr	r2, [pc, #352]	; (8000ef8 <decodeGGA+0x420>)
 8000d98:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	220c      	movs	r2, #12
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fd98 	bl	80038d8 <memset>
	i=0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dac:	e013      	b.n	8000dd6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000dae:	4b52      	ldr	r3, [pc, #328]	; (8000ef8 <decodeGGA+0x420>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	f107 020c 	add.w	r2, r7, #12
 8000dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc0:	4413      	add	r3, r2
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
		i++;
 8000dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc8:	3301      	adds	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <decodeGGA+0x420>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4a49      	ldr	r2, [pc, #292]	; (8000ef8 <decodeGGA+0x420>)
 8000dd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dd6:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <decodeGGA+0x420>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b2c      	cmp	r3, #44	; 0x2c
 8000de4:	d1e3      	bne.n	8000dae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9b0 	bl	8000150 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d801      	bhi.n	8000dfa <decodeGGA+0x322>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e202      	b.n	8001200 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fd3c 	bl	800387c <atoi>
 8000e04:	4603      	mov	r3, r0
 8000e06:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000e0c:	e002      	b.n	8000e14 <decodeGGA+0x33c>
 8000e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e10:	3301      	adds	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8000e20:	d1f5      	bne.n	8000e0e <decodeGGA+0x336>
	j++;
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	3301      	adds	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f98f 	bl	8000150 <strlen>
 8000e32:	4602      	mov	r2, r0
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	4413      	add	r3, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fd1a 	bl	800387c <atoi>
 8000e48:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fad8 	bl	8000404 <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <decodeGGA+0x43c>)
 8000e5a:	f7ff fc67 	bl	800072c <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4690      	mov	r8, r2
 8000e64:	4699      	mov	r9, r3
 8000e66:	69f8      	ldr	r0, [r7, #28]
 8000e68:	f7ff facc 	bl	8000404 <__aeabi_i2d>
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	460d      	mov	r5, r1
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	3302      	adds	r3, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fac5 	bl	8000404 <__aeabi_i2d>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	f04f 0000 	mov.w	r0, #0
 8000e82:	4925      	ldr	r1, [pc, #148]	; (8000f18 <decodeGGA+0x440>)
 8000e84:	f002 fdc0 	bl	8003a08 <pow>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	4629      	mov	r1, r5
 8000e90:	f7ff fc4c 	bl	800072c <__aeabi_ddiv>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4640      	mov	r0, r8
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	f7ff f966 	bl	800016c <__adddf3>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fdc6 	bl	8000a38 <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	601a      	str	r2, [r3, #0]
	inx++;  
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <decodeGGA+0x420>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <decodeGGA+0x420>)
 8000ebe:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <decodeGGA+0x420>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <decodeGGA+0x420>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <decodeGGA+0x420>)
 8000ed8:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <decodeGGA+0x420>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <decodeGGA+0x420>)
 8000ee2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	220c      	movs	r2, #12
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fcf3 	bl	80038d8 <memset>
	i=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000ef6:	e025      	b.n	8000f44 <decodeGGA+0x46c>
 8000ef8:	20000094 	.word	0x20000094
 8000efc:	68db8bad 	.word	0x68db8bad
 8000f00:	20000000 	.word	0x20000000
 8000f04:	51eb851f 	.word	0x51eb851f
 8000f08:	20000098 	.word	0x20000098
 8000f0c:	2000009c 	.word	0x2000009c
 8000f10:	200000ac 	.word	0x200000ac
 8000f14:	40590000 	.word	0x40590000
 8000f18:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <decodeGGA+0x668>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	4413      	add	r3, r2
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
		i++;
 8000f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f36:	3301      	adds	r3, #1
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <decodeGGA+0x668>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a7f      	ldr	r2, [pc, #508]	; (8001140 <decodeGGA+0x668>)
 8000f42:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f44:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <decodeGGA+0x668>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2c      	cmp	r3, #44	; 0x2c
 8000f52:	d1e3      	bne.n	8000f1c <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fc8f 	bl	800387c <atoi>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8000f66:	e002      	b.n	8000f6e <decodeGGA+0x496>
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b2e      	cmp	r3, #46	; 0x2e
 8000f7a:	d1f5      	bne.n	8000f68 <decodeGGA+0x490>
	j++;
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	3301      	adds	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f8e2 	bl	8000150 <strlen>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fc6d 	bl	800387c <atoi>
 8000fa2:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000fa4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa2b 	bl	8000404 <__aeabi_i2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b64      	ldr	r3, [pc, #400]	; (8001144 <decodeGGA+0x66c>)
 8000fb4:	f7ff fbba 	bl	800072c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	4699      	mov	r9, r3
 8000fc0:	69f8      	ldr	r0, [r7, #28]
 8000fc2:	f7ff fa1f 	bl	8000404 <__aeabi_i2d>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	460d      	mov	r5, r1
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa18 	bl	8000404 <__aeabi_i2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	495a      	ldr	r1, [pc, #360]	; (8001148 <decodeGGA+0x670>)
 8000fde:	f002 fd13 	bl	8003a08 <pow>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fb9f 	bl	800072c <__aeabi_ddiv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f8b9 	bl	800016c <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fd19 	bl	8000a38 <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	609a      	str	r2, [r3, #8]
	inx++;
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <decodeGGA+0x668>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <decodeGGA+0x668>)
 8001018:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800101a:	4b49      	ldr	r3, [pc, #292]	; (8001140 <decodeGGA+0x668>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <decodeGGA+0x668>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a43      	ldr	r2, [pc, #268]	; (8001140 <decodeGGA+0x668>)
 8001032:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001034:	4b42      	ldr	r3, [pc, #264]	; (8001140 <decodeGGA+0x668>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a41      	ldr	r2, [pc, #260]	; (8001140 <decodeGGA+0x668>)
 800103c:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800103e:	4b40      	ldr	r3, [pc, #256]	; (8001140 <decodeGGA+0x668>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <decodeGGA+0x668>)
 8001046:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <decodeGGA+0x668>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <decodeGGA+0x668>)
 8001050:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	220c      	movs	r2, #12
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fc3c 	bl	80038d8 <memset>
	i=0;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001064:	e013      	b.n	800108e <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <decodeGGA+0x668>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
		i++;
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	3301      	adds	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <decodeGGA+0x668>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <decodeGGA+0x668>)
 800108c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <decodeGGA+0x668>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b2c      	cmp	r3, #44	; 0x2c
 800109c:	d1e3      	bne.n	8001066 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fbea 	bl	800387c <atoi>
 80010a8:	4602      	mov	r2, r0
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <decodeGGA+0x668>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <decodeGGA+0x668>)
 80010b6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80010b8:	e004      	b.n	80010c4 <decodeGGA+0x5ec>
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <decodeGGA+0x668>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <decodeGGA+0x668>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <decodeGGA+0x668>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b2c      	cmp	r3, #44	; 0x2c
 80010d2:	d1f2      	bne.n	80010ba <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <decodeGGA+0x668>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <decodeGGA+0x668>)
 80010dc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	220c      	movs	r2, #12
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fbf6 	bl	80038d8 <memset>
	i=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80010f0:	e013      	b.n	800111a <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <decodeGGA+0x668>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	7819      	ldrb	r1, [r3, #0]
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	4413      	add	r3, r2
 8001106:	460a      	mov	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
		i++;
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	3301      	adds	r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <decodeGGA+0x668>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <decodeGGA+0x668>)
 8001118:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <decodeGGA+0x668>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b2c      	cmp	r3, #44	; 0x2c
 8001128:	d1e3      	bne.n	80010f2 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4618      	mov	r0, r3
 8001130:	f002 fba4 	bl	800387c <atoi>
 8001134:	4603      	mov	r3, r0
 8001136:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800113c:	e009      	b.n	8001152 <decodeGGA+0x67a>
 800113e:	bf00      	nop
 8001140:	20000094 	.word	0x20000094
 8001144:	40590000 	.word	0x40590000
 8001148:	40240000 	.word	0x40240000
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	3301      	adds	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b2e      	cmp	r3, #46	; 0x2e
 800115e:	d1f5      	bne.n	800114c <decodeGGA+0x674>
	j++;
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	3301      	adds	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f7fe fff0 	bl	8000150 <strlen>
 8001170:	4602      	mov	r2, r0
 8001172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	4413      	add	r3, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fb7b 	bl	800387c <atoi>
 8001186:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001188:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f939 	bl	8000404 <__aeabi_i2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f7ff f934 	bl	8000404 <__aeabi_i2d>
 800119c:	4680      	mov	r8, r0
 800119e:	4689      	mov	r9, r1
 80011a0:	6a38      	ldr	r0, [r7, #32]
 80011a2:	f7ff f92f 	bl	8000404 <__aeabi_i2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4917      	ldr	r1, [pc, #92]	; (800120c <decodeGGA+0x734>)
 80011b0:	f002 fc2a 	bl	8003a08 <pow>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4640      	mov	r0, r8
 80011ba:	4649      	mov	r1, r9
 80011bc:	f7ff fab6 	bl	800072c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4620      	mov	r0, r4
 80011c6:	4629      	mov	r1, r5
 80011c8:	f7fe ffd0 	bl	800016c <__adddf3>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fc30 	bl	8000a38 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	621a      	str	r2, [r3, #32]

	inx++;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <decodeGGA+0x738>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <decodeGGA+0x738>)
 80011ea:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <decodeGGA+0x738>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80011fe:	2300      	movs	r3, #0

}
 8001200:	4618      	mov	r0, r3
 8001202:	3730      	adds	r7, #48	; 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800120a:	bf00      	nop
 800120c:	40240000 	.word	0x40240000
 8001210:	20000094 	.word	0x20000094

08001214 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001214:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001218:	b090      	sub	sp, #64	; 0x40
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001220:	4b92      	ldr	r3, [pc, #584]	; (800146c <decodeRMC+0x258>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800122a:	e004      	b.n	8001236 <decodeRMC+0x22>
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <decodeRMC+0x258>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a8e      	ldr	r2, [pc, #568]	; (800146c <decodeRMC+0x258>)
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b8d      	ldr	r3, [pc, #564]	; (800146c <decodeRMC+0x258>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b2c      	cmp	r3, #44	; 0x2c
 8001244:	d1f2      	bne.n	800122c <decodeRMC+0x18>
	inx++;
 8001246:	4b89      	ldr	r3, [pc, #548]	; (800146c <decodeRMC+0x258>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a87      	ldr	r2, [pc, #540]	; (800146c <decodeRMC+0x258>)
 800124e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001250:	e004      	b.n	800125c <decodeRMC+0x48>
 8001252:	4b86      	ldr	r3, [pc, #536]	; (800146c <decodeRMC+0x258>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a84      	ldr	r2, [pc, #528]	; (800146c <decodeRMC+0x258>)
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b83      	ldr	r3, [pc, #524]	; (800146c <decodeRMC+0x258>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b2c      	cmp	r3, #44	; 0x2c
 800126a:	d1f2      	bne.n	8001252 <decodeRMC+0x3e>
	inx++;
 800126c:	4b7f      	ldr	r3, [pc, #508]	; (800146c <decodeRMC+0x258>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a7e      	ldr	r2, [pc, #504]	; (800146c <decodeRMC+0x258>)
 8001274:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001276:	4b7d      	ldr	r3, [pc, #500]	; (800146c <decodeRMC+0x258>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b41      	cmp	r3, #65	; 0x41
 8001284:	d10d      	bne.n	80012a2 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 800128c:	4b77      	ldr	r3, [pc, #476]	; (800146c <decodeRMC+0x258>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a76      	ldr	r2, [pc, #472]	; (800146c <decodeRMC+0x258>)
 8001294:	6013      	str	r3, [r2, #0]
	inx++;
 8001296:	4b75      	ldr	r3, [pc, #468]	; (800146c <decodeRMC+0x258>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a73      	ldr	r2, [pc, #460]	; (800146c <decodeRMC+0x258>)
 800129e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012a0:	e009      	b.n	80012b6 <decodeRMC+0xa2>
		rmc->isValid =0;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
		return 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e1d5      	b.n	8001658 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012ac:	4b6f      	ldr	r3, [pc, #444]	; (800146c <decodeRMC+0x258>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a6e      	ldr	r2, [pc, #440]	; (800146c <decodeRMC+0x258>)
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6d      	ldr	r3, [pc, #436]	; (800146c <decodeRMC+0x258>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b2c      	cmp	r3, #44	; 0x2c
 80012c4:	d1f2      	bne.n	80012ac <decodeRMC+0x98>
	inx++;
 80012c6:	4b69      	ldr	r3, [pc, #420]	; (800146c <decodeRMC+0x258>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a67      	ldr	r2, [pc, #412]	; (800146c <decodeRMC+0x258>)
 80012ce:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80012d0:	e004      	b.n	80012dc <decodeRMC+0xc8>
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <decodeRMC+0x258>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a64      	ldr	r2, [pc, #400]	; (800146c <decodeRMC+0x258>)
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b63      	ldr	r3, [pc, #396]	; (800146c <decodeRMC+0x258>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2c      	cmp	r3, #44	; 0x2c
 80012ea:	d1f2      	bne.n	80012d2 <decodeRMC+0xbe>
	inx++;
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <decodeRMC+0x258>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a5e      	ldr	r2, [pc, #376]	; (800146c <decodeRMC+0x258>)
 80012f4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80012f6:	e004      	b.n	8001302 <decodeRMC+0xee>
 80012f8:	4b5c      	ldr	r3, [pc, #368]	; (800146c <decodeRMC+0x258>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a5b      	ldr	r2, [pc, #364]	; (800146c <decodeRMC+0x258>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <decodeRMC+0x258>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b2c      	cmp	r3, #44	; 0x2c
 8001310:	d1f2      	bne.n	80012f8 <decodeRMC+0xe4>
	inx++;
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <decodeRMC+0x258>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a54      	ldr	r2, [pc, #336]	; (800146c <decodeRMC+0x258>)
 800131a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 800131c:	e004      	b.n	8001328 <decodeRMC+0x114>
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <decodeRMC+0x258>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <decodeRMC+0x258>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <decodeRMC+0x258>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b2c      	cmp	r3, #44	; 0x2c
 8001336:	d1f2      	bne.n	800131e <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001338:	4b4c      	ldr	r3, [pc, #304]	; (800146c <decodeRMC+0x258>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a4b      	ldr	r2, [pc, #300]	; (800146c <decodeRMC+0x258>)
 8001340:	6013      	str	r3, [r2, #0]
	i=0;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	220c      	movs	r2, #12
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fac2 	bl	80038d8 <memset>
	while (RMCbuffer[inx] != ',')
 8001354:	e013      	b.n	800137e <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8001356:	4b45      	ldr	r3, [pc, #276]	; (800146c <decodeRMC+0x258>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	7819      	ldrb	r1, [r3, #0]
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001368:	4413      	add	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
		i++;
 800136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001370:	3301      	adds	r3, #1
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <decodeRMC+0x258>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a3c      	ldr	r2, [pc, #240]	; (800146c <decodeRMC+0x258>)
 800137c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <decodeRMC+0x258>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b2c      	cmp	r3, #44	; 0x2c
 800138c:	d1e3      	bne.n	8001356 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d055      	beq.n	8001444 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fa6d 	bl	800387c <atoi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80013aa:	e002      	b.n	80013b2 <decodeRMC+0x19e>
 80013ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ae:	3301      	adds	r3, #1
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b2e      	cmp	r3, #46	; 0x2e
 80013be:	d1f5      	bne.n	80013ac <decodeRMC+0x198>
		j++;
 80013c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c2:	3301      	adds	r3, #1
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe fec0 	bl	8000150 <strlen>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80013d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	4413      	add	r3, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fa4b 	bl	800387c <atoi>
 80013e6:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 80013e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f809 	bl	8000404 <__aeabi_i2d>
 80013f2:	4604      	mov	r4, r0
 80013f4:	460d      	mov	r5, r1
 80013f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f8:	f7ff f804 	bl	8000404 <__aeabi_i2d>
 80013fc:	4680      	mov	r8, r0
 80013fe:	4689      	mov	r9, r1
 8001400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001402:	f7fe ffff 	bl	8000404 <__aeabi_i2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	f04f 0000 	mov.w	r0, #0
 800140e:	4918      	ldr	r1, [pc, #96]	; (8001470 <decodeRMC+0x25c>)
 8001410:	f002 fafa 	bl	8003a08 <pow>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4640      	mov	r0, r8
 800141a:	4649      	mov	r1, r9
 800141c:	f7ff f986 	bl	800072c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7fe fea0 	bl	800016c <__adddf3>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb00 	bl	8000a38 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	e003      	b.n	800144c <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <decodeRMC+0x258>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a06      	ldr	r2, [pc, #24]	; (800146c <decodeRMC+0x258>)
 8001454:	6013      	str	r3, [r2, #0]
	i=0;
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	220c      	movs	r2, #12
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fa38 	bl	80038d8 <memset>
	while (RMCbuffer[inx] != ',')
 8001468:	e018      	b.n	800149c <decodeRMC+0x288>
 800146a:	bf00      	nop
 800146c:	20000094 	.word	0x20000094
 8001470:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8001474:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <decodeRMC+0x450>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	7819      	ldrb	r1, [r3, #0]
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
		i++;
 800148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148e:	3301      	adds	r3, #1
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <decodeRMC+0x450>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a72      	ldr	r2, [pc, #456]	; (8001664 <decodeRMC+0x450>)
 800149a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800149c:	4b71      	ldr	r3, [pc, #452]	; (8001664 <decodeRMC+0x450>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b2c      	cmp	r3, #44	; 0x2c
 80014aa:	d1e3      	bne.n	8001474 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d055      	beq.n	8001562 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 f9de 	bl	800387c <atoi>
 80014c0:	4603      	mov	r3, r0
 80014c2:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80014c8:	e002      	b.n	80014d0 <decodeRMC+0x2bc>
 80014ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014cc:	3301      	adds	r3, #1
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b2e      	cmp	r3, #46	; 0x2e
 80014dc:	d1f5      	bne.n	80014ca <decodeRMC+0x2b6>
		j++;
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	3301      	adds	r3, #1
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe31 	bl	8000150 <strlen>
 80014ee:	4602      	mov	r2, r0
 80014f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	f107 0208 	add.w	r2, r7, #8
 80014fc:	4413      	add	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f9bc 	bl	800387c <atoi>
 8001504:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff7a 	bl	8000404 <__aeabi_i2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	69b8      	ldr	r0, [r7, #24]
 8001516:	f7fe ff75 	bl	8000404 <__aeabi_i2d>
 800151a:	4680      	mov	r8, r0
 800151c:	4689      	mov	r9, r1
 800151e:	69f8      	ldr	r0, [r7, #28]
 8001520:	f7fe ff70 	bl	8000404 <__aeabi_i2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0000 	mov.w	r0, #0
 800152c:	494e      	ldr	r1, [pc, #312]	; (8001668 <decodeRMC+0x454>)
 800152e:	f002 fa6b 	bl	8003a08 <pow>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4640      	mov	r0, r8
 8001538:	4649      	mov	r1, r9
 800153a:	f7ff f8f7 	bl	800072c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7fe fe11 	bl	800016c <__adddf3>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa71 	bl	8000a38 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	e003      	b.n	800156a <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <decodeRMC+0x450>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <decodeRMC+0x450>)
 8001572:	6013      	str	r3, [r2, #0]
	i=0;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	220c      	movs	r2, #12
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f002 f9a9 	bl	80038d8 <memset>
	while (RMCbuffer[inx] != ',')
 8001586:	e013      	b.n	80015b0 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <decodeRMC+0x450>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	7819      	ldrb	r1, [r3, #0]
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159a:	4413      	add	r3, r2
 800159c:	460a      	mov	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
		i++;
 80015a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a2:	3301      	adds	r3, #1
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <decodeRMC+0x450>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <decodeRMC+0x450>)
 80015ae:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <decodeRMC+0x450>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b2c      	cmp	r3, #44	; 0x2c
 80015be:	d1e3      	bne.n	8001588 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 f959 	bl	800387c <atoi>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <decodeRMC+0x458>)
 80015ce:	fb82 1203 	smull	r1, r2, r2, r3
 80015d2:	1312      	asrs	r2, r2, #12
 80015d4:	17db      	asrs	r3, r3, #31
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a25      	ldr	r2, [pc, #148]	; (8001670 <decodeRMC+0x45c>)
 80015da:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 f94b 	bl	800387c <atoi>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <decodeRMC+0x460>)
 80015ea:	fb82 1203 	smull	r1, r2, r2, r3
 80015ee:	1152      	asrs	r2, r2, #5
 80015f0:	17db      	asrs	r3, r3, #31
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <decodeRMC+0x460>)
 80015f6:	fb83 1302 	smull	r1, r3, r3, r2
 80015fa:	1159      	asrs	r1, r3, #5
 80015fc:	17d3      	asrs	r3, r2, #31
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	2164      	movs	r1, #100	; 0x64
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <decodeRMC+0x464>)
 800160a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4618      	mov	r0, r3
 8001612:	f002 f933 	bl	800387c <atoi>
 8001616:	4602      	mov	r2, r0
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <decodeRMC+0x460>)
 800161a:	fb83 1302 	smull	r1, r3, r3, r2
 800161e:	1159      	asrs	r1, r3, #5
 8001620:	17d3      	asrs	r3, r2, #31
 8001622:	1acb      	subs	r3, r1, r3
 8001624:	2164      	movs	r1, #100	; 0x64
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <decodeRMC+0x468>)
 800162e:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <decodeRMC+0x45c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <decodeRMC+0x46c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4413      	add	r3, r2
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <decodeRMC+0x45c>)
 800163c:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <decodeRMC+0x45c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <decodeRMC+0x464>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <decodeRMC+0x468>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	609a      	str	r2, [r3, #8]

	return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3740      	adds	r7, #64	; 0x40
 800165c:	46bd      	mov	sp, r7
 800165e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001662:	bf00      	nop
 8001664:	20000094 	.word	0x20000094
 8001668:	40240000 	.word	0x40240000
 800166c:	68db8bad 	.word	0x68db8bad
 8001670:	200000a0 	.word	0x200000a0
 8001674:	51eb851f 	.word	0x51eb851f
 8001678:	200000a4 	.word	0x200000a4
 800167c:	200000a8 	.word	0x200000a8
 8001680:	200000ac 	.word	0x200000ac

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f000 fc3e 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168c:	f000 f846 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 f8d4 	bl	800183c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001694:	f000 f87e 	bl	8001794 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001698:	f000 f8a6 	bl	80017e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 800169c:	f000 f9fe 	bl	8001a9c <Ringbuf_init>
  HAL_Delay(500);
 80016a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a4:	f000 fc92 	bl	8001fcc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Wait_for("GGA") == 1)
 80016a8:	4814      	ldr	r0, [pc, #80]	; (80016fc <main+0x78>)
 80016aa:	f000 fb21 	bl	8001cf0 <Wait_for>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <main+0x40>
	{
		Copy_upto("*", GGA);
 80016b4:	4912      	ldr	r1, [pc, #72]	; (8001700 <main+0x7c>)
 80016b6:	4813      	ldr	r0, [pc, #76]	; (8001704 <main+0x80>)
 80016b8:	f000 fa9a 	bl	8001bf0 <Copy_upto>
		decodeGGA(GGA, &gpsData.ggastruct);
 80016bc:	4912      	ldr	r1, [pc, #72]	; (8001708 <main+0x84>)
 80016be:	4810      	ldr	r0, [pc, #64]	; (8001700 <main+0x7c>)
 80016c0:	f7ff fa0a 	bl	8000ad8 <decodeGGA>
	}

	if(Wait_for("RMC") == 1)
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <main+0x88>)
 80016c6:	f000 fb13 	bl	8001cf0 <Wait_for>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <main+0x5c>
	{
	  Copy_upto("*", RMC);
 80016d0:	490f      	ldr	r1, [pc, #60]	; (8001710 <main+0x8c>)
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <main+0x80>)
 80016d4:	f000 fa8c 	bl	8001bf0 <Copy_upto>
	  decodeRMC(RMC, &gpsData.rmcstruct);
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <main+0x90>)
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <main+0x8c>)
 80016dc:	f7ff fd9a 	bl	8001214 <decodeRMC>
	}

	HAL_UART_Transmit(&huart1, GGA, 100, 0xFF);
 80016e0:	23ff      	movs	r3, #255	; 0xff
 80016e2:	2264      	movs	r2, #100	; 0x64
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <main+0x7c>)
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <main+0x94>)
 80016e8:	f001 fc3d 	bl	8002f66 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, RMC, 100, 0xFF);
 80016ec:	23ff      	movs	r3, #255	; 0xff
 80016ee:	2264      	movs	r2, #100	; 0x64
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <main+0x8c>)
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <main+0x94>)
 80016f4:	f001 fc37 	bl	8002f66 <HAL_UART_Transmit>
	if(Wait_for("GGA") == 1)
 80016f8:	e7d6      	b.n	80016a8 <main+0x24>
 80016fa:	bf00      	nop
 80016fc:	08004940 	.word	0x08004940
 8001700:	20000524 	.word	0x20000524
 8001704:	08004944 	.word	0x08004944
 8001708:	20000588 	.word	0x20000588
 800170c:	08004948 	.word	0x08004948
 8001710:	200004c0 	.word	0x200004c0
 8001714:	200005b4 	.word	0x200005b4
 8001718:	200005cc 	.word	0x200005cc

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b090      	sub	sp, #64	; 0x40
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	2228      	movs	r2, #40	; 0x28
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f002 f8d4 	bl	80038d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001742:	2301      	movs	r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001746:	2310      	movs	r3, #16
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800174a:	2300      	movs	r3, #0
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	4618      	mov	r0, r3
 8001754:	f000 ffa0 	bl	8002698 <HAL_RCC_OscConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800175e:	f000 f883 	bl	8001868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fa0c 	bl	8002b98 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001786:	f000 f86f 	bl	8001868 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3740      	adds	r7, #64	; 0x40
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART1_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017cc:	f001 fb7e 	bl	8002ecc <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f000 f847 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200005cc 	.word	0x200005cc
 80017e4:	40013800 	.word	0x40013800

080017e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <MX_USART2_UART_Init+0x50>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 80017f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001820:	f001 fb54 	bl	8002ecc <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182a:	f000 f81d 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000610 	.word	0x20000610
 8001838:	40004400 	.word	0x40004400

0800183c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_GPIO_Init+0x28>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <MX_GPIO_Init+0x28>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <MX_GPIO_Init+0x28>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_MspInit+0x5c>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_MspInit+0x5c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6193      	str	r3, [r2, #24]
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_MspInit+0x5c>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_MspInit+0x5c>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_MspInit+0x5c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_MspInit+0x5c>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_MspInit+0x60>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_MspInit+0x60>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <HAL_UART_MspInit+0x118>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d13a      	bne.n	800196e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a3d      	ldr	r2, [pc, #244]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 80018fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0318 	add.w	r3, r7, #24
 800193a:	4619      	mov	r1, r3
 800193c:	482e      	ldr	r0, [pc, #184]	; (80019f8 <HAL_UART_MspInit+0x120>)
 800193e:	f000 fd27 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	4619      	mov	r1, r3
 8001956:	4828      	ldr	r0, [pc, #160]	; (80019f8 <HAL_UART_MspInit+0x120>)
 8001958:	f000 fd1a 	bl	8002390 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2025      	movs	r0, #37	; 0x25
 8001962:	f000 fc2e 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001966:	2025      	movs	r0, #37	; 0x25
 8001968:	f000 fc47 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196c:	e03c      	b.n	80019e8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_UART_MspInit+0x124>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d137      	bne.n	80019e8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	61d3      	str	r3, [r2, #28]
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_UART_MspInit+0x11c>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a8:	2304      	movs	r3, #4
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	4619      	mov	r1, r3
 80019ba:	480f      	ldr	r0, [pc, #60]	; (80019f8 <HAL_UART_MspInit+0x120>)
 80019bc:	f000 fce8 	bl	8002390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c0:	2308      	movs	r3, #8
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	4619      	mov	r1, r3
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <HAL_UART_MspInit+0x120>)
 80019d4:	f000 fcdc 	bl	8002390 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2026      	movs	r0, #38	; 0x26
 80019de:	f000 fbf0 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019e2:	2026      	movs	r0, #38	; 0x26
 80019e4:	f000 fc09 	bl	80021fa <HAL_NVIC_EnableIRQ>
}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	40004400 	.word	0x40004400

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout > 0) timeout --;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SysTick_Handler+0x20>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <SysTick_Handler+0x18>
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Handler+0x20>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <SysTick_Handler+0x20>)
 8001a5a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 fa9a 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000065c 	.word	0x2000065c

08001a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart2);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <USART1_IRQHandler+0x10>)
 8001a6e:	f000 f9c7 	bl	8001e00 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000610 	.word	0x20000610

08001a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <USART2_IRQHandler+0x10>)
 8001a82:	f001 fb03 	bl	800308c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000610 	.word	0x20000610

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <Ringbuf_init+0x38>)
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <Ringbuf_init+0x3c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <Ringbuf_init+0x40>)
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <Ringbuf_init+0x44>)
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <Ringbuf_init+0x48>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <Ringbuf_init+0x48>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <Ringbuf_init+0x48>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <Ringbuf_init+0x48>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0220 	orr.w	r2, r2, #32
 8001aca:	60da      	str	r2, [r3, #12]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000658 	.word	0x20000658
 8001ad8:	200000b0 	.word	0x200000b0
 8001adc:	20000654 	.word	0x20000654
 8001ae0:	200002b8 	.word	0x200002b8
 8001ae4:	20000610 	.word	0x20000610

08001ae8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001afa:	3301      	adds	r3, #1
 8001afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b00:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d009      	beq.n	8001b22 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	79f9      	ldrb	r1, [r7, #7]
 8001b18:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <Uart_read+0x54>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <Uart_read+0x54>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d102      	bne.n	8001b4c <Uart_read+0x20>
  {
    return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e013      	b.n	8001b74 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <Uart_read+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <Uart_read+0x54>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <Uart_read+0x54>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <Uart_read+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000658 	.word	0x20000658

08001b84 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <IsDataAvailable+0x30>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <IsDataAvailable+0x30>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000658 	.word	0x20000658

08001bb8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <Uart_peek+0x34>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <Uart_peek+0x34>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d102      	bne.n	8001bd6 <Uart_peek+0x1e>
  {
    return -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e006      	b.n	8001be4 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <Uart_peek+0x34>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <Uart_peek+0x34>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000658 	.word	0x20000658

08001bf0 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe faa6 	bl	8000150 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001c0c:	e01e      	b.n	8001c4c <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <Copy_upto+0xf8>)
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <Copy_upto+0xf8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	6838      	ldr	r0, [r7, #0]
 8001c1e:	4403      	add	r3, r0
 8001c20:	5c8a      	ldrb	r2, [r1, r2]
 8001c22:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c24:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <Copy_upto+0xf8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <Copy_upto+0xf8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001c40:	bf00      	nop
 8001c42:	f7ff ff9f 	bl	8001b84 <IsDataAvailable>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0fa      	beq.n	8001c42 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001c4c:	f7ff ffb4 	bl	8001bb8 <Uart_peek>
 8001c50:	4601      	mov	r1, r0
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4299      	cmp	r1, r3
 8001c5c:	d1d7      	bne.n	8001c0e <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001c5e:	e027      	b.n	8001cb0 <Copy_upto+0xc0>
	{
		so_far++;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001c66:	f7ff ff61 	bl	8001b2c <Uart_read>
 8001c6a:	4601      	mov	r1, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	613a      	str	r2, [r7, #16]
 8001c72:	461a      	mov	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	b2ca      	uxtb	r2, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d101      	bne.n	8001c88 <Copy_upto+0x98>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02a      	b.n	8001cde <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <Copy_upto+0xfc>)
 8001c8a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c8e:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001c90:	bf00      	nop
 8001c92:	f7ff ff77 	bl	8001b84 <IsDataAvailable>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <Copy_upto+0xb4>
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <Copy_upto+0xfc>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f6      	bne.n	8001c92 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <Copy_upto+0xfc>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <Copy_upto+0xc0>
 8001cac:	2300      	movs	r3, #0
 8001cae:	e016      	b.n	8001cde <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8001cb0:	f7ff ff82 	bl	8001bb8 <Uart_peek>
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4299      	cmp	r1, r3
 8001cc0:	d0ce      	beq.n	8001c60 <Copy_upto+0x70>
	}

	if (so_far != len)
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d002      	beq.n	8001cd0 <Copy_upto+0xe0>
	{
		so_far = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
		goto again;
 8001cce:	e79d      	b.n	8001c0c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d101      	bne.n	8001cdc <Copy_upto+0xec>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <Copy_upto+0xee>
	else return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000658 	.word	0x20000658
 8001cec:	2000065c 	.word	0x2000065c

08001cf0 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7fe fa27 	bl	8000150 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <Wait_for+0x108>)
 8001d08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d0c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001d0e:	bf00      	nop
 8001d10:	f7ff ff38 	bl	8001b84 <IsDataAvailable>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <Wait_for+0x32>
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <Wait_for+0x108>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f6      	bne.n	8001d10 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001d22:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <Wait_for+0x108>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d119      	bne.n	8001d5e <Wait_for+0x6e>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e060      	b.n	8001df0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <Wait_for+0x10c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <Wait_for+0x10c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d00b      	beq.n	8001d5a <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <Wait_for+0x10c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <Wait_for+0x10c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d58:	e001      	b.n	8001d5e <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e048      	b.n	8001df0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001d5e:	f7ff ff2b 	bl	8001bb8 <Uart_peek>
 8001d62:	4601      	mov	r1, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4299      	cmp	r1, r3
 8001d6e:	d1de      	bne.n	8001d2e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001d70:	e027      	b.n	8001dc2 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <Wait_for+0x10c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <Wait_for+0x10c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d101      	bne.n	8001d9a <Wait_for+0xaa>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e02a      	b.n	8001df0 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <Wait_for+0x108>)
 8001d9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001da0:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001da2:	bf00      	nop
 8001da4:	f7ff feee 	bl	8001b84 <IsDataAvailable>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <Wait_for+0xc6>
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <Wait_for+0x108>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f6      	bne.n	8001da4 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <Wait_for+0x108>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <Wait_for+0xd2>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e016      	b.n	8001df0 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001dc2:	f7ff fef9 	bl	8001bb8 <Uart_peek>
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4299      	cmp	r1, r3
 8001dd2:	d0ce      	beq.n	8001d72 <Wait_for+0x82>
	}

	if (so_far != len)
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d002      	beq.n	8001de2 <Wait_for+0xf2>
	{
		so_far = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
		goto again;
 8001de0:	e791      	b.n	8001d06 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d101      	bne.n	8001dee <Wait_for+0xfe>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <Wait_for+0x100>
	else return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000065c 	.word	0x2000065c
 8001dfc:	20000658 	.word	0x20000658

08001e00 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d013      	beq.n	8001e4a <Uart_isr+0x4a>
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <Uart_isr+0xb4>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fe50 	bl	8001ae8 <store_char>
        return;
 8001e48:	e031      	b.n	8001eae <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02c      	beq.n	8001eae <Uart_isr+0xae>
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d027      	beq.n	8001eae <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <Uart_isr+0xb8>)
 8001e60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <Uart_isr+0xb8>)
 8001e66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d108      	bne.n	8001e80 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e7c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001e7e:	e015      	b.n	8001eac <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <Uart_isr+0xb8>)
 8001e82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <Uart_isr+0xb8>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <Uart_isr+0xb8>)
 8001e8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <Uart_isr+0xb8>)
 8001e9a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	7bba      	ldrb	r2, [r7, #14]
 8001eaa:	605a      	str	r2, [r3, #4]
    	return;
 8001eac:	bf00      	nop
    }
}
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000658 	.word	0x20000658
 8001eb8:	200002b8 	.word	0x200002b8

08001ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	; (8001ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	; (8001f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ee2:	f7ff fdd5 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f001 fcd3 	bl	8003890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eea:	f7ff fbcb 	bl	8001684 <main>
  bx lr
 8001eee:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ef8:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8001efc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f00:	20000664 	.word	0x20000664

08001f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_2_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x28>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 f947 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fca6 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f95f 	bl	8002216 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 f927 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	20000008 	.word	0x20000008

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	2000000c 	.word	0x2000000c
 8001fb4:	20000660 	.word	0x20000660

08001fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000660 	.word	0x20000660

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffe0 	bl	8001fb8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000000c 	.word	0x2000000c

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4906      	ldr	r1, [pc, #24]	; (80020ac <__NVIC_EnableIRQ+0x34>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff90 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff2d 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff42 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff90 	bl	8002104 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5f 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff35 	bl	8002078 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffa2 	bl	8002168 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002240:	2b02      	cmp	r3, #2
 8002242:	d008      	beq.n	8002256 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2204      	movs	r2, #4
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e020      	b.n	8002298 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 020e 	bic.w	r2, r2, #14
 8002264:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	2101      	movs	r1, #1
 8002280:	fa01 f202 	lsl.w	r2, r1, r2
 8002284:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d005      	beq.n	80022c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e051      	b.n	800236a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 020e 	bic.w	r2, r2, #14
 80022d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a22      	ldr	r2, [pc, #136]	; (8002374 <HAL_DMA_Abort_IT+0xd0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d029      	beq.n	8002344 <HAL_DMA_Abort_IT+0xa0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_DMA_Abort_IT+0xd4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d022      	beq.n	8002340 <HAL_DMA_Abort_IT+0x9c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_DMA_Abort_IT+0xd8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d01a      	beq.n	800233a <HAL_DMA_Abort_IT+0x96>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <HAL_DMA_Abort_IT+0xdc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d012      	beq.n	8002334 <HAL_DMA_Abort_IT+0x90>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_DMA_Abort_IT+0xe0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00a      	beq.n	800232e <HAL_DMA_Abort_IT+0x8a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_DMA_Abort_IT+0xe4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d102      	bne.n	8002328 <HAL_DMA_Abort_IT+0x84>
 8002322:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002326:	e00e      	b.n	8002346 <HAL_DMA_Abort_IT+0xa2>
 8002328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232c:	e00b      	b.n	8002346 <HAL_DMA_Abort_IT+0xa2>
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	e008      	b.n	8002346 <HAL_DMA_Abort_IT+0xa2>
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	e005      	b.n	8002346 <HAL_DMA_Abort_IT+0xa2>
 800233a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233e:	e002      	b.n	8002346 <HAL_DMA_Abort_IT+0xa2>
 8002340:	2310      	movs	r3, #16
 8002342:	e000      	b.n	8002346 <HAL_DMA_Abort_IT+0xa2>
 8002344:	2301      	movs	r3, #1
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_DMA_Abort_IT+0xe8>)
 8002348:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
    } 
  }
  return status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40020008 	.word	0x40020008
 8002378:	4002001c 	.word	0x4002001c
 800237c:	40020030 	.word	0x40020030
 8002380:	40020044 	.word	0x40020044
 8002384:	40020058 	.word	0x40020058
 8002388:	4002006c 	.word	0x4002006c
 800238c:	40020000 	.word	0x40020000

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b08b      	sub	sp, #44	; 0x2c
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a2:	e169      	b.n	8002678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023a4:	2201      	movs	r2, #1
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 8158 	bne.w	8002672 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a9a      	ldr	r2, [pc, #616]	; (8002630 <HAL_GPIO_Init+0x2a0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d05e      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023cc:	4a98      	ldr	r2, [pc, #608]	; (8002630 <HAL_GPIO_Init+0x2a0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d875      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023d2:	4a98      	ldr	r2, [pc, #608]	; (8002634 <HAL_GPIO_Init+0x2a4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d058      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023d8:	4a96      	ldr	r2, [pc, #600]	; (8002634 <HAL_GPIO_Init+0x2a4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d86f      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023de:	4a96      	ldr	r2, [pc, #600]	; (8002638 <HAL_GPIO_Init+0x2a8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d052      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023e4:	4a94      	ldr	r2, [pc, #592]	; (8002638 <HAL_GPIO_Init+0x2a8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d869      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023ea:	4a94      	ldr	r2, [pc, #592]	; (800263c <HAL_GPIO_Init+0x2ac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d04c      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023f0:	4a92      	ldr	r2, [pc, #584]	; (800263c <HAL_GPIO_Init+0x2ac>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d863      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023f6:	4a92      	ldr	r2, [pc, #584]	; (8002640 <HAL_GPIO_Init+0x2b0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d046      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023fc:	4a90      	ldr	r2, [pc, #576]	; (8002640 <HAL_GPIO_Init+0x2b0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d85d      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 8002402:	2b12      	cmp	r3, #18
 8002404:	d82a      	bhi.n	800245c <HAL_GPIO_Init+0xcc>
 8002406:	2b12      	cmp	r3, #18
 8002408:	d859      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_GPIO_Init+0x80>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	0800248b 	.word	0x0800248b
 8002414:	08002465 	.word	0x08002465
 8002418:	08002477 	.word	0x08002477
 800241c:	080024b9 	.word	0x080024b9
 8002420:	080024bf 	.word	0x080024bf
 8002424:	080024bf 	.word	0x080024bf
 8002428:	080024bf 	.word	0x080024bf
 800242c:	080024bf 	.word	0x080024bf
 8002430:	080024bf 	.word	0x080024bf
 8002434:	080024bf 	.word	0x080024bf
 8002438:	080024bf 	.word	0x080024bf
 800243c:	080024bf 	.word	0x080024bf
 8002440:	080024bf 	.word	0x080024bf
 8002444:	080024bf 	.word	0x080024bf
 8002448:	080024bf 	.word	0x080024bf
 800244c:	080024bf 	.word	0x080024bf
 8002450:	080024bf 	.word	0x080024bf
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002481 	.word	0x08002481
 800245c:	4a79      	ldr	r2, [pc, #484]	; (8002644 <HAL_GPIO_Init+0x2b4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002462:	e02c      	b.n	80024be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e029      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	3304      	adds	r3, #4
 8002472:	623b      	str	r3, [r7, #32]
          break;
 8002474:	e024      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	3308      	adds	r3, #8
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e01f      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	330c      	adds	r3, #12
 8002486:	623b      	str	r3, [r7, #32]
          break;
 8002488:	e01a      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002492:	2304      	movs	r3, #4
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e013      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a0:	2308      	movs	r3, #8
 80024a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	611a      	str	r2, [r3, #16]
          break;
 80024aa:	e009      	b.n	80024c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ac:	2308      	movs	r3, #8
 80024ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	615a      	str	r2, [r3, #20]
          break;
 80024b6:	e003      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
          break;
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          break;
 80024be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d801      	bhi.n	80024ca <HAL_GPIO_Init+0x13a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	e001      	b.n	80024ce <HAL_GPIO_Init+0x13e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d802      	bhi.n	80024dc <HAL_GPIO_Init+0x14c>
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_Init+0x152>
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	3b08      	subs	r3, #8
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	210f      	movs	r1, #15
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	6a39      	ldr	r1, [r7, #32]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80b1 	beq.w	8002672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002528:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_GPIO_Init+0x2bc>)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a40      	ldr	r2, [pc, #256]	; (8002650 <HAL_GPIO_Init+0x2c0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d013      	beq.n	800257c <HAL_GPIO_Init+0x1ec>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a3f      	ldr	r2, [pc, #252]	; (8002654 <HAL_GPIO_Init+0x2c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00d      	beq.n	8002578 <HAL_GPIO_Init+0x1e8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a3e      	ldr	r2, [pc, #248]	; (8002658 <HAL_GPIO_Init+0x2c8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d007      	beq.n	8002574 <HAL_GPIO_Init+0x1e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3d      	ldr	r2, [pc, #244]	; (800265c <HAL_GPIO_Init+0x2cc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d101      	bne.n	8002570 <HAL_GPIO_Init+0x1e0>
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002570:	2304      	movs	r3, #4
 8002572:	e004      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002574:	2302      	movs	r3, #2
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 800257c:	2300      	movs	r3, #0
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	f002 0203 	and.w	r2, r2, #3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4093      	lsls	r3, r2
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800258e:	492f      	ldr	r1, [pc, #188]	; (800264c <HAL_GPIO_Init+0x2bc>)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	492c      	ldr	r1, [pc, #176]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	43db      	mvns	r3, r3
 80025be:	4928      	ldr	r1, [pc, #160]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	4922      	ldr	r1, [pc, #136]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	491e      	ldr	r1, [pc, #120]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	43db      	mvns	r3, r3
 800260e:	4914      	ldr	r1, [pc, #80]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002610:	4013      	ands	r3, r2
 8002612:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d021      	beq.n	8002664 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	60cb      	str	r3, [r1, #12]
 800262c:	e021      	b.n	8002672 <HAL_GPIO_Init+0x2e2>
 800262e:	bf00      	nop
 8002630:	10320000 	.word	0x10320000
 8002634:	10310000 	.word	0x10310000
 8002638:	10220000 	.word	0x10220000
 800263c:	10210000 	.word	0x10210000
 8002640:	10120000 	.word	0x10120000
 8002644:	10110000 	.word	0x10110000
 8002648:	40021000 	.word	0x40021000
 800264c:	40010000 	.word	0x40010000
 8002650:	40010800 	.word	0x40010800
 8002654:	40010c00 	.word	0x40010c00
 8002658:	40011000 	.word	0x40011000
 800265c:	40011400 	.word	0x40011400
 8002660:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	43db      	mvns	r3, r3
 800266c:	4909      	ldr	r1, [pc, #36]	; (8002694 <HAL_GPIO_Init+0x304>)
 800266e:	4013      	ands	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	3301      	adds	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f47f ae8e 	bne.w	80023a4 <HAL_GPIO_Init+0x14>
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	372c      	adds	r7, #44	; 0x2c
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e26c      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8087 	beq.w	80027c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b8:	4b92      	ldr	r3, [pc, #584]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d00c      	beq.n	80026de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026c4:	4b8f      	ldr	r3, [pc, #572]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d112      	bne.n	80026f6 <HAL_RCC_OscConfig+0x5e>
 80026d0:	4b8c      	ldr	r3, [pc, #560]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d10b      	bne.n	80026f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026de:	4b89      	ldr	r3, [pc, #548]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d06c      	beq.n	80027c4 <HAL_RCC_OscConfig+0x12c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d168      	bne.n	80027c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e246      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x76>
 8002700:	4b80      	ldr	r3, [pc, #512]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a7f      	ldr	r2, [pc, #508]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e02e      	b.n	800276c <HAL_RCC_OscConfig+0xd4>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x98>
 8002716:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7a      	ldr	r2, [pc, #488]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 800271c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b78      	ldr	r3, [pc, #480]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e01d      	b.n	800276c <HAL_RCC_OscConfig+0xd4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0xbc>
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a71      	ldr	r2, [pc, #452]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6e      	ldr	r2, [pc, #440]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0xd4>
 8002754:	4b6b      	ldr	r3, [pc, #428]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a6a      	ldr	r2, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b68      	ldr	r3, [pc, #416]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a67      	ldr	r2, [pc, #412]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800276a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff fc20 	bl	8001fb8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff fc1c 	bl	8001fb8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e1fa      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0xe4>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fc0c 	bl	8001fb8 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff fc08 	bl	8001fb8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1e6      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x10c>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d063      	beq.n	800289a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d2:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d11c      	bne.n	8002824 <HAL_RCC_OscConfig+0x18c>
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_RCC_OscConfig+0x176>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1ba      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4939      	ldr	r1, [pc, #228]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	e03a      	b.n	800289a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282c:	4b36      	ldr	r3, [pc, #216]	; (8002908 <HAL_RCC_OscConfig+0x270>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fbc1 	bl	8001fb8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283a:	f7ff fbbd 	bl	8001fb8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e19b      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4927      	ldr	r1, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e015      	b.n	800289a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_RCC_OscConfig+0x270>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fba0 	bl	8001fb8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287c:	f7ff fb9c 	bl	8001fb8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e17a      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03a      	beq.n	800291c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d019      	beq.n	80028e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7ff fb80 	bl	8001fb8 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028bc:	f7ff fb7c 	bl	8001fb8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e15a      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028da:	2001      	movs	r0, #1
 80028dc:	f000 fad8 	bl	8002e90 <RCC_Delay>
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7ff fb66 	bl	8001fb8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ee:	e00f      	b.n	8002910 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7ff fb62 	bl	8001fb8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d908      	bls.n	8002910 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e140      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	42420000 	.word	0x42420000
 800290c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e9      	bne.n	80028f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a6 	beq.w	8002a76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4b97      	ldr	r3, [pc, #604]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b94      	ldr	r3, [pc, #592]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a93      	ldr	r2, [pc, #588]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	61d3      	str	r3, [r2, #28]
 8002946:	4b91      	ldr	r3, [pc, #580]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	4b8e      	ldr	r3, [pc, #568]	; (8002b90 <HAL_RCC_OscConfig+0x4f8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002962:	4b8b      	ldr	r3, [pc, #556]	; (8002b90 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a8a      	ldr	r2, [pc, #552]	; (8002b90 <HAL_RCC_OscConfig+0x4f8>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7ff fb23 	bl	8001fb8 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7ff fb1f 	bl	8001fb8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	; 0x64
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0fd      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x4f8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x312>
 800299c:	4b7b      	ldr	r3, [pc, #492]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a7a      	ldr	r2, [pc, #488]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	e02d      	b.n	8002a06 <HAL_RCC_OscConfig+0x36e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x334>
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a75      	ldr	r2, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4a72      	ldr	r2, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6213      	str	r3, [r2, #32]
 80029ca:	e01c      	b.n	8002a06 <HAL_RCC_OscConfig+0x36e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d10c      	bne.n	80029ee <HAL_RCC_OscConfig+0x356>
 80029d4:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	4a6c      	ldr	r2, [pc, #432]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6213      	str	r3, [r2, #32]
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a69      	ldr	r2, [pc, #420]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e00b      	b.n	8002a06 <HAL_RCC_OscConfig+0x36e>
 80029ee:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a66      	ldr	r2, [pc, #408]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	4b64      	ldr	r3, [pc, #400]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a63      	ldr	r2, [pc, #396]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d015      	beq.n	8002a3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7ff fad3 	bl	8001fb8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7ff facf 	bl	8001fb8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0ab      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ee      	beq.n	8002a16 <HAL_RCC_OscConfig+0x37e>
 8002a38:	e014      	b.n	8002a64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fabd 	bl	8001fb8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7ff fab9 	bl	8001fb8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e095      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ee      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a47      	ldr	r2, [pc, #284]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8081 	beq.w	8002b82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d061      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d146      	bne.n	8002b22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <HAL_RCC_OscConfig+0x4fc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7ff fa8d 	bl	8001fb8 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7ff fa89 	bl	8001fb8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e067      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d108      	bne.n	8002adc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aca:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	492d      	ldr	r1, [pc, #180]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a19      	ldr	r1, [r3, #32]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	430b      	orrs	r3, r1
 8002aee:	4927      	ldr	r1, [pc, #156]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_OscConfig+0x4fc>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7ff fa5d 	bl	8001fb8 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b02:	f7ff fa59 	bl	8001fb8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e037      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x46a>
 8002b20:	e02f      	b.n	8002b82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <HAL_RCC_OscConfig+0x4fc>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fa46 	bl	8001fb8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7ff fa42 	bl	8001fb8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e020      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x498>
 8002b4e:	e018      	b.n	8002b82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e013      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42420060 	.word	0x42420060

08002b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0d0      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d910      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4965      	ldr	r1, [pc, #404]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0b8      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	494d      	ldr	r1, [pc, #308]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d040      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d115      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e07f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e073      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06b      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4936      	ldr	r1, [pc, #216]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7ff f996 	bl	8001fb8 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7ff f992 	bl	8001fb8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e053      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d210      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 0207 	bic.w	r2, r3, #7
 8002cce:	4922      	ldr	r1, [pc, #136]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e032      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4916      	ldr	r1, [pc, #88]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	490e      	ldr	r1, [pc, #56]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d26:	f000 f821 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	490a      	ldr	r1, [pc, #40]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	5ccb      	ldrb	r3, [r1, r3]
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x1cc>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f8f4 	bl	8001f34 <HAL_InitTick>

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	0800495c 	.word	0x0800495c
 8002d64:	20000004 	.word	0x20000004
 8002d68:	20000008 	.word	0x20000008

08002d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	b490      	push	{r4, r7}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d72:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d74:	1d3c      	adds	r4, r7, #4
 8002d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d7c:	f240 2301 	movw	r3, #513	; 0x201
 8002d80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d002      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x40>
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d003      	beq.n	8002db2 <HAL_RCC_GetSysClockFreq+0x46>
 8002daa:	e02d      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dae:	623b      	str	r3, [r7, #32]
      break;
 8002db0:	e02d      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	0c9b      	lsrs	r3, r3, #18
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0c5b      	lsrs	r3, r3, #17
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dde:	4413      	add	r3, r2
 8002de0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002de4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dea:	fb02 f203 	mul.w	r2, r2, r3
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
 8002df6:	e004      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	623b      	str	r3, [r7, #32]
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e0a:	623b      	str	r3, [r7, #32]
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc90      	pop	{r4, r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	0800494c 	.word	0x0800494c
 8002e20:	40021000 	.word	0x40021000
 8002e24:	007a1200 	.word	0x007a1200
 8002e28:	003d0900 	.word	0x003d0900

08002e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e44:	f7ff fff2 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	0800496c 	.word	0x0800496c

08002e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e6c:	f7ff ffde 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	0adb      	lsrs	r3, r3, #11
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	0800496c 	.word	0x0800496c

08002e90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <RCC_Delay+0x34>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <RCC_Delay+0x38>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0a5b      	lsrs	r3, r3, #9
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eac:	bf00      	nop
  }
  while (Delay --);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f9      	bne.n	8002eac <RCC_Delay+0x1c>
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e03f      	b.n	8002f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fcf0 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fc25 	bl	8003760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b08a      	sub	sp, #40	; 0x28
 8002f6a:	af02      	add	r7, sp, #8
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d17c      	bne.n	8003080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_UART_Transmit+0x2c>
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e075      	b.n	8003082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Transmit+0x3e>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e06e      	b.n	8003082 <HAL_UART_Transmit+0x11c>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	; 0x21
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fba:	f7fe fffd 	bl	8001fb8 <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_UART_Transmit+0x82>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e003      	b.n	8002ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ff8:	e02a      	b.n	8003050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fa11 	bl	800342c <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e036      	b.n	8003082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3302      	adds	r3, #2
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	e007      	b.n	8003042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cf      	bne.n	8002ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f9e1 	bl	800342c <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e006      	b.n	8003082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10d      	bne.n	80030de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x52>
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa99 	bl	800360e <UART_Receive_IT>
      return;
 80030dc:	e17b      	b.n	80033d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80b1 	beq.w	8003248 <HAL_UART_IRQHandler+0x1bc>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_UART_IRQHandler+0x70>
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80a6 	beq.w	8003248 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_UART_IRQHandler+0x90>
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_UART_IRQHandler+0xb0>
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0202 	orr.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_UART_IRQHandler+0xd0>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00f      	beq.n	8003186 <HAL_UART_IRQHandler+0xfa>
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_UART_IRQHandler+0xee>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0208 	orr.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 811e 	beq.w	80033cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_UART_IRQHandler+0x11e>
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fa32 	bl	800360e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <HAL_UART_IRQHandler+0x146>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d031      	beq.n	8003236 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f974 	bl	80034c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d023      	beq.n	800322e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d013      	beq.n	8003226 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	4a76      	ldr	r2, [pc, #472]	; (80033dc <HAL_UART_IRQHandler+0x350>)
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff f84a 	bl	80022a4 <HAL_DMA_Abort_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00e      	b.n	8003244 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8ec 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e00a      	b.n	8003244 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8e8 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e006      	b.n	8003244 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8e4 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003242:	e0c3      	b.n	80033cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	bf00      	nop
    return;
 8003246:	e0c1      	b.n	80033cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 80a1 	bne.w	8003394 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 809b 	beq.w	8003394 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8095 	beq.w	8003394 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04e      	beq.n	800332c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003298:	8a3b      	ldrh	r3, [r7, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8098 	beq.w	80033d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a4:	8a3a      	ldrh	r2, [r7, #16]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	f080 8092 	bcs.w	80033d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8a3a      	ldrh	r2, [r7, #16]
 80032b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d02b      	beq.n	8003314 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0210 	bic.w	r2, r2, #16
 8003308:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ff8d 	bl	800222e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331c:	b29b      	uxth	r3, r3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f876 	bl	8003416 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800332a:	e051      	b.n	80033d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003334:	b29b      	uxth	r3, r3
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d047      	beq.n	80033d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003344:	8a7b      	ldrh	r3, [r7, #18]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d044      	beq.n	80033d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003358:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0210 	bic.w	r2, r2, #16
 8003386:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003388:	8a7b      	ldrh	r3, [r7, #18]
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f842 	bl	8003416 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003392:	e01f      	b.n	80033d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_UART_IRQHandler+0x324>
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8c9 	bl	8003540 <UART_Transmit_IT>
    return;
 80033ae:	e012      	b.n	80033d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_UART_IRQHandler+0x34a>
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f90a 	bl	80035de <UART_EndTransmit_IT>
    return;
 80033ca:	e004      	b.n	80033d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80033cc:	bf00      	nop
 80033ce:	e002      	b.n	80033d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80033d4:	bf00      	nop
  }
}
 80033d6:	3728      	adds	r7, #40	; 0x28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	08003519 	.word	0x08003519

080033e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343c:	e02c      	b.n	8003498 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d028      	beq.n	8003498 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <UART_WaitOnFlagUntilTimeout+0x30>
 800344c:	f7fe fdb4 	bl	8001fb8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	429a      	cmp	r2, r3
 800345a:	d21d      	bcs.n	8003498 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800346a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e00f      	b.n	80034b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d0c3      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff66 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b21      	cmp	r3, #33	; 0x21
 8003552:	d13e      	bne.n	80035d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d114      	bne.n	8003588 <UART_Transmit_IT+0x48>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d110      	bne.n	8003588 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800357a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	621a      	str	r2, [r3, #32]
 8003586:	e008      	b.n	800359a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	1c59      	adds	r1, r3, #1
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6211      	str	r1, [r2, #32]
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4619      	mov	r1, r3
 80035a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff feee 	bl	80033e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b22      	cmp	r3, #34	; 0x22
 8003620:	f040 8099 	bne.w	8003756 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d117      	bne.n	800365e <UART_Receive_IT+0x50>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d113      	bne.n	800365e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364c:	b29a      	uxth	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	1c9a      	adds	r2, r3, #2
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
 800365c:	e026      	b.n	80036ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d007      	beq.n	8003682 <UART_Receive_IT+0x74>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <UART_Receive_IT+0x82>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e008      	b.n	80036a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369c:	b2da      	uxtb	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d148      	bne.n	8003752 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0220 	bic.w	r2, r2, #32
 80036ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d123      	bne.n	8003748 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0210 	bic.w	r2, r2, #16
 8003714:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d10a      	bne.n	800373a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fe68 	bl	8003416 <HAL_UARTEx_RxEventCallback>
 8003746:	e002      	b.n	800374e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fe52 	bl	80033f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e002      	b.n	8003758 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800379a:	f023 030c 	bic.w	r3, r3, #12
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	; (8003874 <UART_SetConfig+0x114>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d103      	bne.n	80037d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037c8:	f7ff fb4e 	bl	8002e68 <HAL_RCC_GetPCLK2Freq>
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	e002      	b.n	80037d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7ff fb36 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80037d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009a      	lsls	r2, r3, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <UART_SetConfig+0x118>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	0119      	lsls	r1, r3, #4
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009a      	lsls	r2, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fbb2 f2f3 	udiv	r2, r2, r3
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <UART_SetConfig+0x118>)
 800380e:	fba3 0302 	umull	r0, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2064      	movs	r0, #100	; 0x64
 8003816:	fb00 f303 	mul.w	r3, r0, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	3332      	adds	r3, #50	; 0x32
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <UART_SetConfig+0x118>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382c:	4419      	add	r1, r3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009a      	lsls	r2, r3, #2
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fbb2 f2f3 	udiv	r2, r2, r3
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <UART_SetConfig+0x118>)
 8003846:	fba3 0302 	umull	r0, r3, r3, r2
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2064      	movs	r0, #100	; 0x64
 800384e:	fb00 f303 	mul.w	r3, r0, r3
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	3332      	adds	r3, #50	; 0x32
 8003858:	4a07      	ldr	r2, [pc, #28]	; (8003878 <UART_SetConfig+0x118>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	f003 020f 	and.w	r2, r3, #15
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	440a      	add	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40013800 	.word	0x40013800
 8003878:	51eb851f 	.word	0x51eb851f

0800387c <atoi>:
 800387c:	220a      	movs	r2, #10
 800387e:	2100      	movs	r1, #0
 8003880:	f000 b8b8 	b.w	80039f4 <strtol>

08003884 <__errno>:
 8003884:	4b01      	ldr	r3, [pc, #4]	; (800388c <__errno+0x8>)
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000010 	.word	0x20000010

08003890 <__libc_init_array>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	2600      	movs	r6, #0
 8003894:	4d0c      	ldr	r5, [pc, #48]	; (80038c8 <__libc_init_array+0x38>)
 8003896:	4c0d      	ldr	r4, [pc, #52]	; (80038cc <__libc_init_array+0x3c>)
 8003898:	1b64      	subs	r4, r4, r5
 800389a:	10a4      	asrs	r4, r4, #2
 800389c:	42a6      	cmp	r6, r4
 800389e:	d109      	bne.n	80038b4 <__libc_init_array+0x24>
 80038a0:	f001 f840 	bl	8004924 <_init>
 80038a4:	2600      	movs	r6, #0
 80038a6:	4d0a      	ldr	r5, [pc, #40]	; (80038d0 <__libc_init_array+0x40>)
 80038a8:	4c0a      	ldr	r4, [pc, #40]	; (80038d4 <__libc_init_array+0x44>)
 80038aa:	1b64      	subs	r4, r4, r5
 80038ac:	10a4      	asrs	r4, r4, #2
 80038ae:	42a6      	cmp	r6, r4
 80038b0:	d105      	bne.n	80038be <__libc_init_array+0x2e>
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b8:	4798      	blx	r3
 80038ba:	3601      	adds	r6, #1
 80038bc:	e7ee      	b.n	800389c <__libc_init_array+0xc>
 80038be:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c2:	4798      	blx	r3
 80038c4:	3601      	adds	r6, #1
 80038c6:	e7f2      	b.n	80038ae <__libc_init_array+0x1e>
 80038c8:	08004ab8 	.word	0x08004ab8
 80038cc:	08004ab8 	.word	0x08004ab8
 80038d0:	08004ab8 	.word	0x08004ab8
 80038d4:	08004abc 	.word	0x08004abc

080038d8 <memset>:
 80038d8:	4603      	mov	r3, r0
 80038da:	4402      	add	r2, r0
 80038dc:	4293      	cmp	r3, r2
 80038de:	d100      	bne.n	80038e2 <memset+0xa>
 80038e0:	4770      	bx	lr
 80038e2:	f803 1b01 	strb.w	r1, [r3], #1
 80038e6:	e7f9      	b.n	80038dc <memset+0x4>

080038e8 <_strtol_l.isra.0>:
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ee:	4686      	mov	lr, r0
 80038f0:	d001      	beq.n	80038f6 <_strtol_l.isra.0+0xe>
 80038f2:	2b24      	cmp	r3, #36	; 0x24
 80038f4:	d906      	bls.n	8003904 <_strtol_l.isra.0+0x1c>
 80038f6:	f7ff ffc5 	bl	8003884 <__errno>
 80038fa:	2316      	movs	r3, #22
 80038fc:	6003      	str	r3, [r0, #0]
 80038fe:	2000      	movs	r0, #0
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	468c      	mov	ip, r1
 8003906:	4e3a      	ldr	r6, [pc, #232]	; (80039f0 <_strtol_l.isra.0+0x108>)
 8003908:	4660      	mov	r0, ip
 800390a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800390e:	5da5      	ldrb	r5, [r4, r6]
 8003910:	f015 0508 	ands.w	r5, r5, #8
 8003914:	d1f8      	bne.n	8003908 <_strtol_l.isra.0+0x20>
 8003916:	2c2d      	cmp	r4, #45	; 0x2d
 8003918:	d133      	bne.n	8003982 <_strtol_l.isra.0+0x9a>
 800391a:	f04f 0801 	mov.w	r8, #1
 800391e:	f89c 4000 	ldrb.w	r4, [ip]
 8003922:	f100 0c02 	add.w	ip, r0, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d05d      	beq.n	80039e6 <_strtol_l.isra.0+0xfe>
 800392a:	2b10      	cmp	r3, #16
 800392c:	d10c      	bne.n	8003948 <_strtol_l.isra.0+0x60>
 800392e:	2c30      	cmp	r4, #48	; 0x30
 8003930:	d10a      	bne.n	8003948 <_strtol_l.isra.0+0x60>
 8003932:	f89c 0000 	ldrb.w	r0, [ip]
 8003936:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800393a:	2858      	cmp	r0, #88	; 0x58
 800393c:	d14e      	bne.n	80039dc <_strtol_l.isra.0+0xf4>
 800393e:	2310      	movs	r3, #16
 8003940:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003944:	f10c 0c02 	add.w	ip, ip, #2
 8003948:	2500      	movs	r5, #0
 800394a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800394e:	3f01      	subs	r7, #1
 8003950:	fbb7 f9f3 	udiv	r9, r7, r3
 8003954:	4628      	mov	r0, r5
 8003956:	fb03 7a19 	mls	sl, r3, r9, r7
 800395a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800395e:	2e09      	cmp	r6, #9
 8003960:	d818      	bhi.n	8003994 <_strtol_l.isra.0+0xac>
 8003962:	4634      	mov	r4, r6
 8003964:	42a3      	cmp	r3, r4
 8003966:	dd24      	ble.n	80039b2 <_strtol_l.isra.0+0xca>
 8003968:	2d00      	cmp	r5, #0
 800396a:	db1f      	blt.n	80039ac <_strtol_l.isra.0+0xc4>
 800396c:	4581      	cmp	r9, r0
 800396e:	d31d      	bcc.n	80039ac <_strtol_l.isra.0+0xc4>
 8003970:	d101      	bne.n	8003976 <_strtol_l.isra.0+0x8e>
 8003972:	45a2      	cmp	sl, r4
 8003974:	db1a      	blt.n	80039ac <_strtol_l.isra.0+0xc4>
 8003976:	2501      	movs	r5, #1
 8003978:	fb00 4003 	mla	r0, r0, r3, r4
 800397c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003980:	e7eb      	b.n	800395a <_strtol_l.isra.0+0x72>
 8003982:	2c2b      	cmp	r4, #43	; 0x2b
 8003984:	bf08      	it	eq
 8003986:	f89c 4000 	ldrbeq.w	r4, [ip]
 800398a:	46a8      	mov	r8, r5
 800398c:	bf08      	it	eq
 800398e:	f100 0c02 	addeq.w	ip, r0, #2
 8003992:	e7c8      	b.n	8003926 <_strtol_l.isra.0+0x3e>
 8003994:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003998:	2e19      	cmp	r6, #25
 800399a:	d801      	bhi.n	80039a0 <_strtol_l.isra.0+0xb8>
 800399c:	3c37      	subs	r4, #55	; 0x37
 800399e:	e7e1      	b.n	8003964 <_strtol_l.isra.0+0x7c>
 80039a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80039a4:	2e19      	cmp	r6, #25
 80039a6:	d804      	bhi.n	80039b2 <_strtol_l.isra.0+0xca>
 80039a8:	3c57      	subs	r4, #87	; 0x57
 80039aa:	e7db      	b.n	8003964 <_strtol_l.isra.0+0x7c>
 80039ac:	f04f 35ff 	mov.w	r5, #4294967295
 80039b0:	e7e4      	b.n	800397c <_strtol_l.isra.0+0x94>
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	da08      	bge.n	80039c8 <_strtol_l.isra.0+0xe0>
 80039b6:	2322      	movs	r3, #34	; 0x22
 80039b8:	4638      	mov	r0, r7
 80039ba:	f8ce 3000 	str.w	r3, [lr]
 80039be:	2a00      	cmp	r2, #0
 80039c0:	d09e      	beq.n	8003900 <_strtol_l.isra.0+0x18>
 80039c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80039c6:	e007      	b.n	80039d8 <_strtol_l.isra.0+0xf0>
 80039c8:	f1b8 0f00 	cmp.w	r8, #0
 80039cc:	d000      	beq.n	80039d0 <_strtol_l.isra.0+0xe8>
 80039ce:	4240      	negs	r0, r0
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d095      	beq.n	8003900 <_strtol_l.isra.0+0x18>
 80039d4:	2d00      	cmp	r5, #0
 80039d6:	d1f4      	bne.n	80039c2 <_strtol_l.isra.0+0xda>
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	e791      	b.n	8003900 <_strtol_l.isra.0+0x18>
 80039dc:	2430      	movs	r4, #48	; 0x30
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1b2      	bne.n	8003948 <_strtol_l.isra.0+0x60>
 80039e2:	2308      	movs	r3, #8
 80039e4:	e7b0      	b.n	8003948 <_strtol_l.isra.0+0x60>
 80039e6:	2c30      	cmp	r4, #48	; 0x30
 80039e8:	d0a3      	beq.n	8003932 <_strtol_l.isra.0+0x4a>
 80039ea:	230a      	movs	r3, #10
 80039ec:	e7ac      	b.n	8003948 <_strtol_l.isra.0+0x60>
 80039ee:	bf00      	nop
 80039f0:	08004975 	.word	0x08004975

080039f4 <strtol>:
 80039f4:	4613      	mov	r3, r2
 80039f6:	460a      	mov	r2, r1
 80039f8:	4601      	mov	r1, r0
 80039fa:	4802      	ldr	r0, [pc, #8]	; (8003a04 <strtol+0x10>)
 80039fc:	6800      	ldr	r0, [r0, #0]
 80039fe:	f7ff bf73 	b.w	80038e8 <_strtol_l.isra.0>
 8003a02:	bf00      	nop
 8003a04:	20000010 	.word	0x20000010

08003a08 <pow>:
 8003a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a0c:	461f      	mov	r7, r3
 8003a0e:	4680      	mov	r8, r0
 8003a10:	4689      	mov	r9, r1
 8003a12:	4616      	mov	r6, r2
 8003a14:	f000 f8a4 	bl	8003b60 <__ieee754_pow>
 8003a18:	4b4d      	ldr	r3, [pc, #308]	; (8003b50 <pow+0x148>)
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	f993 3000 	ldrsb.w	r3, [r3]
 8003a20:	460d      	mov	r5, r1
 8003a22:	3301      	adds	r3, #1
 8003a24:	d015      	beq.n	8003a52 <pow+0x4a>
 8003a26:	4632      	mov	r2, r6
 8003a28:	463b      	mov	r3, r7
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	f7fc ffed 	bl	8000a0c <__aeabi_dcmpun>
 8003a32:	b970      	cbnz	r0, 8003a52 <pow+0x4a>
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	4640      	mov	r0, r8
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	f7fc ffe6 	bl	8000a0c <__aeabi_dcmpun>
 8003a40:	2200      	movs	r2, #0
 8003a42:	2300      	movs	r3, #0
 8003a44:	b148      	cbz	r0, 8003a5a <pow+0x52>
 8003a46:	4630      	mov	r0, r6
 8003a48:	4639      	mov	r1, r7
 8003a4a:	f7fc ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d17b      	bne.n	8003b4a <pow+0x142>
 8003a52:	4620      	mov	r0, r4
 8003a54:	4629      	mov	r1, r5
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	f7fc ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 8003a62:	b1e0      	cbz	r0, 8003a9e <pow+0x96>
 8003a64:	2200      	movs	r2, #0
 8003a66:	2300      	movs	r3, #0
 8003a68:	4630      	mov	r0, r6
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	f7fc ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d16a      	bne.n	8003b4a <pow+0x142>
 8003a74:	4630      	mov	r0, r6
 8003a76:	4639      	mov	r1, r7
 8003a78:	f000 fe37 	bl	80046ea <finite>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d0e8      	beq.n	8003a52 <pow+0x4a>
 8003a80:	2200      	movs	r2, #0
 8003a82:	2300      	movs	r3, #0
 8003a84:	4630      	mov	r0, r6
 8003a86:	4639      	mov	r1, r7
 8003a88:	f7fc ff98 	bl	80009bc <__aeabi_dcmplt>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d0e0      	beq.n	8003a52 <pow+0x4a>
 8003a90:	f7ff fef8 	bl	8003884 <__errno>
 8003a94:	2321      	movs	r3, #33	; 0x21
 8003a96:	2400      	movs	r4, #0
 8003a98:	6003      	str	r3, [r0, #0]
 8003a9a:	4d2e      	ldr	r5, [pc, #184]	; (8003b54 <pow+0x14c>)
 8003a9c:	e7d9      	b.n	8003a52 <pow+0x4a>
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f000 fe22 	bl	80046ea <finite>
 8003aa6:	bba8      	cbnz	r0, 8003b14 <pow+0x10c>
 8003aa8:	4640      	mov	r0, r8
 8003aaa:	4649      	mov	r1, r9
 8003aac:	f000 fe1d 	bl	80046ea <finite>
 8003ab0:	b380      	cbz	r0, 8003b14 <pow+0x10c>
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	4639      	mov	r1, r7
 8003ab6:	f000 fe18 	bl	80046ea <finite>
 8003aba:	b358      	cbz	r0, 8003b14 <pow+0x10c>
 8003abc:	4622      	mov	r2, r4
 8003abe:	462b      	mov	r3, r5
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7fc ffa2 	bl	8000a0c <__aeabi_dcmpun>
 8003ac8:	b160      	cbz	r0, 8003ae4 <pow+0xdc>
 8003aca:	f7ff fedb 	bl	8003884 <__errno>
 8003ace:	2321      	movs	r3, #33	; 0x21
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	6003      	str	r3, [r0, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f7fc fe27 	bl	800072c <__aeabi_ddiv>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	e7b6      	b.n	8003a52 <pow+0x4a>
 8003ae4:	f7ff fece 	bl	8003884 <__errno>
 8003ae8:	2322      	movs	r3, #34	; 0x22
 8003aea:	2200      	movs	r2, #0
 8003aec:	6003      	str	r3, [r0, #0]
 8003aee:	4649      	mov	r1, r9
 8003af0:	2300      	movs	r3, #0
 8003af2:	4640      	mov	r0, r8
 8003af4:	f7fc ff62 	bl	80009bc <__aeabi_dcmplt>
 8003af8:	2400      	movs	r4, #0
 8003afa:	b148      	cbz	r0, 8003b10 <pow+0x108>
 8003afc:	4630      	mov	r0, r6
 8003afe:	4639      	mov	r1, r7
 8003b00:	f000 fe00 	bl	8004704 <rint>
 8003b04:	4632      	mov	r2, r6
 8003b06:	463b      	mov	r3, r7
 8003b08:	f7fc ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d0c4      	beq.n	8003a9a <pow+0x92>
 8003b10:	4d11      	ldr	r5, [pc, #68]	; (8003b58 <pow+0x150>)
 8003b12:	e79e      	b.n	8003a52 <pow+0x4a>
 8003b14:	2200      	movs	r2, #0
 8003b16:	2300      	movs	r3, #0
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	f7fc ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d096      	beq.n	8003a52 <pow+0x4a>
 8003b24:	4640      	mov	r0, r8
 8003b26:	4649      	mov	r1, r9
 8003b28:	f000 fddf 	bl	80046ea <finite>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d090      	beq.n	8003a52 <pow+0x4a>
 8003b30:	4630      	mov	r0, r6
 8003b32:	4639      	mov	r1, r7
 8003b34:	f000 fdd9 	bl	80046ea <finite>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d08a      	beq.n	8003a52 <pow+0x4a>
 8003b3c:	f7ff fea2 	bl	8003884 <__errno>
 8003b40:	2322      	movs	r3, #34	; 0x22
 8003b42:	2400      	movs	r4, #0
 8003b44:	2500      	movs	r5, #0
 8003b46:	6003      	str	r3, [r0, #0]
 8003b48:	e783      	b.n	8003a52 <pow+0x4a>
 8003b4a:	2400      	movs	r4, #0
 8003b4c:	4d03      	ldr	r5, [pc, #12]	; (8003b5c <pow+0x154>)
 8003b4e:	e780      	b.n	8003a52 <pow+0x4a>
 8003b50:	20000074 	.word	0x20000074
 8003b54:	fff00000 	.word	0xfff00000
 8003b58:	7ff00000 	.word	0x7ff00000
 8003b5c:	3ff00000 	.word	0x3ff00000

08003b60 <__ieee754_pow>:
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	b093      	sub	sp, #76	; 0x4c
 8003b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b6a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8003b6e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003b72:	ea55 0302 	orrs.w	r3, r5, r2
 8003b76:	4607      	mov	r7, r0
 8003b78:	4688      	mov	r8, r1
 8003b7a:	f000 84bf 	beq.w	80044fc <__ieee754_pow+0x99c>
 8003b7e:	4b7e      	ldr	r3, [pc, #504]	; (8003d78 <__ieee754_pow+0x218>)
 8003b80:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003b84:	429c      	cmp	r4, r3
 8003b86:	4689      	mov	r9, r1
 8003b88:	4682      	mov	sl, r0
 8003b8a:	dc09      	bgt.n	8003ba0 <__ieee754_pow+0x40>
 8003b8c:	d103      	bne.n	8003b96 <__ieee754_pow+0x36>
 8003b8e:	b978      	cbnz	r0, 8003bb0 <__ieee754_pow+0x50>
 8003b90:	42a5      	cmp	r5, r4
 8003b92:	dd02      	ble.n	8003b9a <__ieee754_pow+0x3a>
 8003b94:	e00c      	b.n	8003bb0 <__ieee754_pow+0x50>
 8003b96:	429d      	cmp	r5, r3
 8003b98:	dc02      	bgt.n	8003ba0 <__ieee754_pow+0x40>
 8003b9a:	429d      	cmp	r5, r3
 8003b9c:	d10e      	bne.n	8003bbc <__ieee754_pow+0x5c>
 8003b9e:	b16a      	cbz	r2, 8003bbc <__ieee754_pow+0x5c>
 8003ba0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ba4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ba8:	ea54 030a 	orrs.w	r3, r4, sl
 8003bac:	f000 84a6 	beq.w	80044fc <__ieee754_pow+0x99c>
 8003bb0:	4872      	ldr	r0, [pc, #456]	; (8003d7c <__ieee754_pow+0x21c>)
 8003bb2:	b013      	add	sp, #76	; 0x4c
 8003bb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb8:	f000 bd9e 	b.w	80046f8 <nan>
 8003bbc:	f1b9 0f00 	cmp.w	r9, #0
 8003bc0:	da39      	bge.n	8003c36 <__ieee754_pow+0xd6>
 8003bc2:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <__ieee754_pow+0x220>)
 8003bc4:	429d      	cmp	r5, r3
 8003bc6:	dc54      	bgt.n	8003c72 <__ieee754_pow+0x112>
 8003bc8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003bcc:	429d      	cmp	r5, r3
 8003bce:	f340 84a6 	ble.w	800451e <__ieee754_pow+0x9be>
 8003bd2:	152b      	asrs	r3, r5, #20
 8003bd4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003bd8:	2b14      	cmp	r3, #20
 8003bda:	dd0f      	ble.n	8003bfc <__ieee754_pow+0x9c>
 8003bdc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003be0:	fa22 f103 	lsr.w	r1, r2, r3
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	4293      	cmp	r3, r2
 8003bea:	f040 8498 	bne.w	800451e <__ieee754_pow+0x9be>
 8003bee:	f001 0101 	and.w	r1, r1, #1
 8003bf2:	f1c1 0302 	rsb	r3, r1, #2
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	b182      	cbz	r2, 8003c1c <__ieee754_pow+0xbc>
 8003bfa:	e05e      	b.n	8003cba <__ieee754_pow+0x15a>
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	d15a      	bne.n	8003cb6 <__ieee754_pow+0x156>
 8003c00:	f1c3 0314 	rsb	r3, r3, #20
 8003c04:	fa45 f103 	asr.w	r1, r5, r3
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	42ab      	cmp	r3, r5
 8003c0e:	f040 8483 	bne.w	8004518 <__ieee754_pow+0x9b8>
 8003c12:	f001 0101 	and.w	r1, r1, #1
 8003c16:	f1c1 0302 	rsb	r3, r1, #2
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <__ieee754_pow+0x224>)
 8003c1e:	429d      	cmp	r5, r3
 8003c20:	d130      	bne.n	8003c84 <__ieee754_pow+0x124>
 8003c22:	2e00      	cmp	r6, #0
 8003c24:	f280 8474 	bge.w	8004510 <__ieee754_pow+0x9b0>
 8003c28:	463a      	mov	r2, r7
 8003c2a:	4643      	mov	r3, r8
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	4955      	ldr	r1, [pc, #340]	; (8003d84 <__ieee754_pow+0x224>)
 8003c30:	f7fc fd7c 	bl	800072c <__aeabi_ddiv>
 8003c34:	e02f      	b.n	8003c96 <__ieee754_pow+0x136>
 8003c36:	2300      	movs	r3, #0
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	d13d      	bne.n	8003cba <__ieee754_pow+0x15a>
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	; (8003d78 <__ieee754_pow+0x218>)
 8003c40:	429d      	cmp	r5, r3
 8003c42:	d1eb      	bne.n	8003c1c <__ieee754_pow+0xbc>
 8003c44:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003c48:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003c4c:	ea53 030a 	orrs.w	r3, r3, sl
 8003c50:	f000 8454 	beq.w	80044fc <__ieee754_pow+0x99c>
 8003c54:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <__ieee754_pow+0x228>)
 8003c56:	429c      	cmp	r4, r3
 8003c58:	dd0d      	ble.n	8003c76 <__ieee754_pow+0x116>
 8003c5a:	2e00      	cmp	r6, #0
 8003c5c:	f280 8454 	bge.w	8004508 <__ieee754_pow+0x9a8>
 8003c60:	f04f 0b00 	mov.w	fp, #0
 8003c64:	f04f 0c00 	mov.w	ip, #0
 8003c68:	4658      	mov	r0, fp
 8003c6a:	4661      	mov	r1, ip
 8003c6c:	b013      	add	sp, #76	; 0x4c
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c72:	2302      	movs	r3, #2
 8003c74:	e7e0      	b.n	8003c38 <__ieee754_pow+0xd8>
 8003c76:	2e00      	cmp	r6, #0
 8003c78:	daf2      	bge.n	8003c60 <__ieee754_pow+0x100>
 8003c7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003c7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003c82:	e7f1      	b.n	8003c68 <__ieee754_pow+0x108>
 8003c84:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003c88:	d108      	bne.n	8003c9c <__ieee754_pow+0x13c>
 8003c8a:	463a      	mov	r2, r7
 8003c8c:	4643      	mov	r3, r8
 8003c8e:	4638      	mov	r0, r7
 8003c90:	4641      	mov	r1, r8
 8003c92:	f7fc fc21 	bl	80004d8 <__aeabi_dmul>
 8003c96:	4683      	mov	fp, r0
 8003c98:	468c      	mov	ip, r1
 8003c9a:	e7e5      	b.n	8003c68 <__ieee754_pow+0x108>
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <__ieee754_pow+0x22c>)
 8003c9e:	429e      	cmp	r6, r3
 8003ca0:	d10b      	bne.n	8003cba <__ieee754_pow+0x15a>
 8003ca2:	f1b9 0f00 	cmp.w	r9, #0
 8003ca6:	db08      	blt.n	8003cba <__ieee754_pow+0x15a>
 8003ca8:	4638      	mov	r0, r7
 8003caa:	4641      	mov	r1, r8
 8003cac:	b013      	add	sp, #76	; 0x4c
 8003cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb2:	f000 bc6b 	b.w	800458c <__ieee754_sqrt>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	4638      	mov	r0, r7
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	f000 fd11 	bl	80046e4 <fabs>
 8003cc2:	4683      	mov	fp, r0
 8003cc4:	468c      	mov	ip, r1
 8003cc6:	f1ba 0f00 	cmp.w	sl, #0
 8003cca:	d129      	bne.n	8003d20 <__ieee754_pow+0x1c0>
 8003ccc:	b124      	cbz	r4, 8003cd8 <__ieee754_pow+0x178>
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <__ieee754_pow+0x224>)
 8003cd0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d123      	bne.n	8003d20 <__ieee754_pow+0x1c0>
 8003cd8:	2e00      	cmp	r6, #0
 8003cda:	da07      	bge.n	8003cec <__ieee754_pow+0x18c>
 8003cdc:	465a      	mov	r2, fp
 8003cde:	4663      	mov	r3, ip
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	4928      	ldr	r1, [pc, #160]	; (8003d84 <__ieee754_pow+0x224>)
 8003ce4:	f7fc fd22 	bl	800072c <__aeabi_ddiv>
 8003ce8:	4683      	mov	fp, r0
 8003cea:	468c      	mov	ip, r1
 8003cec:	f1b9 0f00 	cmp.w	r9, #0
 8003cf0:	daba      	bge.n	8003c68 <__ieee754_pow+0x108>
 8003cf2:	9b00      	ldr	r3, [sp, #0]
 8003cf4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003cf8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003cfc:	4323      	orrs	r3, r4
 8003cfe:	d108      	bne.n	8003d12 <__ieee754_pow+0x1b2>
 8003d00:	465a      	mov	r2, fp
 8003d02:	4663      	mov	r3, ip
 8003d04:	4658      	mov	r0, fp
 8003d06:	4661      	mov	r1, ip
 8003d08:	f7fc fa2e 	bl	8000168 <__aeabi_dsub>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	e78e      	b.n	8003c30 <__ieee754_pow+0xd0>
 8003d12:	9b00      	ldr	r3, [sp, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d1a7      	bne.n	8003c68 <__ieee754_pow+0x108>
 8003d18:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003d1c:	469c      	mov	ip, r3
 8003d1e:	e7a3      	b.n	8003c68 <__ieee754_pow+0x108>
 8003d20:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8003d24:	3b01      	subs	r3, #1
 8003d26:	930c      	str	r3, [sp, #48]	; 0x30
 8003d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d2a:	9b00      	ldr	r3, [sp, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d104      	bne.n	8003d3a <__ieee754_pow+0x1da>
 8003d30:	463a      	mov	r2, r7
 8003d32:	4643      	mov	r3, r8
 8003d34:	4638      	mov	r0, r7
 8003d36:	4641      	mov	r1, r8
 8003d38:	e7e6      	b.n	8003d08 <__ieee754_pow+0x1a8>
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <__ieee754_pow+0x230>)
 8003d3c:	429d      	cmp	r5, r3
 8003d3e:	f340 80f9 	ble.w	8003f34 <__ieee754_pow+0x3d4>
 8003d42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003d46:	429d      	cmp	r5, r3
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <__ieee754_pow+0x228>)
 8003d4a:	dd09      	ble.n	8003d60 <__ieee754_pow+0x200>
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	dc0c      	bgt.n	8003d6a <__ieee754_pow+0x20a>
 8003d50:	2e00      	cmp	r6, #0
 8003d52:	da85      	bge.n	8003c60 <__ieee754_pow+0x100>
 8003d54:	a306      	add	r3, pc, #24	; (adr r3, 8003d70 <__ieee754_pow+0x210>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	e798      	b.n	8003c92 <__ieee754_pow+0x132>
 8003d60:	429c      	cmp	r4, r3
 8003d62:	dbf5      	blt.n	8003d50 <__ieee754_pow+0x1f0>
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <__ieee754_pow+0x224>)
 8003d66:	429c      	cmp	r4, r3
 8003d68:	dd14      	ble.n	8003d94 <__ieee754_pow+0x234>
 8003d6a:	2e00      	cmp	r6, #0
 8003d6c:	dcf2      	bgt.n	8003d54 <__ieee754_pow+0x1f4>
 8003d6e:	e777      	b.n	8003c60 <__ieee754_pow+0x100>
 8003d70:	8800759c 	.word	0x8800759c
 8003d74:	7e37e43c 	.word	0x7e37e43c
 8003d78:	7ff00000 	.word	0x7ff00000
 8003d7c:	08004a75 	.word	0x08004a75
 8003d80:	433fffff 	.word	0x433fffff
 8003d84:	3ff00000 	.word	0x3ff00000
 8003d88:	3fefffff 	.word	0x3fefffff
 8003d8c:	3fe00000 	.word	0x3fe00000
 8003d90:	41e00000 	.word	0x41e00000
 8003d94:	4661      	mov	r1, ip
 8003d96:	2200      	movs	r2, #0
 8003d98:	4658      	mov	r0, fp
 8003d9a:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <__ieee754_pow+0x3c0>)
 8003d9c:	f7fc f9e4 	bl	8000168 <__aeabi_dsub>
 8003da0:	a355      	add	r3, pc, #340	; (adr r3, 8003ef8 <__ieee754_pow+0x398>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	4604      	mov	r4, r0
 8003da8:	460d      	mov	r5, r1
 8003daa:	f7fc fb95 	bl	80004d8 <__aeabi_dmul>
 8003dae:	a354      	add	r3, pc, #336	; (adr r3, 8003f00 <__ieee754_pow+0x3a0>)
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	4606      	mov	r6, r0
 8003db6:	460f      	mov	r7, r1
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f7fc fb8c 	bl	80004d8 <__aeabi_dmul>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4682      	mov	sl, r0
 8003dc4:	468b      	mov	fp, r1
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <__ieee754_pow+0x3c4>)
 8003dcc:	f7fc fb84 	bl	80004d8 <__aeabi_dmul>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	a14c      	add	r1, pc, #304	; (adr r1, 8003f08 <__ieee754_pow+0x3a8>)
 8003dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dda:	f7fc f9c5 	bl	8000168 <__aeabi_dsub>
 8003dde:	4622      	mov	r2, r4
 8003de0:	462b      	mov	r3, r5
 8003de2:	f7fc fb79 	bl	80004d8 <__aeabi_dmul>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	2000      	movs	r0, #0
 8003dec:	494e      	ldr	r1, [pc, #312]	; (8003f28 <__ieee754_pow+0x3c8>)
 8003dee:	f7fc f9bb 	bl	8000168 <__aeabi_dsub>
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	4680      	mov	r8, r0
 8003df8:	4689      	mov	r9, r1
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	f7fc fb6b 	bl	80004d8 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4640      	mov	r0, r8
 8003e08:	4649      	mov	r1, r9
 8003e0a:	f7fc fb65 	bl	80004d8 <__aeabi_dmul>
 8003e0e:	a340      	add	r3, pc, #256	; (adr r3, 8003f10 <__ieee754_pow+0x3b0>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc fb60 	bl	80004d8 <__aeabi_dmul>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4650      	mov	r0, sl
 8003e1e:	4659      	mov	r1, fp
 8003e20:	f7fc f9a2 	bl	8000168 <__aeabi_dsub>
 8003e24:	f04f 0a00 	mov.w	sl, #0
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	460d      	mov	r5, r1
 8003e30:	4630      	mov	r0, r6
 8003e32:	4639      	mov	r1, r7
 8003e34:	f7fc f99a 	bl	800016c <__adddf3>
 8003e38:	4632      	mov	r2, r6
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	468b      	mov	fp, r1
 8003e40:	f7fc f992 	bl	8000168 <__aeabi_dsub>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f7fc f98c 	bl	8000168 <__aeabi_dsub>
 8003e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e54:	9b00      	ldr	r3, [sp, #0]
 8003e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f04f 0600 	mov.w	r6, #0
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	bf0c      	ite	eq
 8003e66:	4b31      	ldreq	r3, [pc, #196]	; (8003f2c <__ieee754_pow+0x3cc>)
 8003e68:	4b2d      	ldrne	r3, [pc, #180]	; (8003f20 <__ieee754_pow+0x3c0>)
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	460d      	mov	r5, r1
 8003e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e72:	e9cd 2300 	strd	r2, r3, [sp]
 8003e76:	4632      	mov	r2, r6
 8003e78:	463b      	mov	r3, r7
 8003e7a:	f7fc f975 	bl	8000168 <__aeabi_dsub>
 8003e7e:	4652      	mov	r2, sl
 8003e80:	465b      	mov	r3, fp
 8003e82:	f7fc fb29 	bl	80004d8 <__aeabi_dmul>
 8003e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e8a:	4680      	mov	r8, r0
 8003e8c:	4689      	mov	r9, r1
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f7fc fb21 	bl	80004d8 <__aeabi_dmul>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	f7fc f965 	bl	800016c <__adddf3>
 8003ea2:	4632      	mov	r2, r6
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	4680      	mov	r8, r0
 8003ea8:	4689      	mov	r9, r1
 8003eaa:	4650      	mov	r0, sl
 8003eac:	4659      	mov	r1, fp
 8003eae:	f7fc fb13 	bl	80004d8 <__aeabi_dmul>
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	460d      	mov	r5, r1
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4649      	mov	r1, r9
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003ec2:	f7fc f953 	bl	800016c <__adddf3>
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <__ieee754_pow+0x3d0>)
 8003ec8:	4682      	mov	sl, r0
 8003eca:	4299      	cmp	r1, r3
 8003ecc:	460f      	mov	r7, r1
 8003ece:	460e      	mov	r6, r1
 8003ed0:	f340 82ed 	ble.w	80044ae <__ieee754_pow+0x94e>
 8003ed4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003ed8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003edc:	4303      	orrs	r3, r0
 8003ede:	f000 81e7 	beq.w	80042b0 <__ieee754_pow+0x750>
 8003ee2:	a30d      	add	r3, pc, #52	; (adr r3, 8003f18 <__ieee754_pow+0x3b8>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eec:	f7fc faf4 	bl	80004d8 <__aeabi_dmul>
 8003ef0:	a309      	add	r3, pc, #36	; (adr r3, 8003f18 <__ieee754_pow+0x3b8>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	e6cc      	b.n	8003c92 <__ieee754_pow+0x132>
 8003ef8:	60000000 	.word	0x60000000
 8003efc:	3ff71547 	.word	0x3ff71547
 8003f00:	f85ddf44 	.word	0xf85ddf44
 8003f04:	3e54ae0b 	.word	0x3e54ae0b
 8003f08:	55555555 	.word	0x55555555
 8003f0c:	3fd55555 	.word	0x3fd55555
 8003f10:	652b82fe 	.word	0x652b82fe
 8003f14:	3ff71547 	.word	0x3ff71547
 8003f18:	8800759c 	.word	0x8800759c
 8003f1c:	7e37e43c 	.word	0x7e37e43c
 8003f20:	3ff00000 	.word	0x3ff00000
 8003f24:	3fd00000 	.word	0x3fd00000
 8003f28:	3fe00000 	.word	0x3fe00000
 8003f2c:	bff00000 	.word	0xbff00000
 8003f30:	408fffff 	.word	0x408fffff
 8003f34:	4bd4      	ldr	r3, [pc, #848]	; (8004288 <__ieee754_pow+0x728>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	ea09 0303 	and.w	r3, r9, r3
 8003f3c:	b943      	cbnz	r3, 8003f50 <__ieee754_pow+0x3f0>
 8003f3e:	4658      	mov	r0, fp
 8003f40:	4661      	mov	r1, ip
 8003f42:	4bd2      	ldr	r3, [pc, #840]	; (800428c <__ieee754_pow+0x72c>)
 8003f44:	f7fc fac8 	bl	80004d8 <__aeabi_dmul>
 8003f48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003f4c:	4683      	mov	fp, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	1523      	asrs	r3, r4, #20
 8003f52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003f56:	4413      	add	r3, r2
 8003f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f5a:	4bcd      	ldr	r3, [pc, #820]	; (8004290 <__ieee754_pow+0x730>)
 8003f5c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003f60:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003f64:	429c      	cmp	r4, r3
 8003f66:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003f6a:	dd08      	ble.n	8003f7e <__ieee754_pow+0x41e>
 8003f6c:	4bc9      	ldr	r3, [pc, #804]	; (8004294 <__ieee754_pow+0x734>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	f340 819c 	ble.w	80042ac <__ieee754_pow+0x74c>
 8003f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f7e:	2600      	movs	r6, #0
 8003f80:	00f3      	lsls	r3, r6, #3
 8003f82:	930d      	str	r3, [sp, #52]	; 0x34
 8003f84:	4bc4      	ldr	r3, [pc, #784]	; (8004298 <__ieee754_pow+0x738>)
 8003f86:	4658      	mov	r0, fp
 8003f88:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f90:	4629      	mov	r1, r5
 8003f92:	461a      	mov	r2, r3
 8003f94:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003f98:	4623      	mov	r3, r4
 8003f9a:	f7fc f8e5 	bl	8000168 <__aeabi_dsub>
 8003f9e:	46da      	mov	sl, fp
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	4652      	mov	r2, sl
 8003fa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003fa8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003fac:	f7fc f8de 	bl	800016c <__adddf3>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	49b9      	ldr	r1, [pc, #740]	; (800429c <__ieee754_pow+0x73c>)
 8003fb8:	f7fc fbb8 	bl	800072c <__aeabi_ddiv>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003fc8:	f7fc fa86 	bl	80004d8 <__aeabi_dmul>
 8003fcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fd0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003fd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2200      	movs	r2, #0
 8003fdc:	46ab      	mov	fp, r5
 8003fde:	106d      	asrs	r5, r5, #1
 8003fe0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003fe4:	9304      	str	r3, [sp, #16]
 8003fe6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003fea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003fee:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4614      	mov	r4, r2
 8003ff8:	461d      	mov	r5, r3
 8003ffa:	f7fc fa6d 	bl	80004d8 <__aeabi_dmul>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004006:	f7fc f8af 	bl	8000168 <__aeabi_dsub>
 800400a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800400e:	4606      	mov	r6, r0
 8004010:	460f      	mov	r7, r1
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	f7fc f8a7 	bl	8000168 <__aeabi_dsub>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4650      	mov	r0, sl
 8004020:	4659      	mov	r1, fp
 8004022:	f7fc f8a1 	bl	8000168 <__aeabi_dsub>
 8004026:	4642      	mov	r2, r8
 8004028:	464b      	mov	r3, r9
 800402a:	f7fc fa55 	bl	80004d8 <__aeabi_dmul>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4630      	mov	r0, r6
 8004034:	4639      	mov	r1, r7
 8004036:	f7fc f897 	bl	8000168 <__aeabi_dsub>
 800403a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800403e:	f7fc fa4b 	bl	80004d8 <__aeabi_dmul>
 8004042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f7fc fa43 	bl	80004d8 <__aeabi_dmul>
 8004052:	a37b      	add	r3, pc, #492	; (adr r3, 8004240 <__ieee754_pow+0x6e0>)
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	4604      	mov	r4, r0
 800405a:	460d      	mov	r5, r1
 800405c:	f7fc fa3c 	bl	80004d8 <__aeabi_dmul>
 8004060:	a379      	add	r3, pc, #484	; (adr r3, 8004248 <__ieee754_pow+0x6e8>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc f881 	bl	800016c <__adddf3>
 800406a:	4622      	mov	r2, r4
 800406c:	462b      	mov	r3, r5
 800406e:	f7fc fa33 	bl	80004d8 <__aeabi_dmul>
 8004072:	a377      	add	r3, pc, #476	; (adr r3, 8004250 <__ieee754_pow+0x6f0>)
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f7fc f878 	bl	800016c <__adddf3>
 800407c:	4622      	mov	r2, r4
 800407e:	462b      	mov	r3, r5
 8004080:	f7fc fa2a 	bl	80004d8 <__aeabi_dmul>
 8004084:	a374      	add	r3, pc, #464	; (adr r3, 8004258 <__ieee754_pow+0x6f8>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f7fc f86f 	bl	800016c <__adddf3>
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	f7fc fa21 	bl	80004d8 <__aeabi_dmul>
 8004096:	a372      	add	r3, pc, #456	; (adr r3, 8004260 <__ieee754_pow+0x700>)
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f7fc f866 	bl	800016c <__adddf3>
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	f7fc fa18 	bl	80004d8 <__aeabi_dmul>
 80040a8:	a36f      	add	r3, pc, #444	; (adr r3, 8004268 <__ieee754_pow+0x708>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f7fc f85d 	bl	800016c <__adddf3>
 80040b2:	4622      	mov	r2, r4
 80040b4:	4606      	mov	r6, r0
 80040b6:	460f      	mov	r7, r1
 80040b8:	462b      	mov	r3, r5
 80040ba:	4620      	mov	r0, r4
 80040bc:	4629      	mov	r1, r5
 80040be:	f7fc fa0b 	bl	80004d8 <__aeabi_dmul>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc fa05 	bl	80004d8 <__aeabi_dmul>
 80040ce:	4604      	mov	r4, r0
 80040d0:	460d      	mov	r5, r1
 80040d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040d6:	4642      	mov	r2, r8
 80040d8:	464b      	mov	r3, r9
 80040da:	f7fc f847 	bl	800016c <__adddf3>
 80040de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040e2:	f7fc f9f9 	bl	80004d8 <__aeabi_dmul>
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	f7fc f83f 	bl	800016c <__adddf3>
 80040ee:	4642      	mov	r2, r8
 80040f0:	4606      	mov	r6, r0
 80040f2:	460f      	mov	r7, r1
 80040f4:	464b      	mov	r3, r9
 80040f6:	4640      	mov	r0, r8
 80040f8:	4649      	mov	r1, r9
 80040fa:	f7fc f9ed 	bl	80004d8 <__aeabi_dmul>
 80040fe:	2200      	movs	r2, #0
 8004100:	4b67      	ldr	r3, [pc, #412]	; (80042a0 <__ieee754_pow+0x740>)
 8004102:	4682      	mov	sl, r0
 8004104:	468b      	mov	fp, r1
 8004106:	f7fc f831 	bl	800016c <__adddf3>
 800410a:	4632      	mov	r2, r6
 800410c:	463b      	mov	r3, r7
 800410e:	f7fc f82d 	bl	800016c <__adddf3>
 8004112:	9c04      	ldr	r4, [sp, #16]
 8004114:	460d      	mov	r5, r1
 8004116:	4622      	mov	r2, r4
 8004118:	460b      	mov	r3, r1
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc f9db 	bl	80004d8 <__aeabi_dmul>
 8004122:	2200      	movs	r2, #0
 8004124:	4680      	mov	r8, r0
 8004126:	4689      	mov	r9, r1
 8004128:	4620      	mov	r0, r4
 800412a:	4629      	mov	r1, r5
 800412c:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <__ieee754_pow+0x740>)
 800412e:	f7fc f81b 	bl	8000168 <__aeabi_dsub>
 8004132:	4652      	mov	r2, sl
 8004134:	465b      	mov	r3, fp
 8004136:	f7fc f817 	bl	8000168 <__aeabi_dsub>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4630      	mov	r0, r6
 8004140:	4639      	mov	r1, r7
 8004142:	f7fc f811 	bl	8000168 <__aeabi_dsub>
 8004146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800414a:	f7fc f9c5 	bl	80004d8 <__aeabi_dmul>
 800414e:	4622      	mov	r2, r4
 8004150:	4606      	mov	r6, r0
 8004152:	460f      	mov	r7, r1
 8004154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004158:	462b      	mov	r3, r5
 800415a:	f7fc f9bd 	bl	80004d8 <__aeabi_dmul>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4630      	mov	r0, r6
 8004164:	4639      	mov	r1, r7
 8004166:	f7fc f801 	bl	800016c <__adddf3>
 800416a:	4606      	mov	r6, r0
 800416c:	460f      	mov	r7, r1
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4640      	mov	r0, r8
 8004174:	4649      	mov	r1, r9
 8004176:	f7fb fff9 	bl	800016c <__adddf3>
 800417a:	a33d      	add	r3, pc, #244	; (adr r3, 8004270 <__ieee754_pow+0x710>)
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	9c04      	ldr	r4, [sp, #16]
 8004182:	460d      	mov	r5, r1
 8004184:	4620      	mov	r0, r4
 8004186:	f7fc f9a7 	bl	80004d8 <__aeabi_dmul>
 800418a:	4642      	mov	r2, r8
 800418c:	464b      	mov	r3, r9
 800418e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004192:	4620      	mov	r0, r4
 8004194:	4629      	mov	r1, r5
 8004196:	f7fb ffe7 	bl	8000168 <__aeabi_dsub>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4630      	mov	r0, r6
 80041a0:	4639      	mov	r1, r7
 80041a2:	f7fb ffe1 	bl	8000168 <__aeabi_dsub>
 80041a6:	a334      	add	r3, pc, #208	; (adr r3, 8004278 <__ieee754_pow+0x718>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc f994 	bl	80004d8 <__aeabi_dmul>
 80041b0:	a333      	add	r3, pc, #204	; (adr r3, 8004280 <__ieee754_pow+0x720>)
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	4606      	mov	r6, r0
 80041b8:	460f      	mov	r7, r1
 80041ba:	4620      	mov	r0, r4
 80041bc:	4629      	mov	r1, r5
 80041be:	f7fc f98b 	bl	80004d8 <__aeabi_dmul>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4630      	mov	r0, r6
 80041c8:	4639      	mov	r1, r7
 80041ca:	f7fb ffcf 	bl	800016c <__adddf3>
 80041ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041d0:	4b34      	ldr	r3, [pc, #208]	; (80042a4 <__ieee754_pow+0x744>)
 80041d2:	4413      	add	r3, r2
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f7fb ffc8 	bl	800016c <__adddf3>
 80041dc:	4680      	mov	r8, r0
 80041de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80041e0:	4689      	mov	r9, r1
 80041e2:	f7fc f90f 	bl	8000404 <__aeabi_i2d>
 80041e6:	4604      	mov	r4, r0
 80041e8:	460d      	mov	r5, r1
 80041ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041ec:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <__ieee754_pow+0x748>)
 80041ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	f7fb ffb6 	bl	800016c <__adddf3>
 8004200:	4632      	mov	r2, r6
 8004202:	463b      	mov	r3, r7
 8004204:	f7fb ffb2 	bl	800016c <__adddf3>
 8004208:	4622      	mov	r2, r4
 800420a:	462b      	mov	r3, r5
 800420c:	f7fb ffae 	bl	800016c <__adddf3>
 8004210:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004214:	4622      	mov	r2, r4
 8004216:	462b      	mov	r3, r5
 8004218:	4650      	mov	r0, sl
 800421a:	468b      	mov	fp, r1
 800421c:	f7fb ffa4 	bl	8000168 <__aeabi_dsub>
 8004220:	4632      	mov	r2, r6
 8004222:	463b      	mov	r3, r7
 8004224:	f7fb ffa0 	bl	8000168 <__aeabi_dsub>
 8004228:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800422c:	f7fb ff9c 	bl	8000168 <__aeabi_dsub>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4640      	mov	r0, r8
 8004236:	4649      	mov	r1, r9
 8004238:	e608      	b.n	8003e4c <__ieee754_pow+0x2ec>
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	4a454eef 	.word	0x4a454eef
 8004244:	3fca7e28 	.word	0x3fca7e28
 8004248:	93c9db65 	.word	0x93c9db65
 800424c:	3fcd864a 	.word	0x3fcd864a
 8004250:	a91d4101 	.word	0xa91d4101
 8004254:	3fd17460 	.word	0x3fd17460
 8004258:	518f264d 	.word	0x518f264d
 800425c:	3fd55555 	.word	0x3fd55555
 8004260:	db6fabff 	.word	0xdb6fabff
 8004264:	3fdb6db6 	.word	0x3fdb6db6
 8004268:	33333303 	.word	0x33333303
 800426c:	3fe33333 	.word	0x3fe33333
 8004270:	e0000000 	.word	0xe0000000
 8004274:	3feec709 	.word	0x3feec709
 8004278:	dc3a03fd 	.word	0xdc3a03fd
 800427c:	3feec709 	.word	0x3feec709
 8004280:	145b01f5 	.word	0x145b01f5
 8004284:	be3e2fe0 	.word	0xbe3e2fe0
 8004288:	7ff00000 	.word	0x7ff00000
 800428c:	43400000 	.word	0x43400000
 8004290:	0003988e 	.word	0x0003988e
 8004294:	000bb679 	.word	0x000bb679
 8004298:	08004a78 	.word	0x08004a78
 800429c:	3ff00000 	.word	0x3ff00000
 80042a0:	40080000 	.word	0x40080000
 80042a4:	08004a98 	.word	0x08004a98
 80042a8:	08004a88 	.word	0x08004a88
 80042ac:	2601      	movs	r6, #1
 80042ae:	e667      	b.n	8003f80 <__ieee754_pow+0x420>
 80042b0:	a39d      	add	r3, pc, #628	; (adr r3, 8004528 <__ieee754_pow+0x9c8>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	4640      	mov	r0, r8
 80042b8:	4649      	mov	r1, r9
 80042ba:	f7fb ff57 	bl	800016c <__adddf3>
 80042be:	4622      	mov	r2, r4
 80042c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042c4:	462b      	mov	r3, r5
 80042c6:	4650      	mov	r0, sl
 80042c8:	4639      	mov	r1, r7
 80042ca:	f7fb ff4d 	bl	8000168 <__aeabi_dsub>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042d6:	f7fc fb8f 	bl	80009f8 <__aeabi_dcmpgt>
 80042da:	2800      	cmp	r0, #0
 80042dc:	f47f ae01 	bne.w	8003ee2 <__ieee754_pow+0x382>
 80042e0:	4aa5      	ldr	r2, [pc, #660]	; (8004578 <__ieee754_pow+0xa18>)
 80042e2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f340 8103 	ble.w	80044f2 <__ieee754_pow+0x992>
 80042ec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80042f0:	2000      	movs	r0, #0
 80042f2:	151b      	asrs	r3, r3, #20
 80042f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80042f8:	fa4a f303 	asr.w	r3, sl, r3
 80042fc:	4433      	add	r3, r6
 80042fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004302:	4f9e      	ldr	r7, [pc, #632]	; (800457c <__ieee754_pow+0xa1c>)
 8004304:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004308:	4117      	asrs	r7, r2
 800430a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800430e:	ea23 0107 	bic.w	r1, r3, r7
 8004312:	f1c2 0214 	rsb	r2, r2, #20
 8004316:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800431a:	460b      	mov	r3, r1
 800431c:	fa4a fa02 	asr.w	sl, sl, r2
 8004320:	2e00      	cmp	r6, #0
 8004322:	4602      	mov	r2, r0
 8004324:	4629      	mov	r1, r5
 8004326:	4620      	mov	r0, r4
 8004328:	bfb8      	it	lt
 800432a:	f1ca 0a00 	rsblt	sl, sl, #0
 800432e:	f7fb ff1b 	bl	8000168 <__aeabi_dsub>
 8004332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800433a:	2400      	movs	r4, #0
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	f7fb ff14 	bl	800016c <__adddf3>
 8004344:	a37a      	add	r3, pc, #488	; (adr r3, 8004530 <__ieee754_pow+0x9d0>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	4620      	mov	r0, r4
 800434c:	460d      	mov	r5, r1
 800434e:	f7fc f8c3 	bl	80004d8 <__aeabi_dmul>
 8004352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004356:	4606      	mov	r6, r0
 8004358:	460f      	mov	r7, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fb ff03 	bl	8000168 <__aeabi_dsub>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f7fb fefd 	bl	8000168 <__aeabi_dsub>
 800436e:	a372      	add	r3, pc, #456	; (adr r3, 8004538 <__ieee754_pow+0x9d8>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc f8b0 	bl	80004d8 <__aeabi_dmul>
 8004378:	a371      	add	r3, pc, #452	; (adr r3, 8004540 <__ieee754_pow+0x9e0>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	4680      	mov	r8, r0
 8004380:	4689      	mov	r9, r1
 8004382:	4620      	mov	r0, r4
 8004384:	4629      	mov	r1, r5
 8004386:	f7fc f8a7 	bl	80004d8 <__aeabi_dmul>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4640      	mov	r0, r8
 8004390:	4649      	mov	r1, r9
 8004392:	f7fb feeb 	bl	800016c <__adddf3>
 8004396:	4604      	mov	r4, r0
 8004398:	460d      	mov	r5, r1
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fb fee3 	bl	800016c <__adddf3>
 80043a6:	4632      	mov	r2, r6
 80043a8:	463b      	mov	r3, r7
 80043aa:	4680      	mov	r8, r0
 80043ac:	4689      	mov	r9, r1
 80043ae:	f7fb fedb 	bl	8000168 <__aeabi_dsub>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7fb fed5 	bl	8000168 <__aeabi_dsub>
 80043be:	4642      	mov	r2, r8
 80043c0:	4606      	mov	r6, r0
 80043c2:	460f      	mov	r7, r1
 80043c4:	464b      	mov	r3, r9
 80043c6:	4640      	mov	r0, r8
 80043c8:	4649      	mov	r1, r9
 80043ca:	f7fc f885 	bl	80004d8 <__aeabi_dmul>
 80043ce:	a35e      	add	r3, pc, #376	; (adr r3, 8004548 <__ieee754_pow+0x9e8>)
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	4604      	mov	r4, r0
 80043d6:	460d      	mov	r5, r1
 80043d8:	f7fc f87e 	bl	80004d8 <__aeabi_dmul>
 80043dc:	a35c      	add	r3, pc, #368	; (adr r3, 8004550 <__ieee754_pow+0x9f0>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fb fec1 	bl	8000168 <__aeabi_dsub>
 80043e6:	4622      	mov	r2, r4
 80043e8:	462b      	mov	r3, r5
 80043ea:	f7fc f875 	bl	80004d8 <__aeabi_dmul>
 80043ee:	a35a      	add	r3, pc, #360	; (adr r3, 8004558 <__ieee754_pow+0x9f8>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f7fb feba 	bl	800016c <__adddf3>
 80043f8:	4622      	mov	r2, r4
 80043fa:	462b      	mov	r3, r5
 80043fc:	f7fc f86c 	bl	80004d8 <__aeabi_dmul>
 8004400:	a357      	add	r3, pc, #348	; (adr r3, 8004560 <__ieee754_pow+0xa00>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fb feaf 	bl	8000168 <__aeabi_dsub>
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	f7fc f863 	bl	80004d8 <__aeabi_dmul>
 8004412:	a355      	add	r3, pc, #340	; (adr r3, 8004568 <__ieee754_pow+0xa08>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fb fea8 	bl	800016c <__adddf3>
 800441c:	4622      	mov	r2, r4
 800441e:	462b      	mov	r3, r5
 8004420:	f7fc f85a 	bl	80004d8 <__aeabi_dmul>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4640      	mov	r0, r8
 800442a:	4649      	mov	r1, r9
 800442c:	f7fb fe9c 	bl	8000168 <__aeabi_dsub>
 8004430:	4604      	mov	r4, r0
 8004432:	460d      	mov	r5, r1
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4640      	mov	r0, r8
 800443a:	4649      	mov	r1, r9
 800443c:	f7fc f84c 	bl	80004d8 <__aeabi_dmul>
 8004440:	2200      	movs	r2, #0
 8004442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800444a:	4620      	mov	r0, r4
 800444c:	4629      	mov	r1, r5
 800444e:	f7fb fe8b 	bl	8000168 <__aeabi_dsub>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800445a:	f7fc f967 	bl	800072c <__aeabi_ddiv>
 800445e:	4632      	mov	r2, r6
 8004460:	4604      	mov	r4, r0
 8004462:	460d      	mov	r5, r1
 8004464:	463b      	mov	r3, r7
 8004466:	4640      	mov	r0, r8
 8004468:	4649      	mov	r1, r9
 800446a:	f7fc f835 	bl	80004d8 <__aeabi_dmul>
 800446e:	4632      	mov	r2, r6
 8004470:	463b      	mov	r3, r7
 8004472:	f7fb fe7b 	bl	800016c <__adddf3>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4620      	mov	r0, r4
 800447c:	4629      	mov	r1, r5
 800447e:	f7fb fe73 	bl	8000168 <__aeabi_dsub>
 8004482:	4642      	mov	r2, r8
 8004484:	464b      	mov	r3, r9
 8004486:	f7fb fe6f 	bl	8000168 <__aeabi_dsub>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	2000      	movs	r0, #0
 8004490:	493b      	ldr	r1, [pc, #236]	; (8004580 <__ieee754_pow+0xa20>)
 8004492:	f7fb fe69 	bl	8000168 <__aeabi_dsub>
 8004496:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800449a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800449e:	da2b      	bge.n	80044f8 <__ieee754_pow+0x998>
 80044a0:	4652      	mov	r2, sl
 80044a2:	f000 f9b9 	bl	8004818 <scalbn>
 80044a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044aa:	f7ff bbf2 	b.w	8003c92 <__ieee754_pow+0x132>
 80044ae:	4b35      	ldr	r3, [pc, #212]	; (8004584 <__ieee754_pow+0xa24>)
 80044b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80044b4:	429f      	cmp	r7, r3
 80044b6:	f77f af13 	ble.w	80042e0 <__ieee754_pow+0x780>
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <__ieee754_pow+0xa28>)
 80044bc:	440b      	add	r3, r1
 80044be:	4303      	orrs	r3, r0
 80044c0:	d00b      	beq.n	80044da <__ieee754_pow+0x97a>
 80044c2:	a32b      	add	r3, pc, #172	; (adr r3, 8004570 <__ieee754_pow+0xa10>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044cc:	f7fc f804 	bl	80004d8 <__aeabi_dmul>
 80044d0:	a327      	add	r3, pc, #156	; (adr r3, 8004570 <__ieee754_pow+0xa10>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7ff bbdc 	b.w	8003c92 <__ieee754_pow+0x132>
 80044da:	4622      	mov	r2, r4
 80044dc:	462b      	mov	r3, r5
 80044de:	f7fb fe43 	bl	8000168 <__aeabi_dsub>
 80044e2:	4642      	mov	r2, r8
 80044e4:	464b      	mov	r3, r9
 80044e6:	f7fc fa7d 	bl	80009e4 <__aeabi_dcmpge>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	f43f aef8 	beq.w	80042e0 <__ieee754_pow+0x780>
 80044f0:	e7e7      	b.n	80044c2 <__ieee754_pow+0x962>
 80044f2:	f04f 0a00 	mov.w	sl, #0
 80044f6:	e71e      	b.n	8004336 <__ieee754_pow+0x7d6>
 80044f8:	4621      	mov	r1, r4
 80044fa:	e7d4      	b.n	80044a6 <__ieee754_pow+0x946>
 80044fc:	f04f 0b00 	mov.w	fp, #0
 8004500:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8004580 <__ieee754_pow+0xa20>
 8004504:	f7ff bbb0 	b.w	8003c68 <__ieee754_pow+0x108>
 8004508:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800450c:	f7ff bbac 	b.w	8003c68 <__ieee754_pow+0x108>
 8004510:	4638      	mov	r0, r7
 8004512:	4641      	mov	r1, r8
 8004514:	f7ff bbbf 	b.w	8003c96 <__ieee754_pow+0x136>
 8004518:	9200      	str	r2, [sp, #0]
 800451a:	f7ff bb7f 	b.w	8003c1c <__ieee754_pow+0xbc>
 800451e:	2300      	movs	r3, #0
 8004520:	f7ff bb69 	b.w	8003bf6 <__ieee754_pow+0x96>
 8004524:	f3af 8000 	nop.w
 8004528:	652b82fe 	.word	0x652b82fe
 800452c:	3c971547 	.word	0x3c971547
 8004530:	00000000 	.word	0x00000000
 8004534:	3fe62e43 	.word	0x3fe62e43
 8004538:	fefa39ef 	.word	0xfefa39ef
 800453c:	3fe62e42 	.word	0x3fe62e42
 8004540:	0ca86c39 	.word	0x0ca86c39
 8004544:	be205c61 	.word	0xbe205c61
 8004548:	72bea4d0 	.word	0x72bea4d0
 800454c:	3e663769 	.word	0x3e663769
 8004550:	c5d26bf1 	.word	0xc5d26bf1
 8004554:	3ebbbd41 	.word	0x3ebbbd41
 8004558:	af25de2c 	.word	0xaf25de2c
 800455c:	3f11566a 	.word	0x3f11566a
 8004560:	16bebd93 	.word	0x16bebd93
 8004564:	3f66c16c 	.word	0x3f66c16c
 8004568:	5555553e 	.word	0x5555553e
 800456c:	3fc55555 	.word	0x3fc55555
 8004570:	c2f8f359 	.word	0xc2f8f359
 8004574:	01a56e1f 	.word	0x01a56e1f
 8004578:	3fe00000 	.word	0x3fe00000
 800457c:	000fffff 	.word	0x000fffff
 8004580:	3ff00000 	.word	0x3ff00000
 8004584:	4090cbff 	.word	0x4090cbff
 8004588:	3f6f3400 	.word	0x3f6f3400

0800458c <__ieee754_sqrt>:
 800458c:	f8df c150 	ldr.w	ip, [pc, #336]	; 80046e0 <__ieee754_sqrt+0x154>
 8004590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004594:	ea3c 0c01 	bics.w	ip, ip, r1
 8004598:	460b      	mov	r3, r1
 800459a:	4606      	mov	r6, r0
 800459c:	460d      	mov	r5, r1
 800459e:	460a      	mov	r2, r1
 80045a0:	4607      	mov	r7, r0
 80045a2:	4604      	mov	r4, r0
 80045a4:	d10e      	bne.n	80045c4 <__ieee754_sqrt+0x38>
 80045a6:	4602      	mov	r2, r0
 80045a8:	f7fb ff96 	bl	80004d8 <__aeabi_dmul>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4630      	mov	r0, r6
 80045b2:	4629      	mov	r1, r5
 80045b4:	f7fb fdda 	bl	800016c <__adddf3>
 80045b8:	4606      	mov	r6, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	4630      	mov	r0, r6
 80045be:	4629      	mov	r1, r5
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c4:	2900      	cmp	r1, #0
 80045c6:	dc0d      	bgt.n	80045e4 <__ieee754_sqrt+0x58>
 80045c8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80045cc:	ea5c 0707 	orrs.w	r7, ip, r7
 80045d0:	d0f4      	beq.n	80045bc <__ieee754_sqrt+0x30>
 80045d2:	b139      	cbz	r1, 80045e4 <__ieee754_sqrt+0x58>
 80045d4:	4602      	mov	r2, r0
 80045d6:	f7fb fdc7 	bl	8000168 <__aeabi_dsub>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	f7fc f8a5 	bl	800072c <__aeabi_ddiv>
 80045e2:	e7e9      	b.n	80045b8 <__ieee754_sqrt+0x2c>
 80045e4:	1512      	asrs	r2, r2, #20
 80045e6:	d074      	beq.n	80046d2 <__ieee754_sqrt+0x146>
 80045e8:	2000      	movs	r0, #0
 80045ea:	07d5      	lsls	r5, r2, #31
 80045ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80045f4:	bf5e      	ittt	pl
 80045f6:	0fe3      	lsrpl	r3, r4, #31
 80045f8:	0064      	lslpl	r4, r4, #1
 80045fa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80045fe:	0fe3      	lsrs	r3, r4, #31
 8004600:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004604:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004608:	2516      	movs	r5, #22
 800460a:	4601      	mov	r1, r0
 800460c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004610:	1076      	asrs	r6, r6, #1
 8004612:	0064      	lsls	r4, r4, #1
 8004614:	188f      	adds	r7, r1, r2
 8004616:	429f      	cmp	r7, r3
 8004618:	bfde      	ittt	le
 800461a:	1bdb      	suble	r3, r3, r7
 800461c:	18b9      	addle	r1, r7, r2
 800461e:	1880      	addle	r0, r0, r2
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	3d01      	subs	r5, #1
 8004624:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004628:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800462c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004630:	d1f0      	bne.n	8004614 <__ieee754_sqrt+0x88>
 8004632:	462a      	mov	r2, r5
 8004634:	f04f 0e20 	mov.w	lr, #32
 8004638:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800463c:	428b      	cmp	r3, r1
 800463e:	eb07 0c05 	add.w	ip, r7, r5
 8004642:	dc02      	bgt.n	800464a <__ieee754_sqrt+0xbe>
 8004644:	d113      	bne.n	800466e <__ieee754_sqrt+0xe2>
 8004646:	45a4      	cmp	ip, r4
 8004648:	d811      	bhi.n	800466e <__ieee754_sqrt+0xe2>
 800464a:	f1bc 0f00 	cmp.w	ip, #0
 800464e:	eb0c 0507 	add.w	r5, ip, r7
 8004652:	da43      	bge.n	80046dc <__ieee754_sqrt+0x150>
 8004654:	2d00      	cmp	r5, #0
 8004656:	db41      	blt.n	80046dc <__ieee754_sqrt+0x150>
 8004658:	f101 0801 	add.w	r8, r1, #1
 800465c:	1a5b      	subs	r3, r3, r1
 800465e:	4641      	mov	r1, r8
 8004660:	45a4      	cmp	ip, r4
 8004662:	bf88      	it	hi
 8004664:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004668:	eba4 040c 	sub.w	r4, r4, ip
 800466c:	443a      	add	r2, r7
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	f1be 0e01 	subs.w	lr, lr, #1
 8004674:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004678:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800467c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004680:	d1dc      	bne.n	800463c <__ieee754_sqrt+0xb0>
 8004682:	4323      	orrs	r3, r4
 8004684:	d006      	beq.n	8004694 <__ieee754_sqrt+0x108>
 8004686:	1c54      	adds	r4, r2, #1
 8004688:	bf0b      	itete	eq
 800468a:	4672      	moveq	r2, lr
 800468c:	3201      	addne	r2, #1
 800468e:	3001      	addeq	r0, #1
 8004690:	f022 0201 	bicne.w	r2, r2, #1
 8004694:	1043      	asrs	r3, r0, #1
 8004696:	07c1      	lsls	r1, r0, #31
 8004698:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800469c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80046a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80046a4:	bf48      	it	mi
 80046a6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80046aa:	4610      	mov	r0, r2
 80046ac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80046b0:	e782      	b.n	80045b8 <__ieee754_sqrt+0x2c>
 80046b2:	0ae3      	lsrs	r3, r4, #11
 80046b4:	3915      	subs	r1, #21
 80046b6:	0564      	lsls	r4, r4, #21
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0fa      	beq.n	80046b2 <__ieee754_sqrt+0x126>
 80046bc:	02de      	lsls	r6, r3, #11
 80046be:	d50a      	bpl.n	80046d6 <__ieee754_sqrt+0x14a>
 80046c0:	f1c2 0020 	rsb	r0, r2, #32
 80046c4:	fa24 f000 	lsr.w	r0, r4, r0
 80046c8:	1e55      	subs	r5, r2, #1
 80046ca:	4094      	lsls	r4, r2
 80046cc:	4303      	orrs	r3, r0
 80046ce:	1b4a      	subs	r2, r1, r5
 80046d0:	e78a      	b.n	80045e8 <__ieee754_sqrt+0x5c>
 80046d2:	4611      	mov	r1, r2
 80046d4:	e7f0      	b.n	80046b8 <__ieee754_sqrt+0x12c>
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	3201      	adds	r2, #1
 80046da:	e7ef      	b.n	80046bc <__ieee754_sqrt+0x130>
 80046dc:	4688      	mov	r8, r1
 80046de:	e7bd      	b.n	800465c <__ieee754_sqrt+0xd0>
 80046e0:	7ff00000 	.word	0x7ff00000

080046e4 <fabs>:
 80046e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046e8:	4770      	bx	lr

080046ea <finite>:
 80046ea:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80046ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80046f2:	0fc0      	lsrs	r0, r0, #31
 80046f4:	4770      	bx	lr
	...

080046f8 <nan>:
 80046f8:	2000      	movs	r0, #0
 80046fa:	4901      	ldr	r1, [pc, #4]	; (8004700 <nan+0x8>)
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	7ff80000 	.word	0x7ff80000

08004704 <rint>:
 8004704:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8004708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800470a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800470e:	2f13      	cmp	r7, #19
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	460c      	mov	r4, r1
 8004716:	4605      	mov	r5, r0
 8004718:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800471c:	dc59      	bgt.n	80047d2 <rint+0xce>
 800471e:	2f00      	cmp	r7, #0
 8004720:	da2a      	bge.n	8004778 <rint+0x74>
 8004722:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004726:	4301      	orrs	r1, r0
 8004728:	d022      	beq.n	8004770 <rint+0x6c>
 800472a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800472e:	4301      	orrs	r1, r0
 8004730:	424d      	negs	r5, r1
 8004732:	430d      	orrs	r5, r1
 8004734:	4936      	ldr	r1, [pc, #216]	; (8004810 <rint+0x10c>)
 8004736:	0c5c      	lsrs	r4, r3, #17
 8004738:	0b2d      	lsrs	r5, r5, #12
 800473a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800473e:	0464      	lsls	r4, r4, #17
 8004740:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004744:	ea45 0304 	orr.w	r3, r5, r4
 8004748:	e9d1 4500 	ldrd	r4, r5, [r1]
 800474c:	4620      	mov	r0, r4
 800474e:	4629      	mov	r1, r5
 8004750:	f7fb fd0c 	bl	800016c <__adddf3>
 8004754:	e9cd 0100 	strd	r0, r1, [sp]
 8004758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800475c:	462b      	mov	r3, r5
 800475e:	4622      	mov	r2, r4
 8004760:	f7fb fd02 	bl	8000168 <__aeabi_dsub>
 8004764:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004768:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	b003      	add	sp, #12
 8004776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004778:	4926      	ldr	r1, [pc, #152]	; (8004814 <rint+0x110>)
 800477a:	4139      	asrs	r1, r7
 800477c:	ea03 0001 	and.w	r0, r3, r1
 8004780:	4310      	orrs	r0, r2
 8004782:	d0f5      	beq.n	8004770 <rint+0x6c>
 8004784:	084b      	lsrs	r3, r1, #1
 8004786:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800478a:	ea52 0501 	orrs.w	r5, r2, r1
 800478e:	d00c      	beq.n	80047aa <rint+0xa6>
 8004790:	ea24 0303 	bic.w	r3, r4, r3
 8004794:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004798:	2f13      	cmp	r7, #19
 800479a:	bf0c      	ite	eq
 800479c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80047a0:	2500      	movne	r5, #0
 80047a2:	fa44 f707 	asr.w	r7, r4, r7
 80047a6:	ea43 0407 	orr.w	r4, r3, r7
 80047aa:	4919      	ldr	r1, [pc, #100]	; (8004810 <rint+0x10c>)
 80047ac:	4623      	mov	r3, r4
 80047ae:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80047b2:	462a      	mov	r2, r5
 80047b4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80047b8:	4620      	mov	r0, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	f7fb fcd6 	bl	800016c <__adddf3>
 80047c0:	e9cd 0100 	strd	r0, r1, [sp]
 80047c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	f7fb fccc 	bl	8000168 <__aeabi_dsub>
 80047d0:	e7cc      	b.n	800476c <rint+0x68>
 80047d2:	2f33      	cmp	r7, #51	; 0x33
 80047d4:	dd05      	ble.n	80047e2 <rint+0xde>
 80047d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80047da:	d1c9      	bne.n	8004770 <rint+0x6c>
 80047dc:	f7fb fcc6 	bl	800016c <__adddf3>
 80047e0:	e7c4      	b.n	800476c <rint+0x68>
 80047e2:	f04f 31ff 	mov.w	r1, #4294967295
 80047e6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80047ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80047ee:	4208      	tst	r0, r1
 80047f0:	d0be      	beq.n	8004770 <rint+0x6c>
 80047f2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80047f6:	bf18      	it	ne
 80047f8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80047fc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8004800:	bf1e      	ittt	ne
 8004802:	ea20 0303 	bicne.w	r3, r0, r3
 8004806:	fa45 fc0c 	asrne.w	ip, r5, ip
 800480a:	ea43 050c 	orrne.w	r5, r3, ip
 800480e:	e7cc      	b.n	80047aa <rint+0xa6>
 8004810:	08004aa8 	.word	0x08004aa8
 8004814:	000fffff 	.word	0x000fffff

08004818 <scalbn>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800481e:	4604      	mov	r4, r0
 8004820:	460d      	mov	r5, r1
 8004822:	4617      	mov	r7, r2
 8004824:	460b      	mov	r3, r1
 8004826:	b996      	cbnz	r6, 800484e <scalbn+0x36>
 8004828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800482c:	4303      	orrs	r3, r0
 800482e:	d039      	beq.n	80048a4 <scalbn+0x8c>
 8004830:	4b35      	ldr	r3, [pc, #212]	; (8004908 <scalbn+0xf0>)
 8004832:	2200      	movs	r2, #0
 8004834:	f7fb fe50 	bl	80004d8 <__aeabi_dmul>
 8004838:	4b34      	ldr	r3, [pc, #208]	; (800490c <scalbn+0xf4>)
 800483a:	4604      	mov	r4, r0
 800483c:	429f      	cmp	r7, r3
 800483e:	460d      	mov	r5, r1
 8004840:	da0f      	bge.n	8004862 <scalbn+0x4a>
 8004842:	a32d      	add	r3, pc, #180	; (adr r3, 80048f8 <scalbn+0xe0>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f7fb fe46 	bl	80004d8 <__aeabi_dmul>
 800484c:	e006      	b.n	800485c <scalbn+0x44>
 800484e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004852:	4296      	cmp	r6, r2
 8004854:	d10a      	bne.n	800486c <scalbn+0x54>
 8004856:	4602      	mov	r2, r0
 8004858:	f7fb fc88 	bl	800016c <__adddf3>
 800485c:	4604      	mov	r4, r0
 800485e:	460d      	mov	r5, r1
 8004860:	e020      	b.n	80048a4 <scalbn+0x8c>
 8004862:	460b      	mov	r3, r1
 8004864:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004868:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800486c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004870:	19b9      	adds	r1, r7, r6
 8004872:	4291      	cmp	r1, r2
 8004874:	dd0e      	ble.n	8004894 <scalbn+0x7c>
 8004876:	a322      	add	r3, pc, #136	; (adr r3, 8004900 <scalbn+0xe8>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004880:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004884:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004888:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800488c:	4820      	ldr	r0, [pc, #128]	; (8004910 <scalbn+0xf8>)
 800488e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004892:	e7d9      	b.n	8004848 <scalbn+0x30>
 8004894:	2900      	cmp	r1, #0
 8004896:	dd08      	ble.n	80048aa <scalbn+0x92>
 8004898:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800489c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048aa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80048ae:	da16      	bge.n	80048de <scalbn+0xc6>
 80048b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80048b4:	429f      	cmp	r7, r3
 80048b6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80048ba:	dd08      	ble.n	80048ce <scalbn+0xb6>
 80048bc:	4c15      	ldr	r4, [pc, #84]	; (8004914 <scalbn+0xfc>)
 80048be:	4814      	ldr	r0, [pc, #80]	; (8004910 <scalbn+0xf8>)
 80048c0:	f363 74df 	bfi	r4, r3, #31, #1
 80048c4:	a30e      	add	r3, pc, #56	; (adr r3, 8004900 <scalbn+0xe8>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	4621      	mov	r1, r4
 80048cc:	e7bc      	b.n	8004848 <scalbn+0x30>
 80048ce:	4c12      	ldr	r4, [pc, #72]	; (8004918 <scalbn+0x100>)
 80048d0:	4812      	ldr	r0, [pc, #72]	; (800491c <scalbn+0x104>)
 80048d2:	f363 74df 	bfi	r4, r3, #31, #1
 80048d6:	a308      	add	r3, pc, #32	; (adr r3, 80048f8 <scalbn+0xe0>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	e7f5      	b.n	80048ca <scalbn+0xb2>
 80048de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80048e2:	3136      	adds	r1, #54	; 0x36
 80048e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	2200      	movs	r2, #0
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <scalbn+0x108>)
 80048f4:	e7a8      	b.n	8004848 <scalbn+0x30>
 80048f6:	bf00      	nop
 80048f8:	c2f8f359 	.word	0xc2f8f359
 80048fc:	01a56e1f 	.word	0x01a56e1f
 8004900:	8800759c 	.word	0x8800759c
 8004904:	7e37e43c 	.word	0x7e37e43c
 8004908:	43500000 	.word	0x43500000
 800490c:	ffff3cb0 	.word	0xffff3cb0
 8004910:	8800759c 	.word	0x8800759c
 8004914:	7e37e43c 	.word	0x7e37e43c
 8004918:	01a56e1f 	.word	0x01a56e1f
 800491c:	c2f8f359 	.word	0xc2f8f359
 8004920:	3c900000 	.word	0x3c900000

08004924 <_init>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr

08004930 <_fini>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr
